import { BrowserModule } from '@angular/platform-browser';
import {CUSTOM_ELEMENTS_SCHEMA, NgModule, Injector, LOCALE_ID} from '@angular/core';

import { AppComponent } from './app.component';
import {
  CaseGuard, LiveAppsActionStandaloneComponent,
  LiveAppsCaseCockpitComponent, LiveAppsCreatorStandaloneComponent,
  LiveAppsHomeCockpitComponent,
  LiveAppsLoginComponent,
  TcLiveappsLibModule
} from '@tibco-tcstk/tc-liveapps-lib';
import {Location} from '@angular/common';
import { RouterModule } from '@angular/router';
import {FlexLayoutModule, FlexModule} from '@angular/flex-layout';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {
  MatButtonModule, MatButtonToggleModule,
  MatCardModule,
  MatCheckboxModule, MatDialogModule,
  MatExpansionModule,
  MatFormFieldModule, MatIconModule, MatInputModule,
  MatListModule, MatMenuModule, MatOptionModule, MatSelectModule,
  MatTabsModule, MatToolbarModule, MatTooltipModule
} from '@angular/material';
import {
  CachingInterceptor,
  LogService,
  SessionRefreshService,
  TcCoreConfig,
  TcCoreConfigService,
  TcCoreLibModule,
  ProxyInterceptor,
  OAuthInterceptor
} from '@tibco-tcstk/tc-core-lib';
import {TcMessagingLibModule} from '@tibco-tcstk/tc-messaging-lib';
import {LoginComponent} from './routes/login/login.component';
import {HomeComponent} from './routes/home/home.component';
import {AppRoutingModule} from './app-routing.module';
import {StarterAppComponent} from './routes/starter-app/starter-app.component';
import {TcFormsLibModule} from '@tibco-tcstk/tc-forms-lib';
import {CaseComponent} from './routes/case/case.component';
import { ConfigurationComponent } from './routes/configuration/configuration.component';
import { ShowcaseComponent } from './routes/showcase/showcase.component';
import { SplashComponent } from './routes/splash/splash.component';
import {createCustomElement} from '@angular/elements';
import {LiveAppsHomeCockpitStandaloneComponent, LiveAppsCaseCockpitStandaloneComponent} from '@tibco-tcstk/tc-liveapps-lib';
import {HTTP_INTERCEPTORS} from '@angular/common/http';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {TcEventsLibModule} from '@tibco-tcstk/tc-events-lib';
import {TcScribeLibModule} from '@tibco-tcstk/tc-scribe-lib';
import { TcPrimengLibModule } from '@tibco-tcstk/tc-primeng-lib';
// import {TcAgGridModule} from '../../projects/tibco-tcstk/tc-ag-grid/src/lib/tc-ag-grid.module';

/** This is the tc core configuration object
 * To use oauth you must also add the OAuthInterceptor to providers
 *  Note: Only HTTP calls that start with / will have oAuth token attached
 * To use proxy you must also add the ProxyInterceptor to providers
 *  Note: Only HTTP calls that start with / will be proxied
 */
const tcCoreConfig: TcCoreConfig = {
  disableFormLibs: false,
  oAuthLocalStorageKey: 'TC_DEV_KEY',
  proxy_url: '',
  proxy_liveapps_path: '',
  proxy_tce_path: '',
  api_key: '',
  api_key_param: 'api_key',
  enable_tce: false
}

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    StarterAppComponent,
    HomeComponent,
    CaseComponent,
    ConfigurationComponent,
    ShowcaseComponent,
    SplashComponent
  ],
    imports: [
        AppRoutingModule,
        TcCoreLibModule.forRoot(tcCoreConfig),
        TcFormsLibModule,
        TcLiveappsLibModule.forRoot(),
        TcMessagingLibModule,
        TcEventsLibModule,
        TcScribeLibModule,
        TcPrimengLibModule,
        FlexLayoutModule,
        BrowserModule,
        BrowserAnimationsModule,
        FormsModule,
        MatTabsModule,
        MatExpansionModule,
        MatButtonModule,
        MatCardModule,
        MatCheckboxModule,
        MatListModule,
        MatFormFieldModule,
        MatInputModule,
        MatToolbarModule,
        MatIconModule,
        MatSelectModule,
        MatOptionModule,
        MatDialogModule,
        MatMenuModule,
        MatCardModule,
        MatTooltipModule,
        MatTabsModule,
        MatButtonToggleModule,
        ReactiveFormsModule
    ],
  providers: [
    {provide: LOCALE_ID, useValue: 'en-US' },
    LogService,
    // for proxied API calls
    // { provide: HTTP_INTERCEPTORS, useClass: ProxyInterceptor, multi: true },

    // for using oAuth
    // { provide: HTTP_INTERCEPTORS, useClass: OAuthInterceptor, multi: true }
    ],
  exports: [
  ],
  schemas: [],
  entryComponents: [
    LiveAppsLoginComponent,
    LiveAppsHomeCockpitComponent,
    LiveAppsCaseCockpitComponent,
    LiveAppsHomeCockpitStandaloneComponent,
    LiveAppsCaseCockpitStandaloneComponent,
    LiveAppsCreatorStandaloneComponent,
    LiveAppsActionStandaloneComponent
  ]
})
export class AppModule {

  constructor(private injector: Injector, public sessionRefreshService: SessionRefreshService, public tcConfigService: TcCoreConfigService) {
      if (!tcConfigService.getConfig().oAuthLocalStorageKey) {
        // setup cookie refresh for every 10 minutes
        // note: if oauth in use then no need since key will be refreshed in local storage by session manager app
        const usingProxy = (this.tcConfigService.getConfig().proxy_url && this.tcConfigService.getConfig().proxy_url !== '') ? true : false;
        // this.sessionRefreshService.scheduleCookieRefresh(600000, usingProxy);
      }
  }

  ngDoBootstrap() {
    if (!customElements.get('live-apps-login')) {
      const loginEle = createCustomElement(LiveAppsLoginComponent,
        {injector: this.injector});
      customElements.define('live-apps-login', loginEle);
      const homeEle = createCustomElement(LiveAppsHomeCockpitComponent,
        {injector: this.injector});
      customElements.define('live-apps-home-comp', homeEle);
      const homeEleStandAlone = createCustomElement(LiveAppsHomeCockpitStandaloneComponent,
        {injector: this.injector});
      customElements.define('live-apps-home', homeEleStandAlone);
      const caseEle = createCustomElement(LiveAppsCaseCockpitComponent,
        {injector: this.injector});
      customElements.define('live-apps-case-comp', caseEle);
      const caseEleStandAlone = createCustomElement(LiveAppsCaseCockpitStandaloneComponent,
        {injector: this.injector});
      customElements.define('live-apps-case', caseEleStandAlone);
      const creatorEleStandAlone = createCustomElement(LiveAppsCreatorStandaloneComponent,
        {injector: this.injector});
      customElements.define('live-apps-creator', creatorEleStandAlone);
      const actionEleStandAlone = createCustomElement(LiveAppsActionStandaloneComponent,
        {injector: this.injector});
      customElements.define('live-apps-action', actionEleStandAlone);
    }
  }
}
