{
    "pipes": [
        {
            "name": "ParseAuditMessagePipe",
            "id": "pipe-ParseAuditMessagePipe-9edcc4a9f300dd43e2272f4cb2cbea35",
            "file": "src/lib/pipes/audit.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "item",
                            "type": "AuditEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "AuditEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "parseAuditMessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport {AuditEvent} from '../models/tc-case-audit';\r\n\r\n@Pipe({\r\n  name: 'parseAuditMessage'\r\n})\r\nexport class ParseAuditMessagePipe implements PipeTransform {\r\n\r\n  transform(value: any, item: AuditEvent): any {\r\n    // replace any {{paramX}} with the value in the item\r\n    value = value.replace('{{param0}}', item.param0.value);\r\n    value = value.replace('{{param1}}', item.param1.value);\r\n    return value;\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "LiveAppsService",
            "id": "injectable-LiveAppsService-a90a7a59307d08dae5d26aee664aa4ff",
            "file": "src/lib/services/live-apps.service.ts",
            "properties": [
                {
                    "name": "caseTypesCacheMap",
                    "defaultValue": "new Map()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "claimsCacheMap",
                    "defaultValue": "new Map()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "iconSVGTextCacheMap",
                    "defaultValue": "new Map()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "userInfoCacheMap",
                    "defaultValue": "new Map()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "caseSearch",
                    "args": [
                        {
                            "name": "terms",
                            "type": "Observable<string>"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "skip",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseSearchResults>",
                    "typeParameters": [],
                    "line": 166,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "terms",
                            "type": "Observable<string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skip",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "caseSearchEntries",
                    "args": [
                        {
                            "name": "term",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "force",
                            "type": "boolean"
                        },
                        {
                            "name": "skip",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseSearchResults>",
                    "typeParameters": [],
                    "line": 175,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "force",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skip",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFromIconSVGTextCache",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNote",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": "string"
                        },
                        {
                            "name": "uiAppSource",
                            "type": "string"
                        },
                        {
                            "name": "relatedItemId",
                            "type": "string"
                        },
                        {
                            "name": "notificationLabel",
                            "type": "string"
                        },
                        {
                            "name": "notificationUrl",
                            "type": "string"
                        },
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "noteText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 562,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppSource",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notificationLabel",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notificationUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noteText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createReplyNote",
                    "args": [
                        {
                            "name": "originalNote",
                            "type": "Note"
                        },
                        {
                            "name": "reply",
                            "type": "string"
                        },
                        {
                            "name": "noteId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 621,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalNote",
                            "type": "Note",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reply",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noteId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAllNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 546,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteNote",
                    "args": [
                        {
                            "name": "noteId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 677,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "noteId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplications",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appIds",
                            "type": "string[]"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypesList>",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCase",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfo>",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseByRef",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": ""
                        },
                        {
                            "name": "caseRef",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfo>",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCases",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "skip",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfoList>",
                    "typeParameters": [],
                    "line": 128,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skip",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCasesCount",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypeBasicInfo",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseType>",
                    "typeParameters": [],
                    "line": 251,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypeBasicInfoCached",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        },
                        {
                            "name": "typeId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 268,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypes",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypesList>",
                    "typeParameters": [],
                    "line": 198,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypeSchema",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypesList>",
                    "typeParameters": [],
                    "line": 211,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypeStates",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypeStatesList>",
                    "typeParameters": [],
                    "line": 224,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClaims",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Claim>",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getFavoriteCases",
                    "args": [
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseList>",
                    "typeParameters": [],
                    "line": 424,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupMemberships",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Groups>",
                    "typeParameters": [],
                    "line": 703,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroups",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Groups>",
                    "typeParameters": [],
                    "line": 687,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIconSVGText",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 292,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIconSVGTextCache",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 308,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNote",
                    "args": [
                        {
                            "name": "noteId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Note>",
                    "typeParameters": [],
                    "line": 598,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "noteId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotesForCollections",
                    "args": [
                        {
                            "name": "collectionIds",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<NotesList>",
                    "typeParameters": [],
                    "line": 535,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "collectionIds",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotifications",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": ""
                        },
                        {
                            "name": "relatedTypeId",
                            "type": ""
                        },
                        {
                            "name": "userId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<NotificationList>",
                    "typeParameters": [],
                    "line": 667,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedTypeId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecentCases",
                    "args": [
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseList>",
                    "typeParameters": [],
                    "line": 364,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSandboxes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SandboxList>",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSSCasesList",
                    "args": [
                        {
                            "name": "ssName",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseList>",
                    "typeParameters": [],
                    "line": 369,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ssName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getThread",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": "string"
                        },
                        {
                            "name": "relatedItemId",
                            "type": "string"
                        },
                        {
                            "name": "threadId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 608,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "threadId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getThreads",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": "string"
                        },
                        {
                            "name": "itemTypeId",
                            "type": "string"
                        },
                        {
                            "name": "skip",
                            "type": "number"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ThreadList>",
                    "typeParameters": [],
                    "line": 505,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemTypeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "skip",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserCached",
                    "args": [
                        {
                            "name": "url",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 495,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserInfo",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserInfo>",
                    "typeParameters": [],
                    "line": 483,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFavoriteCase",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 446,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newCasesRecord",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "maxSize",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "SharedStateContent",
                    "typeParameters": [],
                    "line": 350,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxSize",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runProcess",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "processId",
                            "type": "string"
                        },
                        {
                            "name": "caseReference",
                            "type": "string"
                        },
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 456,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "processId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseReference",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCasesRecord",
                    "args": [
                        {
                            "name": "ssName",
                            "type": "string"
                        },
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "maxSize",
                            "type": "number"
                        },
                        {
                            "name": "toggle",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ssName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxSize",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toggle",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFavoriteCase",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 440,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRecentCase",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToNotes",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": ""
                        },
                        {
                            "name": "relatedTypeId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 638,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedTypeId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsetRecentCase",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribeToNotes",
                    "args": [
                        {
                            "name": "relatedItemType",
                            "type": ""
                        },
                        {
                            "name": "relatedTypeId",
                            "type": ""
                        },
                        {
                            "name": "userId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 658,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "relatedItemType",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "relatedTypeId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCasesRecord",
                    "args": [
                        {
                            "name": "casesContent",
                            "type": "SharedStateContent"
                        },
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "toggle",
                            "type": "Boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "SharedStateContent",
                    "typeParameters": [],
                    "line": 320,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "casesContent",
                            "type": "SharedStateContent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toggle",
                            "type": "Boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateNote",
                    "args": [
                        {
                            "name": "note",
                            "type": "Note"
                        },
                        {
                            "name": "noteId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Note>",
                    "typeParameters": [],
                    "line": 549,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "note",
                            "type": "Note",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "noteId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NgModule} from '@angular/core';\r\nimport {forkJoin, Observable, of, throwError} from 'rxjs';\r\nimport { HttpClientModule, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  CaseInfo,\r\n  CaseInfoList,\r\n  CaseTypesList,\r\n  CaseTypeStatesList,\r\n  CaseActionsList,\r\n  CaseList,\r\n  UserInfo,\r\n  ApiResponseText,\r\n  NotesList,\r\n  Note,\r\n  ThreadList,\r\n  Thread,\r\n  NoteThread,\r\n  NotificationList,\r\n  CaseType,\r\n  CardConfig,\r\n  IconMap,\r\n  Metadata,\r\n  CaseSearchResults,\r\n  CaseTypeStatesListList\r\n} from '../models/liveappsdata';\r\nimport {  DocumentList, Document} from '../models/tc-document';\r\nimport {\r\n  AccessToken,\r\n  AuthInfo,\r\n  SharedStateList,\r\n  SharedStateEntry,\r\n  SharedStateContent,\r\n  TcSharedStateService,\r\n  UiAppConfig,\r\n  TcCoreCommonFunctions,\r\n  Group,\r\n  Claim,\r\n  Sandbox,\r\n  SandboxList\r\n} from '@tibco-tcstk/tc-core-lib';\r\nimport {Groups} from '../models/tc-groups-data';\r\nimport {\r\n  catchError,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  map,\r\n  mergeMap,\r\n  share,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {split} from 'ts-node';\r\nimport {Location} from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class LiveAppsService {\r\n  // these are 'per session' caches. They won't time out unless explicitly cleared or browser is refreshed\r\n  private claimsCacheMap = new Map();\r\n  private userInfoCacheMap = new Map();\r\n  private caseTypesCacheMap = new Map();\r\n  private iconSVGTextCacheMap = new Map();\r\n\r\n  constructor(\r\n    private http: HttpClient, private location: Location, private sharedStateService: TcSharedStateService) { }\r\n\r\n  public getSandboxes(): Observable<SandboxList> {\r\n    const url = '/organisation/v1/sandboxes';\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map ( sandboxList => new SandboxList().deserialize(sandboxList)));\r\n  }\r\n\r\n  public getApplications(sandboxId: number, appIds: string[], top: number, useCache: boolean): Observable<CaseTypesList> {\r\n    const select = 'b';\r\n    let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;\r\n\r\n    if (appIds && appIds.length > 0) {\r\n      url = url + '&$filter=applicationId in(' + appIds.toString() + ') and isCase eq TRUE';\r\n    }\r\n    // note: since this is cached it will require a reload to see new apps\r\n    let headers;\r\n    if (useCache) {\r\n      headers = new HttpHeaders().set('cacheResponse', 'true');\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n\r\n    return this.http.get(url, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(casetypes => {\r\n          if (appIds && appIds.length > 0) {\r\n            // This is to workaround a bug where non case type types are returned when > 1 appId\r\n            const tmpCaseTypes = new CaseTypesList().deserialize(casetypes);\r\n            const filteredCaseTypes = new CaseTypesList().deserialize( { casetypes: [] });\r\n\r\n            tmpCaseTypes.casetypes.forEach(ctype => {\r\n              if (ctype.id === '1') {\r\n                filteredCaseTypes.casetypes.push(ctype);\r\n              }\r\n            });\r\n            return filteredCaseTypes;\r\n          } else {\r\n            return new CaseTypesList().deserialize(casetypes);\r\n          }\r\n        }));\r\n  }\r\n\r\n  public getClaims(): Observable<Claim> {\r\n    const url = '/organisation/v1/claims';\r\n    const headers = new HttpHeaders().set('cacheResponse', 'true');\r\n    return this.http.get(url, { headers: headers } )\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map ( claim => new Claim().deserialize(claim)));\r\n  }\r\n\r\n  public getCases(sandboxId: number, appId: string, typeId: string, skip: number, top: number): Observable<CaseInfoList> {\r\n    const url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '\r\n      + appId + ' and typeId eq ' + typeId + '&$skip=' + skip + '&$top=' + top;\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfos => new CaseInfoList().deserialize(caseinfos)));\r\n  }\r\n\r\n  public getCasesCount(sandboxId: number, appId: string, typeId: string): Observable<string> {\r\n    const url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '\r\n      + appId + ' and typeId eq ' + typeId + '&$count=true';\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(casecount => casecount.toString()));\r\n  }\r\n\r\n  public getCaseByRef(sandboxId, caseRef: string): Observable<CaseInfo> {\r\n    const url = '/case/v1/cases/' + caseRef\r\n      + '?$sandbox=' + sandboxId;\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfo => new CaseInfo().deserialize(caseinfo))\r\n      );\r\n  }\r\n\r\n  public getCase(caseRef: string, sandboxId: number, appId: string, typeId: string ): Observable<CaseInfo> {\r\n    const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '\r\n      + appId + ' and typeId eq ' + typeId + '&$select=uc, m';\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfo => new CaseInfo().deserialize(caseinfo)));\r\n  }\r\n\r\n  public caseSearch(terms: Observable<string>, sandboxId: number, appId: string, typeId: string, skip: number, top: number): Observable<CaseSearchResults> {\r\n    return terms\r\n      .pipe(\r\n        debounceTime(500),\r\n        distinctUntilChanged(),\r\n        switchMap(term => this.caseSearchEntries(term, sandboxId, appId, typeId, false, skip, top))\r\n      );\r\n  }\r\n\r\n  public caseSearchEntries(term: string, sandboxId: number, appId: string, typeId: string, force: boolean, skip: number, top: number): Observable<CaseSearchResults> {\r\n      let url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '\r\n        + appId + ' and typeId eq ' + typeId + '&$skip=' + skip + '&$top=' + top\r\n        + '&$select=cr';\r\n      if (term || (!term && !force)) {\r\n        url = url + '&$search=' + term;\r\n      }\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfos => {\r\n          const caserefs: string[] = [];\r\n            const caseinfolist = new CaseInfoList().deserialize(caseinfos);\r\n            caseinfolist.caseinfos.forEach(caseinfo => {\r\n              caserefs.push(caseinfo.caseReference);\r\n            })\r\n            return new CaseSearchResults().deserialize({ caserefs: caserefs, searchString: term });\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  public getCaseTypes(sandboxId: number, appId: string, top: number): Observable<CaseTypesList> {\r\n    const select = 'b,s,sa,a';\r\n    let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;\r\n    if (appId != null) {\r\n      url = url + '&$filter=applicationId eq ' + appId;\r\n    }\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(casetypes => new CaseTypesList().deserialize(casetypes)));\r\n  }\r\n\r\n  public getCaseTypeSchema(sandboxId: number, appId: string, top: number): Observable<CaseTypesList> {\r\n    // https://eu.liveapps.cloud.tibco.com/case/v1/types?$sandbox=25&&$filter=applicationName eq 'Customer Complaint'&$select=b,js,c,ac\r\n    const select = 'b,js,c,ac,a';\r\n    let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;\r\n    if (appId != null) {\r\n      url = url + '&$filter=applicationId eq ' + appId;\r\n    }\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(casetypes => new CaseTypesList().deserialize(casetypes)));\r\n  }\r\n\r\n    public getCaseTypeStates(sandboxId: number, appId: string, top: number): Observable<CaseTypeStatesList> {\r\n        const select = 's';\r\n        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select  + '&$top=' + top;\r\n        if (appId != null) {\r\n            url = url + '&$filter=applicationId eq ' + appId;\r\n        }\r\n        const headers = new HttpHeaders().set('cacheResponse', 'true');\r\n        return this.http.get(url, { headers: headers } )\r\n        // return this.http.get(url)\r\n            .pipe(\r\n                tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n                map(casetypestates => {\r\n                  // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);\r\n                  // return x;\r\n\r\n                  const casetypelist = new CaseTypeStatesListList().deserialize(casetypestates);\r\n                  let states: CaseTypeStatesList;\r\n                  casetypelist.casetypes.forEach((casetype) => {\r\n                    if (casetype.states !== undefined) {\r\n                      states = new CaseTypeStatesList().deserialize(casetype.states);\r\n                    }\r\n                  });\r\n                  return states;\r\n                }\r\n                ));\r\n    }\r\n\r\n    public getCaseTypeBasicInfo(sandboxId: number, appId: string, typeId: string, top: number): Observable<CaseType> {\r\n        const select = 'b';\r\n      let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;\r\n      if (appId != null) {\r\n        url = url + '&$filter=applicationId eq ' + appId;\r\n      }\r\n\r\n      if (!this.caseTypesCacheMap.get(url)) {\r\n        const cacheEntry$ = this.getCaseTypeBasicInfoCached(url, typeId)\r\n          .pipe(\r\n            shareReplay(1)\r\n          );\r\n        this.caseTypesCacheMap.set(url, cacheEntry$);\r\n      }\r\n      return this.caseTypesCacheMap.get(url);\r\n    }\r\n\r\n    private getCaseTypeBasicInfoCached(url, typeId) {\r\n      const headers = new HttpHeaders().set('cacheResponse', 'true');\r\n      return this.http.get(url, { headers: headers } )\r\n        .pipe(\r\n          tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n          map(casetypes => {\r\n            const caseTypesList: CaseTypesList = new CaseTypesList().deserialize(casetypes);\r\n            let requestedType: CaseType;\r\n            caseTypesList.casetypes.forEach((casetype) => {\r\n              if (casetype.id === typeId) {\r\n                requestedType = casetype;\r\n              }\r\n            });\r\n            return requestedType;\r\n          })\r\n        );\r\n    }\r\n\r\n    public clearFromIconSVGTextCache(url) {\r\n      if (this.iconSVGTextCacheMap.get(url)) {\r\n        this.iconSVGTextCacheMap.delete(url);\r\n      }\r\n    }\r\n\r\n    public getIconSVGText(url: string): Observable<string> {\r\n      // todo: revisit the base href issue\r\n      if (url.substr(0, 2) === '//') {\r\n        url = url.substr(1, url.length - 1);\r\n      }\r\n      if (!this.iconSVGTextCacheMap.get(url)) {\r\n        // const fixedUrl = window.location.protocol + '//' + window.location.host  + url;\r\n        const cacheEntry$ = this.getIconSVGTextCache(url)\r\n          .pipe(\r\n            shareReplay(1)\r\n          );\r\n        this.iconSVGTextCacheMap.set(url, cacheEntry$);\r\n      }\r\n      return this.iconSVGTextCacheMap.get(url);\r\n    }\r\n\r\n    private getIconSVGTextCache(url) {\r\n      const headers = new HttpHeaders().set('cacheResponse', 'true');\r\n      return this.http.get(url, {responseType: 'text', headers: headers } )\r\n        .pipe(\r\n          map(val => {\r\n              const svgContents = val.toString();\r\n              return svgContents;\r\n            }\r\n          )\r\n        );\r\n    }\r\n\r\n  private updateCasesRecord(casesContent: SharedStateContent, caseRef: string, toggle: Boolean): SharedStateContent {\r\n    const sharedStateContent: SharedStateContent = new SharedStateContent().deserialize(casesContent);\r\n    const casesRec: CaseList = JSON.parse(sharedStateContent.json);\r\n    let existing = false;\r\n      // check if already exists\r\n\r\n    if (caseRef === '-1') {\r\n      // clear list\r\n        casesRec.caseRefs.length = 0;\r\n    } else {\r\n      if (casesRec.caseRefs.indexOf(caseRef) !== -1) {\r\n        // remove it if it is already in the array\r\n        casesRec.caseRefs.splice(casesRec.caseRefs.indexOf(caseRef), 1);\r\n        existing = true;\r\n      }\r\n      if (!toggle || existing === false) {\r\n        // only add it if we are not in toggle mode (favorites) or if the caseRef didnt already exist in the list\r\n        // now add case to front of array\r\n        casesRec.caseRefs.unshift(caseRef);\r\n        // check if we are > max size\r\n        if (casesRec.maxSize !== -1 && casesRec.caseRefs.length > casesRec.maxSize) {\r\n          // remove oldest entry\r\n          casesRec.caseRefs.pop();\r\n        }\r\n      }\r\n    }\r\n    sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));\r\n    return sharedStateContent;\r\n  }\r\n\r\n  private newCasesRecord(caseRef: string, maxSize: number): SharedStateContent {\r\n    const casesRec: CaseList = new CaseList();\r\n    casesRec.maxSize = maxSize;\r\n    if (caseRef === '-1') {\r\n      casesRec.caseRefs = [ ];\r\n    } else {\r\n      casesRec.caseRefs = [caseRef];\r\n    }\r\n    casesRec.uniqueKey = 'caseReference';\r\n    const sharedStateContent: SharedStateContent = new SharedStateContent();\r\n    sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));\r\n    return sharedStateContent;\r\n  }\r\n\r\n  public getRecentCases(uiAppId: string, sandboxId: number): Observable<CaseList> {\r\n    const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';\r\n    return this.getSSCasesList(ssName, sandboxId);\r\n  }\r\n\r\n  private getSSCasesList(ssName: string, sandboxId: number): Observable<CaseList> {\r\n    return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(sharedStateList => {\r\n          if (sharedStateList.sharedStateEntries.length > 0) {\r\n            return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));\r\n          } else {\r\n            return new CaseList();\r\n          }\r\n        }\r\n        )\r\n      );\r\n  }\r\n\r\n  public unsetRecentCase(caseRef: string, uiAppId: string, sandboxId: number) {\r\n    // NOTE: Use '-1' as caseRef to clear recent cases list\r\n    const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';\r\n    this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, true);\r\n  }\r\n\r\n  public setRecentCase(caseRef: string, uiAppId: string, sandboxId: number) {\r\n    // NOTE: Use '-1' as caseRef to clear recent cases list\r\n    const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';\r\n    this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, false);\r\n  }\r\n\r\n  private setCasesRecord(ssName: string, caseRef: string, uiAppId: string, sandboxId: number, maxSize: number, toggle: boolean) {\r\n    // get cases list from shared state if any\r\n    // update cases data removing oldest if > maxsize\r\n    // set shared state\r\n    let casesEntry: SharedStateEntry;\r\n    this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(sharedStateList => {\r\n            casesEntry = sharedStateList.sharedStateEntries[0] || undefined;\r\n            let content: SharedStateContent;\r\n            if (casesEntry) {\r\n              content = this.updateCasesRecord(casesEntry.content, caseRef, toggle);\r\n              casesEntry.content = content;\r\n              sharedStateList.sharedStateEntries[0] = casesEntry;\r\n              this.sharedStateService.updateSharedState(sharedStateList.sharedStateEntries).subscribe();\r\n            } else {\r\n              content = this.newCasesRecord(caseRef, maxSize);\r\n              this.sharedStateService.createSharedState(ssName, 'PRIVATE', '', sandboxId, undefined, undefined, undefined, content).subscribe();\r\n            }\r\n\r\n            return casesEntry;\r\n          }\r\n\r\n        )\r\n      ).subscribe(null, error => console.log('Unable to set recent cases: ' + error));\r\n  }\r\n\r\n  public getFavoriteCases(uiAppId: string, sandboxId: number): Observable<CaseList> {\r\n    const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';\r\n    return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(sharedStateList => {\r\n          if (sharedStateList.sharedStateEntries.length > 0) {\r\n            return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));\r\n          } else {\r\n            return new CaseList();\r\n          }\r\n        }\r\n        )\r\n      );\r\n  }\r\n\r\n  public setFavoriteCase(caseRef: string, uiAppId: string, sandboxId: number) {\r\n    // NOTE: Use '-1' as caseRef to clear recent cases list\r\n    const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';\r\n    this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, -1, true);\r\n  }\r\n\r\n  public isFavoriteCase(caseRef: string, uiAppId: string, sandboxId: number): Observable<boolean> {\r\n    const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';\r\n    return this.getSSCasesList(ssName, sandboxId)\r\n      .pipe(\r\n        map(caselist => {\r\n          return caselist.caseRefs ? (caselist.caseRefs.indexOf(caseRef) !== -1) : false;\r\n        })\r\n      );\r\n  }\r\n\r\n  public runProcess(sandboxId: number, appId: string, processId: string, caseReference: string, data: any): Observable<any> {\r\n    const url = '/process/v1/processes';\r\n    // convert data to an escaped JSON string\r\n    const dataJson = TcCoreCommonFunctions.escapeString(JSON.stringify(data));\r\n    const body = {\r\n      'id': processId,\r\n      'sandboxId': sandboxId,\r\n      'applicationId': appId,\r\n      'data': dataJson\r\n    };\r\n\r\n    if (caseReference) {\r\n      body['caseReference'] = caseReference;\r\n    }\r\n\r\n\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.post(url, bodyStr, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(response => response)\r\n      );\r\n  }\r\n\r\n  // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session\r\n  public getUserInfo(userId: string): Observable<UserInfo> {\r\n    const url =  '/organisation/v1/users/' + userId;\r\n    if (!this.userInfoCacheMap.get(userId)) {\r\n      const cacheEntry$ = this.getUserCached(url)\r\n        .pipe(\r\n          shareReplay(1)\r\n        );\r\n      this.userInfoCacheMap.set(userId, cacheEntry$);\r\n    }\r\n      return this.userInfoCacheMap.get(userId);\r\n  }\r\n\r\n  private getUserCached(url) {\r\n    const headers = new HttpHeaders().set('cacheResponse', 'true');\r\n    return this.http.get(url, { headers: headers } )\r\n      .pipe(\r\n        map(userinfo => new UserInfo().deserialize(userinfo))\r\n      );\r\n  }\r\n\r\n  /* notes service */\r\n\r\n  public getThreads(relatedItemType: string, itemTypeId: string, skip: number, top: number): Observable<ThreadList> {\r\n    // https://liveapps.tenant-integration.tcie.pro/collaboration/notes?$relatedItemCollection=CASE_APP_15441&$orderby=createdDate%20ASC\r\n    const url =  '/collaboration/v1/notes?$relatedItemCollection=' + relatedItemType + '_' + itemTypeId\r\n      + '&$orderby=createdDate desc'\r\n      + '&$top=' + top + '&$skip=' + skip;\r\n    return this.http.get(url)\r\n      .pipe(\r\n        map(notes => {\r\n          const returnedNotes = new NotesList().deserialize(notes);\r\n          const threadList: ThreadList = new ThreadList();\r\n          threadList.threads = [];\r\n          // create threads\r\n          returnedNotes.notes.forEach(function(note) {\r\n              if (note.level === 1) {\r\n                const noteThread = new NoteThread(note.thread.id, false, false, false, undefined, [], note);\r\n                // get other threads for this id\r\n                returnedNotes.notes.forEach(function (threadNote) {\r\n                  if (threadNote.level > 1 && threadNote.threadId === note.thread.id) {\r\n                    // add to the thread\r\n                    noteThread.thread.push(threadNote);\r\n                  }\r\n                });\r\n                threadList.threads.push(noteThread);\r\n              }\r\n            });\r\n          return threadList;\r\n        })\r\n      );\r\n  }\r\n\r\n  public getNotesForCollections(collectionIds): Observable<NotesList> {\r\n    if (collectionIds) {\r\n      const url = '/collaboration/v1/notes?$relatedItemCollection=' + collectionIds +\r\n        '&$orderby=createdDate ASC';\r\n      return this.http.get(url)\r\n        .pipe(\r\n          map(notes => new NotesList().deserialize(notes))\r\n        );\r\n    }\r\n  }\r\n\r\n  public deleteAllNotes() {\r\n  }\r\n\r\n  public updateNote(note: Note, noteId: string): Observable<Note> {\r\n    const url = '/collaboration/v1/notes/' + noteId;\r\n    const body = note;\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.put(url, bodyStr, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map( result => new Note().deserialize(result))\r\n      );\r\n  }\r\n\r\n  public createNote(relatedItemType: string,\r\n                    uiAppSource: string,\r\n                    relatedItemId: string,\r\n                    notificationLabel: string,\r\n                    notificationUrl: string,\r\n                    title: string,\r\n                    noteText: string): Observable<number> {\r\n    const url = '/collaboration/v1/notes';\r\n    const note = new Note().deserialize(\r\n      {\r\n        attributes: [],\r\n        notificationLabel: notificationLabel,\r\n        notificationUrl: notificationUrl,\r\n        text: noteText,\r\n        title: title\r\n      }\r\n    );\r\n    const body = {\r\n      note: note,\r\n      relatedItemCollection: [\r\n        (relatedItemType + '_' + relatedItemId)\r\n      ],\r\n      relatedItemId: relatedItemId,\r\n      relatedItemType: uiAppSource,\r\n      roles: undefined\r\n    };\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.post(url, bodyStr, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(result => Number(result))\r\n      );\r\n  }\r\n\r\n  public getNote(noteId: number): Observable<Note> {\r\n    const url = '/collaboration/v1/notes/' + noteId;\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(note => new Note().deserialize(note)\r\n        )\r\n      );\r\n  }\r\n\r\n  public getThread(relatedItemType: string, relatedItemId: string, threadId: number) {\r\n    const url = '/collaboration/v1/notes/?$relatedItemType=' + relatedItemType\r\n      + '&relatedItemId=' + relatedItemId\r\n      + '&filter=threadId=' + threadId\r\n      + '&orderby=createdDate ASC';\r\n      return this.http.get(url)\r\n        .pipe(\r\n          tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n          map(notes => new NotesList().deserialize(notes)\r\n          )\r\n        );\r\n  }\r\n\r\n  public createReplyNote(originalNote: Note, reply: string, noteId: string): Observable<number> {\r\n    const url = '/collaboration/v1/notes/' + noteId;\r\n    const body = {\r\n      notificationLabel: originalNote.notificationLabel,\r\n      notificationUrl: originalNote.notificationUrl,\r\n      text: reply\r\n    };\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.post(url, bodyStr, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(value => Number(value))\r\n      );\r\n  }\r\n\r\n  public subscribeToNotes(relatedItemType, relatedTypeId) {\r\n    const url = '/collaboration/v1/notifications';\r\n    const body = {\r\n      topicId: undefined,\r\n      threadId: undefined,\r\n      notifyCollection: {\r\n        collectionName: relatedItemType + '_' + relatedTypeId,\r\n        lifecycledWithType: 'RT_CASE',\r\n        lifecycledWithId: true\r\n      }\r\n    };\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.post(url, bodyStr, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))\r\n      );\r\n  }\r\n\r\n  public unsubscribeToNotes(relatedItemType, relatedTypeId, userId) {\r\n    let url = '/collaboration/v1/notifications?$filter=collectionName=';\r\n    url = url + '\\'' + relatedItemType + '_' + relatedTypeId + '\\' and entityId=' + userId;\r\n    return this.http.delete(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))\r\n      );\r\n  }\r\n\r\n  public getNotifications(relatedItemType, relatedTypeId, userId): Observable<NotificationList> {\r\n    const url = '/collaboration/v1/notifications?$filter=collectionName=\\'' + relatedItemType + '_' + relatedTypeId\r\n            + '\\' and entityId=' + userId;\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(value => new NotificationList().deserialize(value))\r\n      );\r\n  }\r\n\r\n  public deleteNote(noteId: number) {\r\n    const url = '/collaboration/v1/notes/' + noteId;\r\n    return this.http.delete(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))\r\n      );\r\n  }\r\n\r\n  /* end notes service */\r\n\r\n  public getGroups(sandboxId: number, top: number, useCache: boolean): Observable<Groups> {\r\n    const url = '/organisation/v1/groups?$sandbox=' + sandboxId + '&$top=' + top;\r\n    let headers;\r\n    if (useCache) {\r\n      headers = new HttpHeaders().set('cacheResponse', 'true');\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n    return this.http.get(url, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map( groups => new Groups().deserialize({ groups: groups }))\r\n      );\r\n  }\r\n\r\n  public getGroupMemberships(sandboxId: number, userId: string, top: number, useCache: boolean): Observable<Groups> {\r\n    const url = '/organisation/v1/users/' + userId + '/groups' + '?$sandbox=' + sandboxId + '&$top=' + top;\r\n    let headers;\r\n    if (useCache) {\r\n      headers = new HttpHeaders().set('cacheResponse', 'true');\r\n    } else {\r\n      headers = new HttpHeaders();\r\n    }\r\n\r\n    return this.http.get(url, { headers })\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map( groups => new Groups().deserialize({ groups: groups }))\r\n      );\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService"
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcCaseAuditService",
            "id": "injectable-TcCaseAuditService-59c3ef002abb817ee017343207773fb0",
            "file": "src/lib/services/tc-case-audit.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCaseAudit",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "startAt",
                            "type": "string"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuditEventList>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startAt",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {AuditEventList} from '../models/tc-case-audit';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcCaseAuditService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getCaseAudit(caseRef: string, sandboxId: number, startAt: string, top: number): Observable<AuditEventList> {\r\n    const select = 's';\r\n    let url = '/event/v1/auditEvents?$sandbox=' + sandboxId\r\n      + '&$filter=type eq \\'case\\''\r\n      + ' and id eq \\'' + caseRef + '\\'';\r\n    url = (startAt !== undefined) ? (url + '&$startat=' + startAt) : url;\r\n    url = top ? (url + '&$top=' + top) : url;\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseaudit => new AuditEventList().deserialize(caseaudit)));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcCaseCardConfigService",
            "id": "injectable-TcCaseCardConfigService-de2db736d0724c984aac2e2abb2ea0ae",
            "file": "src/lib/services/tc-case-card-config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createCardConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewCardConfig",
                    "args": [
                        {
                            "name": "states",
                            "type": "CaseTypeState[]"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "caseTypeId",
                            "type": "string"
                        },
                        {
                            "name": "defaultCaseTypeColor",
                            "type": "string"
                        },
                        {
                            "name": "defaultCaseTypeIcon",
                            "type": "string"
                        },
                        {
                            "name": "defaultStateColor",
                            "type": "string"
                        },
                        {
                            "name": "defaultStateIcon",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseCardConfig>",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "states",
                            "type": "CaseTypeState[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseTypeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultCaseTypeColor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultCaseTypeIcon",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultStateColor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultStateIcon",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardConfig",
                    "args": [
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CardConfig>",
                    "typeParameters": [],
                    "line": 131,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseCardConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "caseTypeId",
                            "type": "string"
                        },
                        {
                            "name": "defaultCaseTypeColor",
                            "type": "string"
                        },
                        {
                            "name": "defaultCaseTypeIcon",
                            "type": "string"
                        },
                        {
                            "name": "defaultStateColor",
                            "type": "string"
                        },
                        {
                            "name": "defaultStateIcon",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseCardConfig>",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseTypeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultCaseTypeColor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultCaseTypeIcon",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultStateColor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultStateIcon",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseWithSummary",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfo>",
                    "typeParameters": [],
                    "line": 214,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseCaseInfo",
                    "args": [
                        {
                            "name": "caseinfo",
                            "type": "CaseInfo"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfo>",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseinfo",
                            "type": "CaseInfo",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCardConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "config",
                            "type": "CardConfig"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CardConfig>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "CardConfig",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCaseCardConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "updatedConfig",
                            "type": "CaseCardConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseCardConfig>",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updatedConfig",
                            "type": "CaseCardConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport {SharedStateContent, SharedStateEntry, SharedStateList, TcCoreCommonFunctions, TcSharedStateService, UiAppConfig} from '@tibco-tcstk/tc-core-lib';\r\nimport {forkJoin, Observable, of, throwError} from 'rxjs';\r\nimport {ApiResponseError, CardConfig, CaseInfo, CaseTypeState, CaseTypeStatesList, IconMap, UserInfo} from '../models/liveappsdata';\r\nimport {LiveAppsService} from './live-apps.service';\r\nimport {CaseCardConfig} from '../models/tc-case-card-config';\r\nimport {catchError, flatMap, map, mergeMap, tap} from 'rxjs/operators';\r\nimport {flush} from '@angular/core/testing';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Location} from '@angular/common';\r\n\r\nexport const GENERIC_STATE_ICON_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"nonzero\" d=\"M.045 1.154h13.91v2.133H.045V1.154zM.8 4.75h12.364v8.19c0 .596-.487 1.083-1.082 1.083h-10.2A1.085 1.085 0 0 1 .8 12.94V4.75zm7.978 2.447V5.776H5.222v1.421h3.556z\"/>\\n' +\r\n  '</svg>\\n';\r\n\r\nexport const GENERIC_CASETYPE_ICON_SVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 48 48\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"evenodd\" d=\"M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z\"/>\\n' +\r\n  '</svg>\\n';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcCaseCardConfigService {\r\n\r\n  constructor(private http: HttpClient, private liveAppsService: LiveAppsService, private sharedStateService: TcSharedStateService, private location: Location) {\r\n  }\r\n\r\n  public createCardConfig(sandboxId: number, appId: string, uiAppId: string): Observable<string> {\r\n    const ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';\r\n    const content: SharedStateContent = new SharedStateContent();\r\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify({}));\r\n    return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)\r\n      .pipe(\r\n        map(value => {\r\n          return value;\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  public updateCardConfig(sandboxId: number, appId: string, uiAppId: string, config: CardConfig, id: string): Observable<CardConfig> {\r\n    const ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';\r\n    const content: SharedStateContent = new SharedStateContent();\r\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(config));\r\n    const entry: SharedStateEntry = new SharedStateEntry();\r\n    entry.content = content;\r\n    entry.sandboxId = sandboxId;\r\n    entry.name = ssName;\r\n    entry.type = 'PUBLIC';\r\n    entry.id = id;\r\n    const ssList: SharedStateList = new SharedStateList();\r\n    ssList.sharedStateEntries = [];\r\n    ssList.sharedStateEntries.push(entry);\r\n    return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)\r\n      .pipe(\r\n        map(value => {\r\n          return new CardConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));\r\n        })\r\n      );\r\n  }\r\n\r\n  public createNewCardConfig(states: CaseTypeState[], sandboxId: number, appId: string, uiAppId: string, caseTypeId: string, defaultCaseTypeColor: string, defaultCaseTypeIcon: string, defaultStateColor: string, defaultStateIcon: string): Observable<CaseCardConfig> {\r\n    // create new config and return it\r\n    const newConfig$ = this.createCardConfig(sandboxId, appId, uiAppId);\r\n    const updatedConfig$ = newConfig$.pipe(\r\n      mergeMap(id => {\r\n        const stateMap: IconMap[] = [];\r\n        // one record for the case type icon config\r\n        stateMap.push(new IconMap(true, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon));\r\n        states.forEach(state => {\r\n          stateMap.push(new IconMap(false, state.value, defaultStateColor, defaultStateIcon));\r\n        });\r\n        const newCardConfig = new CardConfig().deserialize({ id: id, useCaseTypeColor: false, stateMap: stateMap });\r\n        return this.updateCardConfig(sandboxId, appId, uiAppId, newCardConfig, id).pipe(\r\n          tap(config => {\r\n            // trigger update of the cache\r\n            this.getCardConfig(uiAppId, appId, true, true);\r\n          }),\r\n          map(newcard => {\r\n              return new CaseCardConfig().deserialize(\r\n                { states: states, cardConfig: newcard }\r\n              );\r\n          })\r\n        );\r\n      })\r\n    );\r\n    return updatedConfig$;\r\n  }\r\n\r\n  public getCaseCardConfig(sandboxId: number, appId: string, uiAppId: string, caseTypeId: string, defaultCaseTypeColor: string, defaultCaseTypeIcon: string, defaultStateColor: string, defaultStateIcon: string): Observable<CaseCardConfig> {\r\n    const states$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);\r\n    const cardConfig$ = this.getCardConfig(uiAppId, appId, true, false).pipe(\r\n      map(config => {\r\n          return config;\r\n      })\r\n    );\r\n    return states$.pipe(\r\n      mergeMap(states => {\r\n        return cardConfig$.pipe(\r\n          mergeMap(config => {\r\n            if (config) {\r\n              const cardConfig = new CaseCardConfig().deserialize(\r\n                {states: states.states, cardConfig: config}\r\n              );\r\n              return of(cardConfig);\r\n            } else {\r\n              return this.createNewCardConfig(states.states, sandboxId, appId, uiAppId, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon, defaultStateColor, defaultStateIcon).pipe(\r\n                map(newCardConfig => {\r\n                  return newCardConfig;\r\n                })\r\n              );\r\n            }\r\n          }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  public updateCaseCardConfig(sandboxId: number, appId: string, uiAppId: string, updatedConfig: CaseCardConfig): Observable < CaseCardConfig > {\r\n    return this.updateCardConfig(sandboxId, appId, uiAppId, updatedConfig.cardConfig, updatedConfig.cardConfig.id).pipe(\r\n      map(cardconfig => {\r\n        updatedConfig.cardConfig = cardconfig;\r\n        // remember to flush cache\r\n        this.getCardConfig(uiAppId, appId, true, true).subscribe();\r\n        return updatedConfig;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getCardConfig(uiAppId: string, appId: string, useCache: boolean, flushCache: boolean): Observable<CardConfig> {\r\n    const ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';\r\n    return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache).pipe(\r\n      map(value => {\r\n          if (value.sharedStateEntries.length > 0) {\r\n            const ssresult = new CardConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));\r\n            ssresult.id = value.sharedStateEntries[0].id;\r\n            return ssresult;\r\n          } else {\r\n            return undefined;\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  public parseCaseInfo(caseinfo: CaseInfo, sandboxId: number, appId: string, typeId: string, uiAppId): Observable<CaseInfo> {\r\n    // in order to get all the info we need we actually need to call up to 4 observables in parallel\r\n    const caseInfo$ = this.liveAppsService.getCaseTypeBasicInfo(sandboxId, appId, typeId, 100).pipe(\r\n      map(val => caseinfo.metadata.applicationLabel = val.label)\r\n    );\r\n    const cardConfig$ = this.getCardConfig(uiAppId, appId, true, false).pipe(\r\n      map(val => {\r\n          const stateId = caseinfo.summaryObj.state;\r\n          let stateConfig: IconMap;\r\n          if (val !== undefined && val.stateMap) {\r\n            val.stateMap.forEach((state) => {\r\n              if (state.state === stateId) {\r\n                stateConfig = state;\r\n                caseinfo.metadata.stateColor = stateConfig.fill;\r\n                caseinfo.metadata.stateIcon = stateConfig.icon;\r\n              }\r\n              if (state.isCaseType) {\r\n                stateConfig = state;\r\n                caseinfo.metadata.caseTypeColor = stateConfig.fill;\r\n                caseinfo.metadata.caseTypeIcon = stateConfig.icon;\r\n              }\r\n              caseinfo.metadata.useCaseTypeColor = val.useCaseTypeColor ? val.useCaseTypeColor : false;\r\n            });\r\n          }\r\n          // defaults\r\n          if (!caseinfo.metadata.stateColor) {\r\n            caseinfo.metadata.stateColor = '#8197c0';\r\n          }\r\n          if (!caseinfo.metadata.stateIcon) {\r\n            caseinfo.metadata.stateIcon = 'assets/icons/ic-generic-state.svg';\r\n          }\r\n          if (!caseinfo.metadata.caseTypeColor) {\r\n            caseinfo.metadata.caseTypeColor = '#8197c0';\r\n          }\r\n          if (!caseinfo.metadata.caseTypeIcon) {\r\n            caseinfo.metadata.caseTypeIcon = 'assets/icons/ic-generic-casetype.svg';\r\n          }\r\n        }\r\n      ));\r\n    const forkJoinArray = [caseInfo$, cardConfig$];\r\n    let creatorInfo$;\r\n    let modifiedInfo$;\r\n    if (caseinfo.metadata.createdBy) {\r\n      creatorInfo$ = this.liveAppsService.getUserInfo(caseinfo.metadata.createdBy).pipe(\r\n        map(val => caseinfo.metadata.createdByDetails = val ? val : new UserInfo())\r\n      );\r\n      forkJoinArray.push(creatorInfo$);\r\n    } else {\r\n      caseinfo.metadata.createdByDetails = new UserInfo();\r\n    }\r\n    if (caseinfo.metadata.modifiedBy) {\r\n      modifiedInfo$ = this.liveAppsService.getUserInfo(caseinfo.metadata.modifiedBy).pipe(\r\n        map(val => caseinfo.metadata.modifiedByDetails = val ? val : new UserInfo())\r\n      );\r\n      forkJoinArray.push(modifiedInfo$);\r\n    } else {\r\n      caseinfo.metadata.modifiedByDetails = new UserInfo();\r\n    }\r\n\r\n    // call all the observables at once and return the Observable to the parsed CaseInfo\r\n    return forkJoin(forkJoinArray).pipe(\r\n      map(resultArr => {\r\n        return caseinfo;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getCaseWithSummary(caseRef: string, sandboxId: number, uiAppId: string): Observable<CaseInfo> {\r\n    // get the base caseinfo from the API, then call parseCaseInfo to create an Observable with all the extra data we need\r\n    const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=uc, m, s';\r\n    return this.http.get(url).pipe(\r\n      mergeMap(caseinfo => {\r\n          const caseinf = new CaseInfo().deserialize(caseinfo);\r\n          return this.parseCaseInfo(caseinf, sandboxId, caseinf.metadata.applicationId, caseinf.metadata.typeId, uiAppId);\r\n        }\r\n      ),\r\n      catchError(err => {\r\n        if (err.error.errorCode === 'CM_CASEREF_NOTEXIST') {\r\n          // case deleted\r\n          return of(new CaseInfo().deserialize({ deleted: true } ));\r\n        }\r\n        return throwError(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcCaseDataService",
            "id": "injectable-TcCaseDataService-ab05201f2220a1e3fbaebca6f3e15a62",
            "file": "src/lib/services/tc-case-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCaseState",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseWithSchema",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseInfoWithSchema>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "purgeAllCases",
                    "args": [
                        {
                            "name": "applicationId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PurgeResult>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "applicationId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {forkJoin, Observable, of, zip} from 'rxjs';\r\nimport {CaseInfo, CaseType, JsonSchema} from '../models/liveappsdata';\r\nimport {LiveAppsService} from './live-apps.service';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {CaseInfoWithSchema, PurgeResult} from '../models/tc-case-data';\r\nimport {map, mergeMap, tap} from 'rxjs/operators';\r\nimport {TcCaseCardConfigService} from './tc-case-card-config.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcCaseDataService {\r\n\r\n  constructor(private http: HttpClient, private liveAppsService: LiveAppsService, private caseCardConfigService: TcCaseCardConfigService) { }\r\n\r\n  public getCaseState(caseRef: string, sandboxId: number): Observable<string> {\r\n    const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=s';\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfo => {\r\n          const caseinf = new CaseInfo().deserialize(caseinfo);\r\n          const state: string = caseinf.summaryObj.state;\r\n          return state;\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  public purgeAllCases(applicationId: string, typeId: string, sandboxId: number): Observable<PurgeResult> {\r\n    const url = '/case/v1/cases/?$sandbox=1930&$filter=applicationId eq 2550 and typeId eq 1 and purgeable eq TRUE';\r\n    return this.http.delete(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(result => {\r\n          return new PurgeResult().deserialize(result);\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n\r\n\r\n  public getCaseWithSchema(\r\n    caseRef: string, sandboxId: number, appId: string, typeId: string, uiAppId: string): Observable<CaseInfoWithSchema> {\r\n    const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=uc, m, s';\r\n\r\n    // Make the two required API calls\r\n\r\n    const caseSchema = this.liveAppsService.getCaseTypeSchema(sandboxId, appId, 100).pipe(\r\n      tap(val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n      map(typesList => {\r\n        // get schema for case type\r\n        let requestedType: CaseType;\r\n        typesList.casetypes.forEach((cType) => {\r\n          if (cType.id === typeId) {\r\n            requestedType = cType;\r\n          }\r\n        });\r\n        return requestedType.jsonSchema;\r\n      })\r\n    );\r\n\r\n    const caseData = this.http.get(url)\r\n      .pipe(\r\n        tap(val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseinfo => {\r\n          const caseinf = new CaseInfo().deserialize(caseinfo);\r\n          this.caseCardConfigService.parseCaseInfo(\r\n            caseinf,\r\n            sandboxId,\r\n            caseinf.metadata.applicationId,\r\n            caseinf.metadata.typeId,\r\n            uiAppId\r\n          );\r\n          return caseinf;\r\n        })\r\n      );\r\n\r\n    // Combine the results of both calls into a single response\r\n    const test1 = zip(caseSchema, caseData).pipe(\r\n      map(caseInfoArray => {\r\n        return new CaseInfoWithSchema().deserialize({ caseInfo: caseInfoArray[1], caseSchema: caseInfoArray[0] });\r\n      })\r\n    );\r\n    return test1;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcCaseProcessesService",
            "id": "injectable-TcCaseProcessesService-c14240ddc682403746daacd58142dc77",
            "file": "src/lib/services/tc-case-processes.service.ts",
            "properties": [
                {
                    "name": "createLaProcessSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getCaseIDAttributeName",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCaseActions",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "caseState",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseActionsList>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "caseState",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseActionsForCaseRef",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseActionsList>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseCreators",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseCreatorsList>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProcessDetails",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "action",
                            "type": "CaseAction"
                        },
                        {
                            "name": "creator",
                            "type": "CaseCreator"
                        },
                        {
                            "name": "top",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LaProcessSelection>",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "CaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "creator",
                            "type": "CaseCreator",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {CaseAction, CaseActionsList, CaseCreator, CaseCreatorsList, CaseType, CaseTypesList, Process} from '../models/liveappsdata';\r\nimport {LaProcessSelection} from '../models/tc-case-processes';\r\nimport {LiveAppsService} from './live-apps.service';\r\nimport {Observable} from 'rxjs';\r\nimport {flatMap, map, tap} from 'rxjs/operators';\r\nimport {TcCaseDataService} from './tc-case-data.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcCaseProcessesService {\r\n\r\n  constructor(private http: HttpClient, private liveAppsService: LiveAppsService, private caseDataService: TcCaseDataService) { }\r\n\r\n  //  This service gets the case state then uses that and the caseRef to get the available actions.\r\n  public getCaseActionsForCaseRef(caseRef: string, sandboxId: number, appId: string, typeId: string): Observable<CaseActionsList> {\r\n    const caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);\r\n    const caseActions$ = caseState$.pipe(\r\n      flatMap(caseState => {\r\n        return this.getCaseActions(caseRef, sandboxId, appId, typeId, caseState);\r\n      })\r\n    );\r\n    return caseActions$;\r\n  }\r\n\r\n\r\n// todo: Note this is not a public API - update when Public API available\r\n  public getCaseActions(caseRef: string, sandboxId: number, appId: string, typeId: string, caseState: string): Observable<CaseActionsList> {\r\n    // https://eu.liveapps.cloud.tibco.com/pageflow/caseActions?$sandbox=31&\r\n    // $filter=applicationId%20eq%201742%20and%20caseType%20eq%201%20and%20caseState%20eq%20Responded%20and%20caseRef%20eq%20150491\r\n    const url = '/pageflow/v1/caseActions?$sandbox=' + sandboxId\r\n      + '&$filter=applicationId eq ' + appId\r\n      + ' and caseType eq ' + typeId\r\n      + ' and caseState eq ' + caseState\r\n      + ' and caseRef eq ' + caseRef;\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseactions => {\r\n          const caList = new CaseActionsList().deserialize(caseactions);\r\n          // non public API returns action Id as number, switch to string to match other APIs\r\n          caList.actions.forEach(action => {\r\n            if (typeof action.id === 'number') {\r\n              action.id = String(action.id);\r\n            }\r\n          })\r\n          return caList;\r\n        })\r\n      );\r\n    }\r\n\r\n  // todo: Note this is not a public API - update when Public API available\r\n  public getCaseCreators(sandboxId: number, appId: string, typeId: string): Observable<CaseCreatorsList> {\r\n    const url = '/pageflow/v1/caseCreators?$sandbox=' + sandboxId\r\n      + '&$filter=applicationId eq ' + appId\r\n      + ' and caseType eq ' + typeId\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(casecreators => {\r\n          const ccList = new CaseCreatorsList().deserialize(casecreators);\r\n          // non public API returns creator Id as number, switch to string to match other APIs\r\n          ccList.creators.forEach(creator => {\r\n            if (typeof creator.id === 'number') {\r\n              creator.id = String(creator.id);\r\n            }\r\n          })\r\n          return ccList;\r\n        })\r\n      );\r\n  }\r\n\r\n  private getCaseIDAttributeName = (caseType: CaseType) => {\r\n    let caseIdAttrib: any;\r\n    caseType.attributes.forEach((attribute) => {\r\n      if (attribute.isIdentifier) {\r\n        caseIdAttrib = attribute;\r\n      }\r\n    });\r\n    return caseIdAttrib;\r\n  }\r\n\r\n  // this is a helper function that given a case type 'schema' for the whole application will create an LaProcessSelection object\r\n  // containing both the appSchema and particular details for this action\r\n  // this object is required to submit the process later.\r\n  private createLaProcessSelection = (\r\n    schema: CaseTypesList,\r\n    appId: string,\r\n    typeId: string,\r\n    action: CaseAction,\r\n    creator: CaseCreator,\r\n    caseRef: string): LaProcessSelection => {\r\n      let processSelection: LaProcessSelection;\r\n      schema.casetypes.forEach((casetype) => {\r\n          // the schema will contain definitions for both the 'case' and any defined types in that case.\r\n          // We want the schema for this 'case'.\r\n          if (casetype.applicationId === appId && casetype.id === typeId) {\r\n            if (casetype.jsonSchema !== undefined) {\r\n              if (action) {\r\n                const caseActionList = casetype.actions ? casetype.actions : [];\r\n                // now find the selected action\r\n                caseActionList.forEach((actionDef) => {\r\n                  if (action.id === actionDef.id) {\r\n                    processSelection = new LaProcessSelection(\r\n                      'action', schema, this.getCaseIDAttributeName(casetype), actionDef,\r\n                      // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n                      (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + actionDef.name),\r\n                      caseRef\r\n                    );\r\n                  }\r\n                });\r\n                if (!processSelection) {\r\n                  // no schema for this process\r\n                  const process: Process = new Process().deserialize({ jsonSchema: undefined, name: action.name, id: action.id });\r\n                  processSelection = new LaProcessSelection(\r\n                    'action', schema, this.getCaseIDAttributeName(casetype), process,\r\n                    // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n                    (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + action.name),\r\n                    caseRef\r\n                  );\r\n                }\r\n              } else if (creator) {\r\n                const caseCreatorList = casetype.creators ? casetype.creators : [];\r\n                // now find the selected action\r\n                caseCreatorList.forEach((creatorDef) => {\r\n                  if (creator.id === creatorDef.id) {\r\n                    processSelection = new LaProcessSelection(\r\n                      'creator', schema, this.getCaseIDAttributeName(casetype), creatorDef,\r\n                      // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n                      (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creatorDef.name),\r\n                      null\r\n                    );\r\n                  }\r\n                });\r\n                if (!processSelection) {\r\n                  // no schema for this process\r\n                  const process: Process = new Process().deserialize({ jsonSchema: undefined, name: creator.name, id: creator.id });\r\n                  processSelection = new LaProcessSelection(\r\n                    'creator', schema, this.getCaseIDAttributeName(casetype), process,\r\n                    // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n                    (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creator.name),\r\n                    null\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      );\r\n      return processSelection;\r\n  }\r\n\r\n    public getProcessDetails(\r\n      caseRef: string,\r\n      appId: string,\r\n      typeId: string,\r\n      sandboxId: number,\r\n      action: CaseAction,\r\n      creator: CaseCreator,\r\n      top: number): Observable<LaProcessSelection> {\r\n        return this.liveAppsService.getCaseTypeSchema(sandboxId, appId, top).pipe(\r\n          map(schema => {\r\n            return this.createLaProcessSelection(schema, appId, typeId, action ? action : null, creator ? creator: null, caseRef);\r\n            }\r\n          )\r\n        );\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcCaseStatesService",
            "id": "injectable-TcCaseStatesService-bff6bf46c422c3ee91dd81e9f860f98e",
            "file": "src/lib/services/tc-case-states.service.ts",
            "properties": [
                {
                    "name": "buildTracker",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getTracker",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getTrackerData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCaseStateAudit",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StateAuditEventList>",
                    "typeParameters": [],
                    "line": 173,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseStateAuditWithTerminal",
                    "args": [
                        {
                            "name": "caseRef",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StateAuditEventList>",
                    "typeParameters": [],
                    "line": 156,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "caseRef",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMilestoneSectionSvg",
                    "args": [
                        {
                            "name": "stateLabel",
                            "type": "string"
                        },
                        {
                            "name": "labelClass",
                            "type": "string"
                        },
                        {
                            "name": "bgClass",
                            "type": "string"
                        },
                        {
                            "name": "svgFileName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml",
                    "typeParameters": [],
                    "line": 185,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "stateLabel",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelClass",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgClass",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "svgFileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {forkJoin, Observable} from 'rxjs';\r\nimport {LiveAppsService} from './live-apps.service';\r\nimport {TcCaseDataService} from './tc-case-data.service';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {StateTrackerData, StateTracker, TrackerState, StateAuditEventList, StateAuditEvent} from '../models/tc-case-states';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Location} from '@angular/common';\r\nimport {TcCoreCommonFunctions} from '@tibco-tcstk/tc-core-lib';\r\n\r\nconst MILESTONE_SVG = {\r\n  END_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_INPROGESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '<path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '<text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '    <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '</text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>',\r\n  FIRST_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcCaseStatesService {\r\n\r\n  constructor(private http: HttpClient,\r\n              private liveAppsService: LiveAppsService,\r\n              private caseDataService: TcCaseDataService,\r\n              private sanitizer: DomSanitizer,\r\n              private location: Location) { }\r\n\r\n  private getTrackerData = (caseRef: string, sandboxId: number, appId: string): Observable<StateTrackerData> => {\r\n    // merge the result of these three API calls into one object\r\n    const caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);\r\n    const possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);\r\n    const stateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);\r\n    return forkJoin([caseState$, possibleStates$, stateAudit$]).pipe(\r\n      map(resultArr => {\r\n        return new StateTrackerData().deserialize(\r\n          { possibleStates: resultArr[1], currentState: resultArr[0], caseAudit: resultArr[2].auditEvents }\r\n          );\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildTracker = (trackerData: StateTrackerData): StateTracker => {\r\n    const tracker = new StateTracker();\r\n    tracker.states = [];\r\n    if (trackerData.caseAudit.length <= 0) {\r\n      // if no audit it has likely been deleted and we cannot create a milestone trailer\r\n      tracker.valid = false;\r\n    } else {\r\n      // work out the status of each state\r\n      // possible states: 'pending', 'inprogress', 'completed'\r\n      trackerData.possibleStates.states.forEach(state => {\r\n        const stateLabel = state.label;\r\n        const stateName = state.value;\r\n        const trackerState = new TrackerState();\r\n        trackerState.phase = '';\r\n        trackerState.previousPhase = '';\r\n        // no specific name coming from API so use label.\r\n        trackerState.name = state.label;\r\n        trackerState.label = state.label;\r\n        trackerState.isTerminal = state.isTerminal ? state.isTerminal : false;\r\n        // find last event for this state\r\n        const reversedEvents = [];\r\n        Object.assign(reversedEvents, trackerData.caseAudit);\r\n        reversedEvents.reverse();\r\n        const idx = reversedEvents.findIndex(auditEvent => auditEvent.caseState.value === state.value);\r\n        const origIdx = (trackerData.caseAudit.length - 1) - idx;\r\n        let thisEvent: StateAuditEvent;\r\n        if (idx === -1) {\r\n          // no audit events so we haven't reached this state yet\r\n          trackerState.status = 'pending';\r\n        } else {\r\n          thisEvent = trackerData.caseAudit[origIdx];\r\n          trackerState.user = thisEvent.principalName ? thisEvent.principalName.value : 'system';\r\n          trackerState.changed = thisEvent.creationTime ? thisEvent.creationTime.value : '';\r\n          trackerState.phase = thisEvent.phaseLabel ? thisEvent.phaseLabel.value : undefined;\r\n          trackerState.previousPhase = thisEvent.previousPhaseLabel ? thisEvent.previousPhaseLabel.value : undefined;\r\n          if (state.isTerminal) {\r\n            // if we have audit for this state and it is terminal it must be completed\r\n            trackerState.status = 'completed';\r\n          } else if ((trackerData.caseAudit.length - 1) === origIdx) {\r\n            // if this is the last audit entry then it is in progress\r\n            trackerState.status = 'inprogress';\r\n          } else {\r\n            // otherwise it must be completed\r\n            trackerState.status = 'completed';\r\n          }\r\n        }\r\n        tracker.states.push(trackerState);\r\n        tracker.valid = true;\r\n      });\r\n    }\r\n    return tracker;\r\n  }\r\n\r\n  public getTracker = (caseRef: string, sandboxId: number, appId: string): Observable<StateTracker> => {\r\n    const tracker$ = this.getTrackerData(caseRef, sandboxId, appId).pipe(\r\n      map(trackerData => {\r\n        return this.buildTracker(trackerData);\r\n      })\r\n    );\r\n    return tracker$;\r\n  }\r\n\r\n  public getCaseStateAuditWithTerminal(caseRef: string, sandboxId: number, appId: string): Observable<StateAuditEventList> {\r\n    const possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);\r\n    const caseStateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);\r\n    return forkJoin([possibleStates$, caseStateAudit$]).pipe(\r\n      map(resultArr => {\r\n        const possibleStates = resultArr[0];\r\n        const caseStateAudit = resultArr[1];\r\n        // mark if any are terminal states\r\n        caseStateAudit.auditEvents.forEach(auditEvent => {\r\n          const foundState = possibleStates.states.find(state => state.value === auditEvent.caseState.value);\r\n          auditEvent.isTerminal = foundState.isTerminal ? foundState.isTerminal : false;\r\n        });\r\n        return caseStateAudit;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getCaseStateAudit(caseRef: string, sandboxId: number): Observable<StateAuditEventList> {\r\n\r\n    const url = '/event/v1/auditEvents?$sandbox=' + sandboxId\r\n      + '&$filter=type eq \\'casestate\\''\r\n      + ' and id eq \\'' + caseRef + '\\'';\r\n\r\n    return this.http.get(url)\r\n      .pipe(\r\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n        map(caseaudit => new StateAuditEventList().deserialize(caseaudit)));\r\n  }\r\n\r\n  public getMilestoneSectionSvg(stateLabel: string, labelClass: string, bgClass: string, svgFileName: string): SafeHtml {\r\n    /*return this.liveAppsService.getIconSVGText(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/icons/milestones/' + svgFileName)).pipe(\r\n      map(svgcontents => {\r\n        let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);\r\n        updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);\r\n        updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);\r\n        const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);\r\n        return newval;\r\n      })\r\n    );*/\r\n    // convert svgFileName to the inline property name\r\n    svgFileName = svgFileName.toUpperCase();\r\n    const regEx = /-|\\./gi;\r\n    svgFileName = svgFileName.replace(regEx, '_');\r\n    const svgcontents = MILESTONE_SVG[svgFileName];\r\n    if (svgcontents) {\r\n      let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);\r\n      updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);\r\n      updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);\r\n      const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);\r\n      return newval;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsService",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcDocumentService",
            "id": "injectable-TcDocumentService-b5e5472963cf6e0772912211ac5cc581",
            "file": "src/lib/services/tc-document.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createOrgFolder",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponseText>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDocument",
                    "args": [
                        {
                            "name": "folderType",
                            "type": "string"
                        },
                        {
                            "name": "folderId",
                            "type": "string"
                        },
                        {
                            "name": "documentName",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponseText>",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "folderType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "folderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "documentName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadDocument",
                    "args": [
                        {
                            "name": "folderType",
                            "type": "string"
                        },
                        {
                            "name": "folderId",
                            "type": "string"
                        },
                        {
                            "name": "docId",
                            "type": "string"
                        },
                        {
                            "name": "docVersion",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 150,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "folderType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "folderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docVersion",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "extension",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 195,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "extension",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrgFolder",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OrgFolder>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlForDocument",
                    "args": [
                        {
                            "name": "folderType",
                            "type": "string"
                        },
                        {
                            "name": "folderId",
                            "type": "string"
                        },
                        {
                            "name": "docId",
                            "type": "string"
                        },
                        {
                            "name": "docVersion",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "folderType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "folderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docVersion",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initOrgFolder",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponseText>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listDocuments",
                    "args": [
                        {
                            "name": "folderType",
                            "type": "string"
                        },
                        {
                            "name": "folderId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "filter",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DocumentList>",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "folderType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "folderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseDocument",
                    "args": [
                        {
                            "name": "document",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Document",
                    "typeParameters": [],
                    "line": 105,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "document",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadDocument",
                    "args": [
                        {
                            "name": "folderType",
                            "type": "string"
                        },
                        {
                            "name": "folderId",
                            "type": "string"
                        },
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "fileToUpload",
                            "type": "File"
                        },
                        {
                            "name": "fileName",
                            "type": "string"
                        },
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "folderType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "folderId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileToUpload",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {ApiResponseError, ApiResponseText} from '../models/liveappsdata';\r\nimport {LiveAppsService} from './live-apps.service';\r\nimport {Document, DocumentList, OrgFolder} from '../models/tc-document';\r\nimport {catchError, flatMap, map, tap} from 'rxjs/operators';\r\nimport {TcCoreCommonFunctions} from '@tibco-tcstk/tc-core-lib';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcDocumentService {\r\n\r\n  constructor(private http: HttpClient, private liveapps: LiveAppsService) {\r\n  }\r\n\r\n  public createOrgFolder(name: string): Observable<ApiResponseText> {\r\n    const url = '/webresource/v1/orgFolders/';\r\n    const body = new OrgFolder().deserialize({ name: name });\r\n    const bodyStr = JSON.stringify(body);\r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json');\r\n    return this.http.post(url, bodyStr, { headers }).pipe(\r\n      tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n      map(response => new ApiResponseText().deserialize(response))\r\n    );\r\n  }\r\n\r\n  public getOrgFolder(name: string, useCache: boolean, flushCache: boolean): Observable<OrgFolder> {\r\n    const url = '/webresource/v1/orgFolders/' + name + '/';\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n    if (useCache) {\r\n      headers = headers.set('cacheResponse', 'true');\r\n    }\r\n    if (flushCache) {\r\n      headers = headers.set('flushCache', 'true');\r\n    }\r\n    const options = {headers: headers};\r\n    return this.http.get(url, options).pipe(\r\n      map(response => {\r\n        return new OrgFolder().deserialize(response);\r\n      }),\r\n      catchError(error => {\r\n        const apiError = new ApiResponseError().deserialize(error.error);\r\n        if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {\r\n          return this.createOrgFolder(name).pipe(\r\n            flatMap(newOrgFolder => {\r\n              // trigger cache flush\r\n              return this.getOrgFolder(name, true, true);\r\n            })\r\n          );\r\n        } else {\r\n          throwError(error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public initOrgFolder(name: string): Observable<ApiResponseText> {\r\n    const orgFolder$ = this.getOrgFolder(name, true, false).pipe(\r\n      map(orgFolderResp => {\r\n        return new ApiResponseText().deserialize({ message: 'orgFolder ok'});\r\n      }),\r\n      catchError(error => {\r\n        const apiError = new ApiResponseError().deserialize(error.error);\r\n        if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {\r\n          return this.createOrgFolder(name).pipe(\r\n            map(newOrgFolder => {\r\n              // trigger cache flush\r\n              this.getOrgFolder(name, true, true).subscribe();\r\n              return newOrgFolder;\r\n            })\r\n          );\r\n        } else {\r\n          throwError(error);\r\n        }\r\n      })\r\n    );\r\n    return orgFolder$;\r\n  }\r\n\r\n  public listDocuments(folderType: string, folderId: string, sandboxId: number, filter: string): Observable<DocumentList> {\r\n    let url: string;\r\n    url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/';\r\n    if (sandboxId) {\r\n      url = url + '?$sandbox=' + sandboxId;\r\n    }\r\n    if (filter) {\r\n      url = url + '&$filter=contains(name,\\'' + filter + '\\')';\r\n    }\r\n    return this.http.get(url)\r\n      .pipe(\r\n        map(docs => {\r\n            const docList = new DocumentList().deserialize(docs);\r\n            for (let x = 0; x < docList.documents.length; x++) {\r\n              docList.documents[x] = this.parseDocument(docList.documents[x]);\r\n            }\r\n            return docList;\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  private parseDocument(document): Document {\r\n    const splitDocName = document.name.split('.');\r\n    if (splitDocName.length > 1) {\r\n      document.extension = splitDocName[splitDocName.length - 1];\r\n    } else {\r\n      document.extension = '';\r\n    }\r\n    document.fileIcon = this.getIcon(document.extension);\r\n    document.fileSize = TcCoreCommonFunctions.fileSizeToHuman(Number(document.size));\r\n    this.liveapps.getUserInfo(document.author).subscribe(val => {\r\n      document.authorDetails = val;\r\n      return document;\r\n    }, error => { console.log('Unable to retrieve user details for user: ' + error.errorMsg); });\r\n    this.liveapps.getUserInfo(document.lastModifiedBy).subscribe(val => {\r\n      document.lastModifiedByDetails = val;\r\n      return document;\r\n    }, error => { console.log('Unable to retrieve user details for user: ' + error.errorMsg); });\r\n    return document;\r\n  }\r\n\r\n  public deleteDocument(folderType: string, folderId: string, documentName: string, sandboxId: number): Observable<ApiResponseText> {\r\n    const url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/' + documentName + '?$sandbox=' + sandboxId;\r\n    return this.http.delete(url)\r\n      .pipe(\r\n        map( val => new ApiResponseText().deserialize(val))\r\n      );\r\n  }\r\n\r\n  public getUrlForDocument(folderType: string, folderId: string, docId: string, docVersion: string, sandboxId: number): string {\r\n    let url = '/webresource/';\r\n    if (folderType === 'orgFolders') {\r\n      url = url + 'orgFolders/' + folderId;\r\n    } else {\r\n      url = url + 'folders/' + folderId;\r\n    }\r\n    if (sandboxId && folderType !== 'orgFolders') {\r\n      url = url + '/' + sandboxId;\r\n    }\r\n    url = url + '/' + docId;\r\n    if (docVersion) {\r\n      url = url + '?$version=' + docVersion;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  public downloadDocument(folderType: string, folderId: string, docId: string, docVersion: string, sandboxId: number): Observable<any> {\r\n    let url = '/webresource/';\r\n    if (folderType === 'orgFolders') {\r\n      url = url + 'orgFolders/' + folderId;\r\n    } else {\r\n      url = url + 'folders/' + folderId;\r\n    }\r\n    if (sandboxId && folderType !== 'orgFolders') {\r\n      url = url + '/' + sandboxId;\r\n    }\r\n    url = url + '/' + docId + '?$download=true';\r\n    if (docVersion) {\r\n      url = url + '&$version=' + docVersion;\r\n    }\r\n    // todo: Check whether application/octet-stream is ok or whether we should change it\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/octet-stream',\r\n    });\r\n    return this.http.get(url, { headers, responseType: 'blob' as 'json' });\r\n  }\r\n\r\n  public uploadDocument(folderType: string, folderId: string, sandboxId: number,\r\n                        fileToUpload: File, fileName: string, description: string): Observable<any> {\r\n    let url = '/webresource/v1/' + folderType\r\n      + '/' + folderId\r\n      + '/artifacts/' + fileName + '/upload/';\r\n\r\n    if (sandboxId) {\r\n      url = url + '?$sandbox=' + sandboxId;\r\n    }\r\n\r\n    if (description) {\r\n      url = url + '&description=' + description;\r\n    }\r\n    const headers = new HttpHeaders({\r\n      'accept': 'application/json',\r\n      'Content-Type': 'multipart/form-data',\r\n      'filename': fileName,\r\n      'enctype': 'multipart/form-data'\r\n    });\r\n    const formData: FormData = new FormData();\r\n    formData.append('artifactContents', fileToUpload);\r\n    return this.http.post(url, formData, { headers: headers, reportProgress: true });\r\n  }\r\n\r\n  private getIcon(extension: string): string {\r\n    if (extension === 'txt') {\r\n      return('doc');\r\n    } else if (extension === 'css') {\r\n      return('doc');\r\n    } else if (extension === 'js') {\r\n      return('doc');\r\n    } else if (extension === 'pdf') {\r\n      return('doc');\r\n    } else if (extension === 'xml') {\r\n      return('doc');\r\n    } else if (extension === 'doc') {\r\n      return('doc');\r\n    } else if (extension === 'zip') {\r\n      return('zip');\r\n    } else if (extension === 'ppt') {\r\n      return('doc');\r\n    } else if (extension === 'png') {\r\n      return('image');\r\n    } else {\r\n      return('doc');\r\n    }\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcLiveAppsConfigService",
            "id": "injectable-TcLiveAppsConfigService-e82acf2f560873afe6221669c923079a",
            "file": "src/lib/services/tc-live-apps-config.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createLiveAppsConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "liveappsConfig",
                            "type": "LiveAppsConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "liveappsConfig",
                            "type": "LiveAppsConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLiveAppsConfig",
                    "args": [
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "useCache",
                            "type": "boolean"
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LiveAppsConfig>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flushCache",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLiveAppsConfig",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "uiAppId",
                            "type": "string"
                        },
                        {
                            "name": "liveappsConfig",
                            "type": "LiveAppsConfig"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uiAppId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "liveappsConfig",
                            "type": "LiveAppsConfig",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {map} from 'rxjs/operators';\r\nimport {Location} from '@angular/common';\r\nimport {TcSharedStateService, TcCoreCommonFunctions, SharedStateContent, SharedStateEntry, SharedStateList} from '@tibco-tcstk/tc-core-lib';\r\nimport {LiveAppsConfig} from '../models/tc-liveapps-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcLiveAppsConfigService {\r\n\r\n  constructor(private location: Location, private sharedStateService: TcSharedStateService) {\r\n  }\r\n\r\n  public createLiveAppsConfig(sandboxId: number, uiAppId: string, liveappsConfig: LiveAppsConfig) {\r\n    const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';\r\n    const content: SharedStateContent = new SharedStateContent();\r\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));\r\n\r\n    return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)\r\n      .pipe(\r\n        map(value => value)\r\n      );\r\n  }\r\n\r\n  public getLiveAppsConfig(uiAppId: string, useCache: boolean, flushCache: boolean): Observable<LiveAppsConfig> {\r\n    // if useCache is false this will trigger the service to update the cached version with latest\r\n    const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';\r\n\r\n    return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)\r\n      .pipe(\r\n        map(value => {\r\n            if (value.sharedStateEntries.length > 0) {\r\n              const ssresult = new LiveAppsConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));\r\n              ssresult.id = value.sharedStateEntries[0].id;\r\n              return ssresult;\r\n            } else {\r\n              return undefined;\r\n            }\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  public updateLiveAppsConfig(sandboxId: number, uiAppId: string, liveappsConfig: LiveAppsConfig, id: string) {\r\n    const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';\r\n    const content: SharedStateContent = new SharedStateContent();\r\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));\r\n    const entry: SharedStateEntry = new SharedStateEntry();\r\n    entry.content = content;\r\n    entry.sandboxId = sandboxId;\r\n    entry.name = ssName;\r\n    entry.type = 'PUBLIC';\r\n    entry.id = id;\r\n    const ssList: SharedStateList = new SharedStateList();\r\n    ssList.sharedStateEntries = [];\r\n    ssList.sharedStateEntries.push(entry);\r\n\r\n    return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)\r\n      .pipe(\r\n        map(value => {\r\n          // flush the cache\r\n          this.getLiveAppsConfig(uiAppId, true, true).subscribe();\r\n          return new LiveAppsConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));\r\n        })\r\n      );\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sharedStateService",
                        "type": "TcSharedStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcLiveAppsReportingService",
            "id": "injectable-TcLiveAppsReportingService-e3d52fd695892993eaefda4a12161e3d",
            "file": "src/lib/services/tc-live-apps-reporting.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCaseTypesReport",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypesReport>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCaseTypeStateReport",
                    "args": [
                        {
                            "name": "sandboxId",
                            "type": "number"
                        },
                        {
                            "name": "appId",
                            "type": "string"
                        },
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "incTerminal",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CaseTypeStateReport>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "sandboxId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "incTerminal",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {map, tap} from 'rxjs/operators';\r\nimport {CaseTypeReportRecord, CaseTypesReport, CaseTypeStateReport} from '../models/tc-live-apps-reporting';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TcLiveAppsReportingService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getCaseTypesReport(sandboxId: number, appIds: string[]): Observable<CaseTypesReport> {\r\n    const url = '/case/reports/v1/caseTypesReport?$sandbox=' + sandboxId;\r\n    return this.http.get(url).pipe(\r\n      tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n      map(response => {\r\n        const originalResponse = new CaseTypesReport().deserialize(response);\r\n        function includeCaseType(element: CaseTypeReportRecord, index, array ) {\r\n          return (appIds.indexOf(element.applicationId) !== -1);\r\n        }\r\n        const filteredResponse = new CaseTypesReport();\r\n        filteredResponse.caseTypes = originalResponse.caseTypes.filter(includeCaseType);\r\n        return filteredResponse;\r\n      })\r\n    );\r\n  }\r\n\r\n  public getCaseTypeStateReport(sandboxId: number, appId: string, typeId: string, incTerminal: boolean): Observable<CaseTypeStateReport> {\r\n    const url = '/case/reports/v1/caseStatesReport?$sandbox=' + sandboxId\r\n      + '&$filter=applicationId eq ' + appId\r\n      + ' and typeId eq ' + typeId\r\n      + ' and includeTerminalStates eq ' + String(incTerminal).toUpperCase();\r\n    return this.http.get(url).pipe(\r\n      tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\r\n      map(response => {\r\n        const caseTypeStateReport = new CaseTypeStateReport().deserialize(response);\r\n        return caseTypeStateReport;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TcRolesService",
            "id": "injectable-TcRolesService-beb53d7c612fe7b2ac4de257afcf3c74",
            "file": "src/lib/services/tc-roles-service.ts.service.ts",
            "properties": [
                {
                    "name": "amIConfigurator",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentRole",
                    "defaultValue": "new RoleAttribute()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "getCurrentRole",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "hasAccess",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setCurrentRole",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [
                {
                    "name": "checkRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "string"
                        },
                        {
                            "name": "roles",
                            "type": "Roles"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roles",
                            "type": "Roles",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Roles } from '../models/tc-groups-data';\r\nimport { RoleAttribute } from '@tibco-tcstk/tc-core-lib';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TcRolesService {\r\n    \r\n    constructor() { }\r\n\r\n    private hasAccess = (roleReq: string, roles: Roles): boolean => {\r\n        const reqRole = roles.roles.find(role => {\r\n            return (role.id === roleReq);\r\n        })\r\n        return reqRole ? true : false;\r\n    }\r\n\r\n    checkRole(roleId: string, roles: Roles): boolean {\r\n        return this.hasAccess(roleId, roles);\r\n    }\r\n\r\n    amIConfigurator = (roles: Roles): boolean => {\r\n        const reqRole = roles.roles.find(role => {\r\n            return (role.configuration === true);\r\n        })\r\n        return reqRole ? true : false;\r\n    }\r\n\r\n    currentRole = new RoleAttribute();\r\n    getCurrentRole = (): RoleAttribute => {\r\n        return this.currentRole;\r\n    }\r\n\r\n    setCurrentRole = (role: RoleAttribute): void => {\r\n        this.currentRole = role;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "ApiResponseError",
            "id": "class-ApiResponseError-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "contextAttributes",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 301
                },
                {
                    "name": "errorCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 300
                },
                {
                    "name": "errorMsg",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 299
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 302,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "ApiResponseText",
            "id": "class-ApiResponseText-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 291
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 292,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "AuditEvent",
            "id": "class-AuditEvent-ec1a815dfbbc93c325790c3b9f8c9a65",
            "file": "src/lib/models/tc-case-audit.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class AuditEventAttribute implements Deserializable {\r\n  type: string;\r\n  value: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEvent implements Deserializable {\r\n  // value: string;\r\n  // type: string;\r\n  messageId: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  delayTime: AuditEventAttribute;\r\n  procName: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  taskType: AuditEventAttribute;\r\n  taskName: AuditEventAttribute;\r\n  label: AuditEventAttribute;\r\n  caseState: AuditEventAttribute;\r\n  artifactPath: AuditEventAttribute;\r\n  artifactName: AuditEventAttribute;\r\n  severity: AuditEventAttribute;\r\n  message: AuditEventAttribute;\r\n  param0: AuditEventAttribute;\r\n  param1: AuditEventAttribute;\r\n\r\n  key: AuditEventAttribute;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEventList implements Deserializable {\r\n  auditevents: AuditEvent[];\r\n  deserialize(input: any): this {\r\n    this.auditevents = [];\r\n    Object.assign(this.auditevents, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "artifactName",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "artifactPath",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "caseState",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "creationTime",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "delayTime",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "key",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "label",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "message",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "messageId",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "param0",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "param1",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "principalName",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "procName",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "severity",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "taskName",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "taskType",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "AuditEventAttribute",
            "id": "class-AuditEventAttribute-ec1a815dfbbc93c325790c3b9f8c9a65",
            "file": "src/lib/models/tc-case-audit.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class AuditEventAttribute implements Deserializable {\r\n  type: string;\r\n  value: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEvent implements Deserializable {\r\n  // value: string;\r\n  // type: string;\r\n  messageId: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  delayTime: AuditEventAttribute;\r\n  procName: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  taskType: AuditEventAttribute;\r\n  taskName: AuditEventAttribute;\r\n  label: AuditEventAttribute;\r\n  caseState: AuditEventAttribute;\r\n  artifactPath: AuditEventAttribute;\r\n  artifactName: AuditEventAttribute;\r\n  severity: AuditEventAttribute;\r\n  message: AuditEventAttribute;\r\n  param0: AuditEventAttribute;\r\n  param1: AuditEventAttribute;\r\n\r\n  key: AuditEventAttribute;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEventList implements Deserializable {\r\n  auditevents: AuditEvent[];\r\n  deserialize(input: any): this {\r\n    this.auditevents = [];\r\n    Object.assign(this.auditevents, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "AuditEventList",
            "id": "class-AuditEventList-ec1a815dfbbc93c325790c3b9f8c9a65",
            "file": "src/lib/models/tc-case-audit.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class AuditEventAttribute implements Deserializable {\r\n  type: string;\r\n  value: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEvent implements Deserializable {\r\n  // value: string;\r\n  // type: string;\r\n  messageId: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  delayTime: AuditEventAttribute;\r\n  procName: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  taskType: AuditEventAttribute;\r\n  taskName: AuditEventAttribute;\r\n  label: AuditEventAttribute;\r\n  caseState: AuditEventAttribute;\r\n  artifactPath: AuditEventAttribute;\r\n  artifactName: AuditEventAttribute;\r\n  severity: AuditEventAttribute;\r\n  message: AuditEventAttribute;\r\n  param0: AuditEventAttribute;\r\n  param1: AuditEventAttribute;\r\n\r\n  key: AuditEventAttribute;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class AuditEventList implements Deserializable {\r\n  auditevents: AuditEvent[];\r\n  deserialize(input: any): this {\r\n    this.auditevents = [];\r\n    Object.assign(this.auditevents, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "auditevents",
                    "type": "AuditEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CardConfig",
            "id": "class-CardConfig-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 433
                },
                {
                    "name": "stateMap",
                    "type": "IconMap[]",
                    "optional": false,
                    "description": "",
                    "line": 435
                },
                {
                    "name": "useCaseTypeColor",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 434
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 436,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseAction",
            "id": "class-CaseAction-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activityName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "applicationId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "applicationName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 225
                },
                {
                    "name": "availableInStates",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 226
                },
                {
                    "name": "chatBotEnabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 228
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 229
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 230
                },
                {
                    "name": "noData",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 231
                },
                {
                    "name": "performerPaths",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "process",
                    "type": "Process",
                    "optional": false,
                    "description": "",
                    "line": 235
                },
                {
                    "name": "roles",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 233
                },
                {
                    "name": "version",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 234
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 236,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseActionsList",
            "id": "class-CaseActionsList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "type": "CaseAction[]",
                    "optional": false,
                    "description": "",
                    "line": 243
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 244,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseAttribute",
            "id": "class-CaseAttribute-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "isIdentifier",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "isMandatory",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "isStructuredType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "maximum",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "minimum",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 162
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CaseCardConfig",
            "id": "class-CaseCardConfig-e9523a8a2e51a88e6e630e627173154f",
            "file": "src/lib/models/tc-case-card-config.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CardConfig, CaseTypeState} from './liveappsdata';\r\n\r\nexport class CaseCardConfig implements Deserializable {\r\n  states: CaseTypeState[];\r\n  cardConfig: CardConfig;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cardConfig",
                    "type": "CardConfig",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "states",
                    "type": "CaseTypeState[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseCreator",
            "id": "class-CaseCreator-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activityName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 252
                },
                {
                    "name": "applicationId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 253
                },
                {
                    "name": "applicationName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 254
                },
                {
                    "name": "chatBotEnabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 255
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 256
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 257
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 258
                },
                {
                    "name": "process",
                    "type": "Process",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "roles",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 259
                },
                {
                    "name": "version",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 260
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 262,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseCreatorSelectionContext",
            "id": "class-CaseCreatorSelectionContext-574c9b3f3831d20b48945ce3163ca514",
            "file": "src/lib/models/tc-case-creator.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseType} from './liveappsdata';\r\n\r\nexport class CaseCreatorSelectionContext {\r\n  constructor(public application: CaseType,\r\n              public initialData: any,\r\n              public sandboxId: number\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "application",
                        "type": "CaseType"
                    },
                    {
                        "name": "initialData",
                        "type": "any"
                    },
                    {
                        "name": "sandboxId",
                        "type": "number"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "application",
                        "type": "CaseType",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "initialData",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sandboxId",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "application",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initialData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CaseCreatorsList",
            "id": "class-CaseCreatorsList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "creators",
                    "type": "CaseCreator[]",
                    "optional": false,
                    "description": "",
                    "line": 269
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 270,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseInfo",
            "id": "class-CaseInfo-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "casedata",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "casedataObj",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "caseReference",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "deleted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "metadata",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "summary",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "summaryObj",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "untaggedCasedata",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "untaggedCasedataObj",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 126
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseInfoList",
            "id": "class-CaseInfoList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "casecount",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "caseinfos",
                    "type": "CaseInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 143
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 145,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseInfoWithSchema",
            "id": "class-CaseInfoWithSchema-226fbee36f05a4b2d319f6f51d6f7180",
            "file": "src/lib/models/tc-case-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseInfo, JsonSchema} from './liveappsdata';\r\n\r\nexport class CaseInfoWithSchema implements Deserializable {\r\n  caseInfo: CaseInfo;\r\n  caseSchema: JsonSchema;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class PurgeResult implements Deserializable {\r\n  mfpCount: number;\r\n\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "caseInfo",
                    "type": "CaseInfo",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "caseSchema",
                    "type": "JsonSchema",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseList",
            "id": "class-CaseList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseRefs",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 280
                },
                {
                    "name": "maxSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 279
                },
                {
                    "name": "uniqueKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 278
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 281,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseRoute",
            "id": "class-CaseRoute-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "appId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseRef",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CaseSearchResults",
            "id": "class-CaseSearchResults-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caserefs",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 453
                },
                {
                    "name": "searchString",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 454
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 455,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseType",
            "id": "class-CaseType-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 196
                },
                {
                    "name": "applicationId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "applicationInternalName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 198
                },
                {
                    "name": "applicationName",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 199
                },
                {
                    "name": "attributes",
                    "type": "CaseAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 200
                },
                {
                    "name": "creators",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 201
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 202
                },
                {
                    "name": "isCase",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "jsonSchema",
                    "type": "JsonSchema",
                    "optional": false,
                    "description": "",
                    "line": 206
                },
                {
                    "name": "label",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "name",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 205
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 207,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CaseTypeReportRecord",
            "id": "class-CaseTypeReportRecord-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "activeStateCaseCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "applicationId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "caseTypeInfo",
                    "type": "CaseTypeReportRecordInfo",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "incTerminal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "terminalStateCaseCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeReportRecordInfo",
            "id": "class-CaseTypeReportRecordInfo-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypesList",
            "id": "class-CaseTypesList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "casetypes",
                    "type": "CaseType[]",
                    "optional": false,
                    "description": "",
                    "line": 214
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 215,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypesReport",
            "id": "class-CaseTypesReport-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseTypes",
                    "type": "CaseTypeReportRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeState",
            "id": "class-CaseTypeState-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "isTerminal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeStateReport",
            "id": "class-CaseTypeStateReport-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseStates",
                    "type": "CaseTypeStateReportRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeStateReportRecord",
            "id": "class-CaseTypeStateReportRecord-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "stateInfo",
                    "type": "CaseTypeStateReportStateInfo",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeStateReportStateInfo",
            "id": "class-CaseTypeStateReportStateInfo-04bc67e8af2d6d05c869e3922657a5df",
            "file": "src/lib/models/tc-live-apps-reporting.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class CaseTypeReportRecordInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeReportRecord implements Deserializable {\r\n  activeStateCaseCount: number;\r\n  applicationId: string;\r\n  terminalStateCaseCount: number;\r\n  incTerminal: boolean;\r\n  caseTypeInfo: CaseTypeReportRecordInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesReport implements Deserializable {\r\n  caseTypes: CaseTypeReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportStateInfo implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReportRecord implements  Deserializable {\r\n  caseCount: number;\r\n  stateInfo: CaseTypeStateReportStateInfo;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStateReport implements Deserializable {\r\n  caseStates: CaseTypeStateReportRecord[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isTerminal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeStatesList",
            "id": "class-CaseTypeStatesList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "states",
                    "type": "CaseTypeState[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "CaseTypeStatesListList",
            "id": "class-CaseTypeStatesListList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "casetypes",
                    "type": "CaseTypeStatesList[]",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "DocTags",
            "id": "class-DocTags-4b13bf826bf860ccdacc536945081573",
            "file": "src/lib/models/tc-document.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {UserInfo} from './liveappsdata';\r\n\r\nexport class Document implements Deserializable {\r\n  artifactCheckSum: string;\r\n  artifactRef: string;\r\n  artifactVersion: string;\r\n  author: number;\r\n  authorDetails: UserInfo;\r\n  creationDate: Date;\r\n  description: string;\r\n  id: string;\r\n  lastModifiedBy: string;\r\n  lastModifiedByDetails: UserInfo;\r\n  lastModifiedDate: Date;\r\n  mimeType: string;\r\n  name: string;\r\n  ownerApp: string;\r\n  size: string;\r\n  fileSize: string;\r\n  extension: string;\r\n  fileIcon: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocumentList implements Deserializable {\r\n  documents: Document[];\r\n  deserialize(input: any): this {\r\n    this.documents = [];\r\n    Object.assign(this.documents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class OrgFolder implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  owner: string;\r\n  ownerSub: string;\r\n  ownerSandbox: string;\r\n  creationDate: string;\r\n  lastModifiedDate: string;\r\n  lastModifiedBy: string;\r\n  publishedVersion: string;\r\n  latestVersion: string;\r\n  publisedVersionId: string;\r\n  latestVersionId: string;\r\n  checksum: string;\r\n  extRef: string;\r\n  tags: DocTags[];\r\n  descriptor: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocTags implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  ownerSub: string;\r\n  deserialize(input: any): this {\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "ownerSub",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Document",
            "id": "class-Document-4b13bf826bf860ccdacc536945081573",
            "file": "src/lib/models/tc-document.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {UserInfo} from './liveappsdata';\r\n\r\nexport class Document implements Deserializable {\r\n  artifactCheckSum: string;\r\n  artifactRef: string;\r\n  artifactVersion: string;\r\n  author: number;\r\n  authorDetails: UserInfo;\r\n  creationDate: Date;\r\n  description: string;\r\n  id: string;\r\n  lastModifiedBy: string;\r\n  lastModifiedByDetails: UserInfo;\r\n  lastModifiedDate: Date;\r\n  mimeType: string;\r\n  name: string;\r\n  ownerApp: string;\r\n  size: string;\r\n  fileSize: string;\r\n  extension: string;\r\n  fileIcon: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocumentList implements Deserializable {\r\n  documents: Document[];\r\n  deserialize(input: any): this {\r\n    this.documents = [];\r\n    Object.assign(this.documents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class OrgFolder implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  owner: string;\r\n  ownerSub: string;\r\n  ownerSandbox: string;\r\n  creationDate: string;\r\n  lastModifiedDate: string;\r\n  lastModifiedBy: string;\r\n  publishedVersion: string;\r\n  latestVersion: string;\r\n  publisedVersionId: string;\r\n  latestVersionId: string;\r\n  checksum: string;\r\n  extRef: string;\r\n  tags: DocTags[];\r\n  descriptor: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocTags implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  ownerSub: string;\r\n  deserialize(input: any): this {\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "artifactCheckSum",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "artifactRef",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "artifactVersion",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "author",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "authorDetails",
                    "type": "UserInfo",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "creationDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "extension",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "fileIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fileSize",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "lastModifiedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastModifiedByDetails",
                    "type": "UserInfo",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastModifiedDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mimeType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ownerApp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "DocumentList",
            "id": "class-DocumentList-4b13bf826bf860ccdacc536945081573",
            "file": "src/lib/models/tc-document.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {UserInfo} from './liveappsdata';\r\n\r\nexport class Document implements Deserializable {\r\n  artifactCheckSum: string;\r\n  artifactRef: string;\r\n  artifactVersion: string;\r\n  author: number;\r\n  authorDetails: UserInfo;\r\n  creationDate: Date;\r\n  description: string;\r\n  id: string;\r\n  lastModifiedBy: string;\r\n  lastModifiedByDetails: UserInfo;\r\n  lastModifiedDate: Date;\r\n  mimeType: string;\r\n  name: string;\r\n  ownerApp: string;\r\n  size: string;\r\n  fileSize: string;\r\n  extension: string;\r\n  fileIcon: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocumentList implements Deserializable {\r\n  documents: Document[];\r\n  deserialize(input: any): this {\r\n    this.documents = [];\r\n    Object.assign(this.documents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class OrgFolder implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  owner: string;\r\n  ownerSub: string;\r\n  ownerSandbox: string;\r\n  creationDate: string;\r\n  lastModifiedDate: string;\r\n  lastModifiedBy: string;\r\n  publishedVersion: string;\r\n  latestVersion: string;\r\n  publisedVersionId: string;\r\n  latestVersionId: string;\r\n  checksum: string;\r\n  extRef: string;\r\n  tags: DocTags[];\r\n  descriptor: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocTags implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  ownerSub: string;\r\n  deserialize(input: any): this {\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "documents",
                    "type": "Document[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Group",
            "id": "class-Group-dd7bcf7300bdcddb20a1e24e031dae2e",
            "file": "src/lib/models/tc-groups-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, RoleAttribute} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class Group {\r\n  public name: string;\r\n  public description: string;\r\n  public type: string;\r\n  public id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Groups {\r\n  groups: Group[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Roles {\r\n  roles: RoleAttribute[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class RouteAccessDef {\r\n  routeUrl: string;\r\n  requiredRoleId: string;\r\n}\r\n\r\nexport class RouteAccessControlConfig {\r\n  routes: RouteAccessDef[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Groups",
            "id": "class-Groups-dd7bcf7300bdcddb20a1e24e031dae2e",
            "file": "src/lib/models/tc-groups-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, RoleAttribute} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class Group {\r\n  public name: string;\r\n  public description: string;\r\n  public type: string;\r\n  public id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Groups {\r\n  groups: Group[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Roles {\r\n  roles: RoleAttribute[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class RouteAccessDef {\r\n  routeUrl: string;\r\n  requiredRoleId: string;\r\n}\r\n\r\nexport class RouteAccessControlConfig {\r\n  routes: RouteAccessDef[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "groups",
                    "type": "Group[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IconMap",
            "id": "class-IconMap-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "isCaseType",
                        "type": "boolean"
                    },
                    {
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "name": "fill",
                        "type": "string"
                    },
                    {
                        "name": "icon",
                        "type": "string"
                    }
                ],
                "line": 423,
                "jsdoctags": [
                    {
                        "name": "isCaseType",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fill",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "fill",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 427,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 428,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isCaseType",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 425,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 426,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "JsonSchema",
            "id": "class-JsonSchema-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "$schema",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "definitions",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "properties",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "required",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 171
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LaProcessSelection",
            "id": "class-LaProcessSelection-d6b311170be1aa4063954de4783b2ca2",
            "file": "src/lib/models/tc-case-processes.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseAttribute, CaseTypesList, Process} from './liveappsdata';\r\n\r\nexport class LaProcessSelection {\r\n  // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n  constructor(public type: string,\r\n              public appSchema: CaseTypesList,\r\n              public caseIdAttribute: CaseAttribute,\r\n              public process: Process,\r\n              public ref: string,\r\n              public caseReference: string\r\n  ) {\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string"
                    },
                    {
                        "name": "appSchema",
                        "type": "CaseTypesList"
                    },
                    {
                        "name": "caseIdAttribute",
                        "type": "CaseAttribute"
                    },
                    {
                        "name": "process",
                        "type": "Process"
                    },
                    {
                        "name": "ref",
                        "type": "string"
                    },
                    {
                        "name": "caseReference",
                        "type": "string"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appSchema",
                        "type": "CaseTypesList",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseIdAttribute",
                        "type": "CaseAttribute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "process",
                        "type": "Process",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseReference",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseIdAttribute",
                    "type": "CaseAttribute",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseReference",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "process",
                    "type": "Process",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ref",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LiveAppsConfig",
            "id": "class-LiveAppsConfig-53ad6736e16e54fd092cf079498a58fe",
            "file": "src/lib/models/tc-liveapps-config.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, GeneralConfig} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class LiveAppsConfig implements Deserializable {\r\n  id: string;\r\n  applicationIds: string[];\r\n  recentExcludedAppIds: string[];\r\n  caseIconsFolderId: string;\r\n  documentAppId: string;\r\n  collaborationAppId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LiveAppsConfigHolder implements Deserializable {\r\n  public generalConfig: GeneralConfig;\r\n  public liveAppsConfig: LiveAppsConfig;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "applicationIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "caseIconsFolderId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "collaborationAppId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "documentAppId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "recentExcludedAppIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "LiveAppsConfigHolder",
            "id": "class-LiveAppsConfigHolder-53ad6736e16e54fd092cf079498a58fe",
            "file": "src/lib/models/tc-liveapps-config.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, GeneralConfig} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class LiveAppsConfig implements Deserializable {\r\n  id: string;\r\n  applicationIds: string[];\r\n  recentExcludedAppIds: string[];\r\n  caseIconsFolderId: string;\r\n  documentAppId: string;\r\n  collaborationAppId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LiveAppsConfigHolder implements Deserializable {\r\n  public generalConfig: GeneralConfig;\r\n  public liveAppsConfig: LiveAppsConfig;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "generalConfig",
                    "type": "GeneralConfig",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "liveAppsConfig",
                    "type": "LiveAppsConfig",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "LoginContext",
            "id": "class-LoginContext-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "AccessToken",
                    "optional": false,
                    "description": "",
                    "line": 445
                },
                {
                    "name": "authInfo",
                    "type": "AuthInfo",
                    "optional": false,
                    "description": "",
                    "line": 444
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 446,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Metadata",
            "id": "class-Metadata-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "createdBy",
                        "type": "string"
                    },
                    {
                        "name": "creationTimestamp",
                        "type": "string"
                    },
                    {
                        "name": "createdByDetails",
                        "type": "UserInfo"
                    },
                    {
                        "name": "modifiedBy",
                        "type": "string"
                    },
                    {
                        "name": "modificationTimestamp",
                        "type": "string"
                    },
                    {
                        "name": "modifiedByDetails",
                        "type": "UserInfo"
                    },
                    {
                        "name": "lock",
                        "type": "boolean"
                    },
                    {
                        "name": "lockType",
                        "type": "string"
                    },
                    {
                        "name": "lockedBy",
                        "type": "string"
                    },
                    {
                        "name": "msLockExpiry",
                        "type": "string"
                    },
                    {
                        "name": "msSystemTime",
                        "type": "string"
                    },
                    {
                        "name": "markedForPurge",
                        "type": "boolean"
                    },
                    {
                        "name": "applicationId",
                        "type": "string"
                    },
                    {
                        "name": "applicationLabel",
                        "type": "string"
                    },
                    {
                        "name": "typeId",
                        "type": "string"
                    },
                    {
                        "name": "stateColor",
                        "type": "string"
                    },
                    {
                        "name": "stateIcon",
                        "type": "string"
                    },
                    {
                        "name": "caseTypeColor",
                        "type": "string"
                    },
                    {
                        "name": "caseTypeIcon",
                        "type": "string"
                    },
                    {
                        "name": "useCaseTypeColor",
                        "type": "boolean"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "createdBy",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "creationTimestamp",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "createdByDetails",
                        "type": "UserInfo",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modifiedBy",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modificationTimestamp",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modifiedByDetails",
                        "type": "UserInfo",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lock",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lockType",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lockedBy",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msLockExpiry",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "msSystemTime",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "markedForPurge",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationLabel",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "typeId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateColor",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateIcon",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseTypeColor",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseTypeIcon",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "useCaseTypeColor",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "applicationId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "applicationLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseTypeColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseTypeIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createdBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createdByDetails",
                    "type": "UserInfo",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "creationTimestamp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lock",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lockedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lockType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "markedForPurge",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modificationTimestamp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modifiedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modifiedByDetails",
                    "type": "UserInfo",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "msLockExpiry",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "msSystemTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "useCaseTypeColor",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Note",
            "id": "class-Note-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "attributes",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 378
                },
                {
                    "name": "createdById",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 379
                },
                {
                    "name": "createdByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 380
                },
                {
                    "name": "createdDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 381
                },
                {
                    "name": "descendantModifiedDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 382
                },
                {
                    "name": "editMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 407
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 383
                },
                {
                    "name": "isDescendantNewOrModified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 384
                },
                {
                    "name": "isHidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 385
                },
                {
                    "name": "isModified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 386
                },
                {
                    "name": "isNew",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 387
                },
                {
                    "name": "level",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 388
                },
                {
                    "name": "modifiedByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 389
                },
                {
                    "name": "modifiedDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 390
                },
                {
                    "name": "notificationLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 391
                },
                {
                    "name": "notificationUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 392
                },
                {
                    "name": "parentId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 393
                },
                {
                    "name": "relatedItemCollection",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 394
                },
                {
                    "name": "relatedItemId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 395
                },
                {
                    "name": "relatedItemType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 396
                },
                {
                    "name": "replyAcceptedId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 397
                },
                {
                    "name": "replyCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 398
                },
                {
                    "name": "replyDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 399
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 400
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 401
                },
                {
                    "name": "thread",
                    "type": "Thread",
                    "optional": false,
                    "description": "",
                    "line": 402
                },
                {
                    "name": "threadId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 403
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 404
                },
                {
                    "name": "topicId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 405
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 406
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 408,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "NotesList",
            "id": "class-NotesList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "notes",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 415
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 416,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "NotesRole",
            "id": "class-NotesRole-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "entityId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "entityName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "entityType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 326
                },
                {
                    "name": "role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "threadId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 328
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 329,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "NoteThread",
            "id": "class-NoteThread-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "threadId",
                        "type": "string"
                    },
                    {
                        "name": "showReplies",
                        "type": "boolean"
                    },
                    {
                        "name": "showNewReply",
                        "type": "boolean"
                    },
                    {
                        "name": "editMode",
                        "type": "boolean"
                    },
                    {
                        "name": "newReply",
                        "type": "any"
                    },
                    {
                        "name": "thread",
                        "type": "Note[]"
                    },
                    {
                        "name": "note",
                        "type": "Note"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "threadId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showReplies",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showNewReply",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "editMode",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newReply",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "thread",
                        "type": "Note[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "note",
                        "type": "Note",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "editMode",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newReply",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "note",
                    "type": "Note",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showNewReply",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showReplies",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "thread",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "threadId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Notification",
            "id": "class-Notification-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "entityId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "entityName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "entityType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "notifyCollection",
                    "type": "NotificationCollection",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "notifyOnAllReplies",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "notifyOnUpdate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "threadId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "topicId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "NotificationCollection",
            "id": "class-NotificationCollection-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "collectionName",
                        "type": "string"
                    },
                    {
                        "name": "lifecycledWithType",
                        "type": "string"
                    },
                    {
                        "name": "lifecycledWithId",
                        "type": "string"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "collectionName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lifecycledWithType",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lifecycledWithId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "collectionName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lifecycledWithId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lifecycledWithType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NotificationList",
            "id": "class-NotificationList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "notifications",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "OrgFolder",
            "id": "class-OrgFolder-4b13bf826bf860ccdacc536945081573",
            "file": "src/lib/models/tc-document.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {UserInfo} from './liveappsdata';\r\n\r\nexport class Document implements Deserializable {\r\n  artifactCheckSum: string;\r\n  artifactRef: string;\r\n  artifactVersion: string;\r\n  author: number;\r\n  authorDetails: UserInfo;\r\n  creationDate: Date;\r\n  description: string;\r\n  id: string;\r\n  lastModifiedBy: string;\r\n  lastModifiedByDetails: UserInfo;\r\n  lastModifiedDate: Date;\r\n  mimeType: string;\r\n  name: string;\r\n  ownerApp: string;\r\n  size: string;\r\n  fileSize: string;\r\n  extension: string;\r\n  fileIcon: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocumentList implements Deserializable {\r\n  documents: Document[];\r\n  deserialize(input: any): this {\r\n    this.documents = [];\r\n    Object.assign(this.documents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class OrgFolder implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  owner: string;\r\n  ownerSub: string;\r\n  ownerSandbox: string;\r\n  creationDate: string;\r\n  lastModifiedDate: string;\r\n  lastModifiedBy: string;\r\n  publishedVersion: string;\r\n  latestVersion: string;\r\n  publisedVersionId: string;\r\n  latestVersionId: string;\r\n  checksum: string;\r\n  extRef: string;\r\n  tags: DocTags[];\r\n  descriptor: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class DocTags implements Deserializable {\r\n  id: string;\r\n  name: string;\r\n  ownerSub: string;\r\n  deserialize(input: any): this {\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "checksum",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "creationDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "descriptor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "extRef",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "lastModifiedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "lastModifiedDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "latestVersion",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "latestVersionId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "owner",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "ownerSandbox",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "ownerSub",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "publisedVersionId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "publishedVersion",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "tags",
                    "type": "DocTags[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Process",
            "id": "class-Process-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "jsonSchema",
                    "type": "JsonSchema",
                    "optional": false,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 177
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProcessId",
            "id": "class-ProcessId-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseIdentifier",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "caseReference",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 187
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 188,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PurgeResult",
            "id": "class-PurgeResult-226fbee36f05a4b2d319f6f51d6f7180",
            "file": "src/lib/models/tc-case-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseInfo, JsonSchema} from './liveappsdata';\r\n\r\nexport class CaseInfoWithSchema implements Deserializable {\r\n  caseInfo: CaseInfo;\r\n  caseSchema: JsonSchema;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class PurgeResult implements Deserializable {\r\n  mfpCount: number;\r\n\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "mfpCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Roles",
            "id": "class-Roles-dd7bcf7300bdcddb20a1e24e031dae2e",
            "file": "src/lib/models/tc-groups-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, RoleAttribute} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class Group {\r\n  public name: string;\r\n  public description: string;\r\n  public type: string;\r\n  public id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Groups {\r\n  groups: Group[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Roles {\r\n  roles: RoleAttribute[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class RouteAccessDef {\r\n  routeUrl: string;\r\n  requiredRoleId: string;\r\n}\r\n\r\nexport class RouteAccessControlConfig {\r\n  routes: RouteAccessDef[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "roles",
                    "type": "RoleAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RouteAccessControlConfig",
            "id": "class-RouteAccessControlConfig-dd7bcf7300bdcddb20a1e24e031dae2e",
            "file": "src/lib/models/tc-groups-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, RoleAttribute} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class Group {\r\n  public name: string;\r\n  public description: string;\r\n  public type: string;\r\n  public id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Groups {\r\n  groups: Group[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Roles {\r\n  roles: RoleAttribute[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class RouteAccessDef {\r\n  routeUrl: string;\r\n  requiredRoleId: string;\r\n}\r\n\r\nexport class RouteAccessControlConfig {\r\n  routes: RouteAccessDef[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "routes",
                    "type": "RouteAccessDef[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RouteAccessDef",
            "id": "class-RouteAccessDef-dd7bcf7300bdcddb20a1e24e031dae2e",
            "file": "src/lib/models/tc-groups-data.ts",
            "type": "class",
            "sourceCode": "import {Deserializable, RoleAttribute} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class Group {\r\n  public name: string;\r\n  public description: string;\r\n  public type: string;\r\n  public id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Groups {\r\n  groups: Group[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Roles {\r\n  roles: RoleAttribute[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class RouteAccessDef {\r\n  routeUrl: string;\r\n  requiredRoleId: string;\r\n}\r\n\r\nexport class RouteAccessControlConfig {\r\n  routes: RouteAccessDef[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "requiredRoleId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "routeUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StateAuditEvent",
            "id": "class-StateAuditEvent-3eeb28e96852383a909338b5c25959f1",
            "file": "src/lib/models/tc-case-states.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseTypeStatesList} from './liveappsdata';\r\nimport {AuditEventAttribute, AuditEventList} from './tc-case-audit';\r\n\r\nexport class StateAuditEvent implements Deserializable {\r\n  caseState: AuditEventAttribute;\r\n  type: AuditEventAttribute;\r\n  phaseLabel: AuditEventAttribute;\r\n  previousPhaseLabel: AuditEventAttribute;\r\n  messageId: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateAuditEventList implements Deserializable {\r\n  auditEvents: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    this.auditEvents = [];\r\n    Object.assign(this.auditEvents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTrackerData implements Deserializable {\r\n  possibleStates: CaseTypeStatesList;\r\n  currentState: string;\r\n  phase: string;\r\n  caseAudit: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class TrackerState implements Deserializable {\r\n  name: string;\r\n  label: string;\r\n  phase: string;\r\n  previousPhase: string;\r\n  isTerminal: boolean;\r\n  status: string;\r\n  user: string;\r\n  changed: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTracker implements Deserializable {\r\n  states: TrackerState[];\r\n  valid: boolean;\r\n  deserialize(input: any) {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseState",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "creationTime",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isTerminal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "messageId",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phaseLabel",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "previousPhaseLabel",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "principalName",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "type": "AuditEventAttribute",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "StateAuditEventList",
            "id": "class-StateAuditEventList-3eeb28e96852383a909338b5c25959f1",
            "file": "src/lib/models/tc-case-states.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseTypeStatesList} from './liveappsdata';\r\nimport {AuditEventAttribute, AuditEventList} from './tc-case-audit';\r\n\r\nexport class StateAuditEvent implements Deserializable {\r\n  caseState: AuditEventAttribute;\r\n  type: AuditEventAttribute;\r\n  phaseLabel: AuditEventAttribute;\r\n  previousPhaseLabel: AuditEventAttribute;\r\n  messageId: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateAuditEventList implements Deserializable {\r\n  auditEvents: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    this.auditEvents = [];\r\n    Object.assign(this.auditEvents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTrackerData implements Deserializable {\r\n  possibleStates: CaseTypeStatesList;\r\n  currentState: string;\r\n  phase: string;\r\n  caseAudit: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class TrackerState implements Deserializable {\r\n  name: string;\r\n  label: string;\r\n  phase: string;\r\n  previousPhase: string;\r\n  isTerminal: boolean;\r\n  status: string;\r\n  user: string;\r\n  changed: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTracker implements Deserializable {\r\n  states: TrackerState[];\r\n  valid: boolean;\r\n  deserialize(input: any) {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "auditEvents",
                    "type": "StateAuditEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "StateTracker",
            "id": "class-StateTracker-3eeb28e96852383a909338b5c25959f1",
            "file": "src/lib/models/tc-case-states.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseTypeStatesList} from './liveappsdata';\r\nimport {AuditEventAttribute, AuditEventList} from './tc-case-audit';\r\n\r\nexport class StateAuditEvent implements Deserializable {\r\n  caseState: AuditEventAttribute;\r\n  type: AuditEventAttribute;\r\n  phaseLabel: AuditEventAttribute;\r\n  previousPhaseLabel: AuditEventAttribute;\r\n  messageId: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateAuditEventList implements Deserializable {\r\n  auditEvents: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    this.auditEvents = [];\r\n    Object.assign(this.auditEvents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTrackerData implements Deserializable {\r\n  possibleStates: CaseTypeStatesList;\r\n  currentState: string;\r\n  phase: string;\r\n  caseAudit: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class TrackerState implements Deserializable {\r\n  name: string;\r\n  label: string;\r\n  phase: string;\r\n  previousPhase: string;\r\n  isTerminal: boolean;\r\n  status: string;\r\n  user: string;\r\n  changed: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTracker implements Deserializable {\r\n  states: TrackerState[];\r\n  valid: boolean;\r\n  deserialize(input: any) {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "states",
                    "type": "TrackerState[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "valid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "StateTrackerData",
            "id": "class-StateTrackerData-3eeb28e96852383a909338b5c25959f1",
            "file": "src/lib/models/tc-case-states.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseTypeStatesList} from './liveappsdata';\r\nimport {AuditEventAttribute, AuditEventList} from './tc-case-audit';\r\n\r\nexport class StateAuditEvent implements Deserializable {\r\n  caseState: AuditEventAttribute;\r\n  type: AuditEventAttribute;\r\n  phaseLabel: AuditEventAttribute;\r\n  previousPhaseLabel: AuditEventAttribute;\r\n  messageId: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateAuditEventList implements Deserializable {\r\n  auditEvents: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    this.auditEvents = [];\r\n    Object.assign(this.auditEvents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTrackerData implements Deserializable {\r\n  possibleStates: CaseTypeStatesList;\r\n  currentState: string;\r\n  phase: string;\r\n  caseAudit: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class TrackerState implements Deserializable {\r\n  name: string;\r\n  label: string;\r\n  phase: string;\r\n  previousPhase: string;\r\n  isTerminal: boolean;\r\n  status: string;\r\n  user: string;\r\n  changed: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTracker implements Deserializable {\r\n  states: TrackerState[];\r\n  valid: boolean;\r\n  deserialize(input: any) {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "caseAudit",
                    "type": "StateAuditEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentState",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "phase",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "possibleStates",
                    "type": "CaseTypeStatesList",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "Thread",
            "id": "class-Thread-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "acceptedStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 336
                },
                {
                    "name": "actionDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 337
                },
                {
                    "name": "actionId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 338
                },
                {
                    "name": "actionType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 339
                },
                {
                    "name": "answeredStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 341
                },
                {
                    "name": "answerNoteCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 340
                },
                {
                    "name": "createdById",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 342
                },
                {
                    "name": "createdByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 343
                },
                {
                    "name": "createdDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 344
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 345
                },
                {
                    "name": "informationalNoteCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 346
                },
                {
                    "name": "isAbandoned",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 347
                },
                {
                    "name": "isLocked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 348
                },
                {
                    "name": "isOrphaned",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 349
                },
                {
                    "name": "issueNoteCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 350
                },
                {
                    "name": "lifecycledWithId",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 351
                },
                {
                    "name": "lifecycledWithType",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 352
                },
                {
                    "name": "modifiedById",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 353
                },
                {
                    "name": "modifiedByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 354
                },
                {
                    "name": "modifiedDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 355
                },
                {
                    "name": "questionNoteCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 356
                },
                {
                    "name": "relatedItemCollection",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 357
                },
                {
                    "name": "relatedItemId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 358
                },
                {
                    "name": "relatedItemType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 359
                },
                {
                    "name": "resolutionNoteCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 360
                },
                {
                    "name": "resolvedStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 361
                },
                {
                    "name": "roles",
                    "type": "NotesRole[]",
                    "optional": false,
                    "description": "",
                    "line": 362
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 363
                },
                {
                    "name": "topicId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 365
                },
                {
                    "name": "topLevelNoteId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 364
                },
                {
                    "name": "totalCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 366
                },
                {
                    "name": "unacceptedStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 367
                },
                {
                    "name": "unansweredStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 368
                },
                {
                    "name": "unclassifiedStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 369
                },
                {
                    "name": "unresolvedStatusCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 370
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 371,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "ThreadList",
            "id": "class-ThreadList-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "threads",
                    "type": "NoteThread[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "TrackerState",
            "id": "class-TrackerState-3eeb28e96852383a909338b5c25959f1",
            "file": "src/lib/models/tc-case-states.ts",
            "type": "class",
            "sourceCode": "import {Deserializable} from '@tibco-tcstk/tc-core-lib';\r\nimport {CaseTypeStatesList} from './liveappsdata';\r\nimport {AuditEventAttribute, AuditEventList} from './tc-case-audit';\r\n\r\nexport class StateAuditEvent implements Deserializable {\r\n  caseState: AuditEventAttribute;\r\n  type: AuditEventAttribute;\r\n  phaseLabel: AuditEventAttribute;\r\n  previousPhaseLabel: AuditEventAttribute;\r\n  messageId: AuditEventAttribute;\r\n  principalName: AuditEventAttribute;\r\n  creationTime: AuditEventAttribute;\r\n  isTerminal: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateAuditEventList implements Deserializable {\r\n  auditEvents: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    this.auditEvents = [];\r\n    Object.assign(this.auditEvents, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTrackerData implements Deserializable {\r\n  possibleStates: CaseTypeStatesList;\r\n  currentState: string;\r\n  phase: string;\r\n  caseAudit: StateAuditEvent[];\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class TrackerState implements Deserializable {\r\n  name: string;\r\n  label: string;\r\n  phase: string;\r\n  previousPhase: string;\r\n  isTerminal: boolean;\r\n  status: string;\r\n  user: string;\r\n  changed: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class StateTracker implements Deserializable {\r\n  states: TrackerState[];\r\n  valid: boolean;\r\n  deserialize(input: any) {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "changed",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isTerminal",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "phase",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "previousPhase",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        },
        {
            "name": "UserInfo",
            "id": "class-UserInfo-b750cf14de01421caaa42708317114f0",
            "file": "src/lib/models/liveappsdata.ts",
            "type": "class",
            "sourceCode": "import {AccessToken, AuthInfo, Deserializable, Claim} from '@tibco-tcstk/tc-core-lib';\r\n\r\nexport class NoteThread {\r\n  constructor(public threadId: string,\r\n              public showReplies: boolean,\r\n              public showNewReply: boolean,\r\n              public editMode: boolean,\r\n              public newReply: any,\r\n              public thread: Note[],\r\n              public note: Note\r\n  ) {\r\n  }\r\n}\r\n\r\nexport class CaseRoute {\r\n  public caseRef: string;\r\n  public appId: string;\r\n  public typeId: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationCollection {\r\n  constructor(\r\n    public collectionName: string,\r\n    public lifecycledWithType: string,\r\n    public lifecycledWithId: string\r\n  ) { }\r\n}\r\n\r\nexport class Notification implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  notifyCollection: NotificationCollection;\r\n  notifyOnAllReplies: boolean;\r\n  notifyOnUpdate: boolean;\r\n  threadId: string;\r\n  topicId: string;\r\n  type: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotificationList implements Deserializable {\r\n  notifications: Notification[];\r\n  deserialize(input: any): this {\r\n    this.notifications = [];\r\n    Object.assign(this.notifications, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ThreadList implements Deserializable {\r\n  threads: NoteThread[];\r\n  deserialize(input: any): this {\r\n    this.threads = [];\r\n    Object.assign(this.threads, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Metadata {\r\n  constructor(public createdBy:\tstring,\r\n              public creationTimestamp:\tstring,\r\n              public createdByDetails: UserInfo,\r\n              public modifiedBy:\tstring,\r\n              public modificationTimestamp:\tstring,\r\n              public modifiedByDetails: UserInfo,\r\n              public lock:\tboolean,\r\n              public lockType:\tstring,\r\n              public lockedBy:\tstring,\r\n              public msLockExpiry:\tstring,\r\n              public msSystemTime:\tstring,\r\n              public markedForPurge: boolean,\r\n              public applicationId:\tstring,\r\n              public applicationLabel: string,\r\n              public typeId: string,\r\n              public stateColor: string,\r\n              public stateIcon: string,\r\n              public caseTypeColor: string,\r\n              public caseTypeIcon: string,\r\n              public useCaseTypeColor: boolean\r\n            ) {\r\n  }\r\n}\r\n\r\nexport class CaseTypeState implements Deserializable {\r\n  id: string;\r\n  label: string;\r\n  value: string;\r\n  isTerminal: boolean;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesListList implements  Deserializable {\r\n  casetypes: CaseTypeStatesList[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypeStatesList implements Deserializable {\r\n  states: CaseTypeState[];\r\n  deserialize(input: any): this {\r\n    this.states = [];\r\n    Object.assign(this.states, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseInfo implements Deserializable {\r\n    deleted: boolean;\r\n    caseReference: string;\r\n    untaggedCasedata: string;\r\n    untaggedCasedataObj: any;\r\n    casedata: string;\r\n    casedataObj: any;\r\n    summary:  string;\r\n    summaryObj: any;\r\n    metadata: Metadata;\r\n    deserialize(input: any): this {\r\n      Object.assign(this, input);\r\n      this.summaryObj = this.summary ? JSON.parse(this.summary) : undefined;\r\n      this.casedataObj = this.casedata ? JSON.parse(this.casedata) : undefined;\r\n      this.untaggedCasedataObj = this.untaggedCasedata ? JSON.parse(this.untaggedCasedata) : undefined;\r\n      return this;\r\n    }\r\n}\r\n\r\nexport class CaseInfoList implements Deserializable {\r\n\r\n  caseinfos: CaseInfo[];\r\n  casecount: string;\r\n  deserialize(input: any): this {\r\n    this.caseinfos = [];\r\n    Object.assign(this.caseinfos, input);\r\n    this.caseinfos.forEach(function(caseinfo) {\r\n      if (caseinfo.summary) { caseinfo.summaryObj = JSON.parse(caseinfo.summary); }\r\n      if (caseinfo.casedata) { caseinfo.casedataObj = JSON.parse(caseinfo.casedata); }\r\n    })\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAttribute {\r\n  isIdentifier: boolean;\r\n  isMandatory: boolean;\r\n  isStructuredType: true;\r\n  label: string;\r\n  name: string;\r\n  type: string;\r\n  maximum: number;\r\n  minimum: number;\r\n}\r\n\r\nexport class JsonSchema {\r\n  $schema: string;\r\n  definitions: any[];\r\n  properties: any[];\r\n  type: string;\r\n  required: string[];\r\n}\r\n\r\nexport class Process {\r\n  jsonSchema: JsonSchema;\r\n  name: string;\r\n  id: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ProcessId {\r\n  caseIdentifier: string;\r\n  caseReference: string;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\n\r\nexport class CaseType {\r\n  actions: Process[];\r\n  applicationId: string;\r\n  applicationInternalName: string;\r\n  applicationName: any;\r\n  attributes: CaseAttribute[];\r\n  creators: Process[];\r\n  id:  string;\r\n  isCase: boolean\r\n  label: any;\r\n  name: Metadata;\r\n  jsonSchema: JsonSchema;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseTypesList implements Deserializable {\r\n  casetypes: CaseType[];\r\n  deserialize(input: any): this {\r\n    this.casetypes = [];\r\n    Object.assign(this.casetypes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseAction implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  availableInStates: string[];\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  noData: boolean;\r\n  performerPaths: string[];\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseActionsList implements Deserializable {\r\n  actions: CaseAction[];\r\n  deserialize(input: any): this {\r\n    this.actions = [];\r\n    Object.assign(this.actions, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreator implements Deserializable {\r\n  activityName: string;\r\n  applicationId: string;\r\n  applicationName: string;\r\n  chatBotEnabled: boolean;\r\n  id: string;\r\n  label: string;\r\n  name: string;\r\n  roles: string[];\r\n  version: number;\r\n  process: Process;\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseCreatorsList implements Deserializable {\r\n  creators: CaseCreator[];\r\n  deserialize(input: any): this {\r\n    this.creators = [];\r\n    Object.assign(this.creators, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseList implements Deserializable {\r\n  uniqueKey: string;\r\n  maxSize: number;\r\n  caseRefs: string[];\r\n  deserialize(input: any): this {\r\n    this.uniqueKey = input.uniqueKey;\r\n    this.maxSize = input.maxSize;\r\n    this.caseRefs = [];\r\n    Object.assign(this.caseRefs, input.caseRefs);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseText implements Deserializable {\r\n  message: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class ApiResponseError implements Deserializable {\r\n  errorMsg: string;\r\n  errorCode: string;\r\n  contextAttributes: string[];\r\n  deserialize(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class UserInfo implements Deserializable {\r\n  externalId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n  email: string;\r\n  type: string;\r\n  id: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesRole implements Deserializable {\r\n  entityId: string;\r\n  entityName: string;\r\n  entityType: string;\r\n  id: string;\r\n  role: string;\r\n  threadId: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Thread implements Deserializable {\r\n  acceptedStatusCount: number;\r\n  actionDate: number;\r\n  actionId: string;\r\n  actionType: string;\r\n  answerNoteCount: number;\r\n  answeredStatusCount: number;\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  id: string;\r\n  informationalNoteCount: number;\r\n  isAbandoned: boolean;\r\n  isLocked: boolean;\r\n  isOrphaned: boolean;\r\n  issueNoteCount: number;\r\n  lifecycledWithId: boolean;\r\n  lifecycledWithType: boolean;\r\n  modifiedById: string;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  questionNoteCount: number;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  resolutionNoteCount: number;\r\n  resolvedStatusCount: number;\r\n  roles: NotesRole[];\r\n  status: string;\r\n  topLevelNoteId: string;\r\n  topicId: string;\r\n  totalCount: number;\r\n  unacceptedStatusCount: number;\r\n  unansweredStatusCount: number;\r\n  unclassifiedStatusCount: number;\r\n  unresolvedStatusCount: number;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Note implements Deserializable {\r\n  attributes: string[];\r\n  createdById: string;\r\n  createdByName: string;\r\n  createdDate: number;\r\n  descendantModifiedDate: number;\r\n  id: string;\r\n  isDescendantNewOrModified: boolean;\r\n  isHidden: boolean;\r\n  isModified: boolean;\r\n  isNew: boolean;\r\n  level: number;\r\n  modifiedByName: string;\r\n  modifiedDate: number;\r\n  notificationLabel: string;\r\n  notificationUrl: string;\r\n  parentId: string;\r\n  relatedItemCollection: string[];\r\n  relatedItemId: string;\r\n  relatedItemType: string;\r\n  replyAcceptedId: string;\r\n  replyCount: number;\r\n  replyDate: number;\r\n  status: string;\r\n  text: string;\r\n  thread: Thread;\r\n  threadId: string;\r\n  title: string;\r\n  topicId: string;\r\n  type: string;\r\n  editMode: boolean;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class NotesList implements Deserializable {\r\n  notes: Note[];\r\n  deserialize(input: any): this {\r\n    this.notes = [];\r\n    Object.assign(this.notes, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class IconMap {\r\n  constructor(\r\n    public isCaseType: boolean,\r\n    public state: string,\r\n    public fill: string,\r\n    public icon: string\r\n  ) {}\r\n}\r\n\r\nexport class CardConfig implements Deserializable {\r\n  id: string;\r\n  useCaseTypeColor: boolean;\r\n  stateMap: IconMap[];\r\n  deserialize(input: any): this {\r\n    // this.stateMap = [];\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class LoginContext implements Deserializable {\r\n  authInfo: AuthInfo;\r\n  accessToken: AccessToken;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class CaseSearchResults implements Deserializable {\r\n  caserefs: string[];\r\n  searchString: string;\r\n  deserialize(input: any) {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 313
                },
                {
                    "name": "externalId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 309
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 310
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 315
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 311
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 314
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 312
                }
            ],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "input",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 316,
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Deserializable"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "LiveAppsActionsComponent",
            "id": "component-LiveAppsActionsComponent-d261261f017e8dc04bdf24a913a0eca8",
            "file": "src/lib/components/live-apps-actions/live-apps-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-actions",
            "styleUrls": [
                "./live-apps-actions.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "applicationId",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "caseRef",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "caseState",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 13,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "caseActioned",
                    "defaultValue": "new EventEmitter<ProcessId>()",
                    "line": 16,
                    "type": "EventEmitter<ProcessId>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "handleActionClicked",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "handleActionCompleted",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedAction",
                    "type": "LaProcessSelection",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {ProcessId} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-actions',\r\n  templateUrl: './live-apps-actions.component.html',\r\n  styleUrls: ['./live-apps-actions.component.css']\r\n})\r\nexport class LiveAppsActionsComponent implements OnInit {\r\n  @Input() caseRef: string;\r\n  @Input() caseState: string;\r\n  @Input() sandboxId: number;\r\n  @Input() applicationId: string;\r\n  @Input() typeId: string;\r\n  @Output() caseActioned: EventEmitter<ProcessId> = new EventEmitter<ProcessId>();\r\n\r\n  selectedAction: LaProcessSelection;\r\n\r\n  // action clicked\r\n  handleActionCompleted = (result: ProcessId) => {\r\n    this.caseActioned.emit(result);\r\n  }\r\n\r\n  handleActionClicked = (action) => {\r\n    this.selectedAction = action;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-actions.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxFlexFill>\r\n  <tcla-live-apps-case-actions [sandboxId]=\"sandboxId\" [typeId]=\"typeId\" [appId]=\"applicationId\" [caseReference]=\"caseRef\" [caseState]=\"caseState\" [maxActions]=\"5\" (actionClicked)=\"handleActionClicked($event)\"></tcla-live-apps-case-actions>\r\n  <tcla-live-apps-case-action *ngIf=\"selectedAction\" [process]=\"selectedAction\" [caseRef]=\"caseRef\" [typeId]=\"typeId\" [applicationId]=\"applicationId\" [sandboxId]=\"sandboxId\"></tcla-live-apps-case-action>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsAppConfigurationWidgetComponent",
            "id": "component-LiveAppsAppConfigurationWidgetComponent-42596026f82ae6df4b336b99c7d5edea",
            "file": "src/lib/components/live-apps-app-configuration-widget/live-apps-app-configuration-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-app-configuration-widget",
            "styleUrls": [
                "./live-apps-app-configuration-widget.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-app-configuration-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 11,
                    "type": "string[]"
                },
                {
                    "name": "folderId",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "uiAppId",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "appSelected",
                    "defaultValue": "new EventEmitter<CaseType>()",
                    "line": 16,
                    "type": "EventEmitter<CaseType>"
                },
                {
                    "name": "configChanged",
                    "defaultValue": "new EventEmitter<CaseCardConfig>()",
                    "line": 15,
                    "type": "EventEmitter<CaseCardConfig>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "handleConfigAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "handleConfigChanged",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedAppConfig",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {CaseType} from '../../models/liveappsdata';\r\nimport {CaseCardConfig} from '../../models/tc-case-card-config';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-app-configuration-widget',\r\n  templateUrl: './live-apps-app-configuration-widget.component.html',\r\n  styleUrls: ['./live-apps-app-configuration-widget.component.css']\r\n})\r\nexport class LiveAppsAppConfigurationWidgetComponent implements OnInit {\r\n  @Input() appIds: string[];\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() folderId: string;\r\n  @Output() configChanged: EventEmitter<CaseCardConfig> = new EventEmitter<CaseCardConfig>();\r\n  @Output() appSelected: EventEmitter<CaseType> = new EventEmitter<CaseType>();\r\n\r\n  public selectedAppConfig: CaseType;\r\n\r\n  constructor() { }\r\n\r\n  handleConfigAppSelection = (application: CaseType) => {\r\n    // handle selection of app to config\r\n    this.selectedAppConfig = application;\r\n    this.appSelected.emit(application);\r\n  }\r\n\r\n  handleConfigChanged = (caseCardConfig: CaseCardConfig) => {\r\n    this.configChanged.emit(caseCardConfig);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-app-configuration-widget.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFill style=\"margin: 0px 20px 20px 20px\" fxLayout=\"column\">\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n    <span>Configure Live App Summary Cards for:</span>\r\n    <tcla-live-apps-applications style=\"margin-left: 5px; margin-top: -1px\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [selectFirstApp]=\"true\" (selection)=\"handleConfigAppSelection($event)\"></tcla-live-apps-applications>\r\n  </div>\r\n  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\r\n    <tcla-live-apps-application-configuration *ngIf=\"selectedAppConfig\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [appId]=\"selectedAppConfig.applicationId\" [folderId]=\"folderId\" [appTypeLabel]=\"selectedAppConfig.label\" (configChanged)=\"handleConfigChanged($event)\"></tcla-live-apps-application-configuration>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsApplicationConfigurationComponent",
            "id": "component-LiveAppsApplicationConfigurationComponent-8ec52258a5de7db0cb7e94b8f5f8310c",
            "file": "src/lib/components/live-apps-application-configuration/live-apps-application-configuration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-application-configuration",
            "styleUrls": [
                "./live-apps-application-configuration.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-application-configuration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 55,
                    "type": "string"
                },
                {
                    "name": "appTypeLabel",
                    "line": 56,
                    "type": "string"
                },
                {
                    "name": "folderId",
                    "line": 59,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 57,
                    "type": "number"
                },
                {
                    "name": "uiAppId",
                    "line": 58,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "configChanged",
                    "defaultValue": "new EventEmitter<CaseCardConfig>()",
                    "line": 60,
                    "type": "EventEmitter<CaseCardConfig>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "caseCardConfig",
                    "type": "CaseCardConfig",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseCardConfigService",
                    "type": "TcCaseCardConfigService",
                    "optional": false,
                    "description": "",
                    "line": 268,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseSummaryComponent",
                    "type": "QueryList<LiveAppsCaseSummaryComponent>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "LiveAppsCaseSummaryComponent"
                        }
                    ]
                },
                {
                    "name": "caseTypeColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseTypeIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_CASE_STATE_COLOR",
                    "defaultValue": "'#8197c0'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_CASE_STATE_ICON",
                    "defaultValue": "'assets/icons/ic-generic-state.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_CASE_TYPE_COLOR",
                    "defaultValue": "'#8197c0'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_CASE_TYPE_ICON",
                    "defaultValue": "'assets/icons/ic-generic-casetype.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "DEFAULT_COLOR_PALETTE",
                    "defaultValue": "[\r\n    '#3E94C0', '#49B3D3', '#76C6CF', '#A9DACD', '#DCECC9',\r\n    '#FFAB40', '#FFD180', '#FFE0B2', '#FFF3E0', '#81D4FA',\r\n    '#B3E5FC', '#8AF2F2', '#91A3AE', '#CED8DD', '#EBEFF1',\r\n    '#6A1B9A', '#AD1457', '#EC407A', '#C4469E', '#BA68C8',\r\n    '#8C9EFF', '#FF8A80', '#546F7A', '#263237'\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 268,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getConfigForCaseType",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getConfigForState",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleCaseTypeColorToggleChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 245,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedCaseTypeConfig",
                    "type": "IconMap",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedStateConfig",
                    "type": "IconMap",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectState",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setCaseTypeFill",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setFill",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setNewCaseTypeIcon",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setNewStateIcon",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateIconComponents",
                    "type": "QueryList<LiveAppsStateIconComponent>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'iconcomp'"
                        }
                    ]
                },
                {
                    "name": "updateIconMap",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "state",
                            "type": "CaseTypeState"
                        },
                        {
                            "name": "isCaseType",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "CaseTypeState",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCaseType",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File"
                        },
                        {
                            "name": "state",
                            "type": "CaseTypeState"
                        },
                        {
                            "name": "isStateIcon",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "CaseTypeState",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStateIcon",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList, SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {Observable, of, Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CardConfig, CaseTypeState, IconMap} from '../../models/liveappsdata';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {LiveAppsCaseDataComponent} from '../live-apps-case-data/live-apps-case-data.component';\r\nimport {LiveAppsStateIconComponent} from '../live-apps-state-icon/live-apps-state-icon.component';\r\nimport {LiveAppsCaseSummaryComponent} from '../live-apps-case-summary/live-apps-case-summary.component';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsDocumentUploadDialogComponent} from '../live-apps-documents/live-apps-documents.component';\r\nimport { Location } from '@angular/common';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {CaseCardConfig} from '../../models/tc-case-card-config';\r\nimport {TcCaseCardConfigService} from '../../services/tc-case-card-config.service';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-application-configuration',\r\n  templateUrl: './live-apps-application-configuration.component.html',\r\n  styleUrls: ['./live-apps-application-configuration.component.css']\r\n})\r\nexport class LiveAppsApplicationConfigurationComponent extends LiveAppsComponent implements OnChanges {\r\n  // The ViewChild declarations give access to components marked on the template so that I can call public functions like refresh\r\n  @ViewChildren('iconcomp') stateIconComponents: QueryList<LiveAppsStateIconComponent>;\r\n  @ViewChildren(LiveAppsCaseSummaryComponent) caseSummaryComponent: QueryList<LiveAppsCaseSummaryComponent>;\r\n\r\n  @Input() appId: string;\r\n  @Input() appTypeLabel: string;\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() folderId: string;\r\n  @Output() configChanged: EventEmitter<CaseCardConfig> = new EventEmitter<CaseCardConfig>();\r\n\r\n  public errorMessage: string;\r\n  public caseCardConfig: CaseCardConfig;\r\n  public selectedStateConfig: IconMap;\r\n  public selectedCaseTypeConfig: IconMap;\r\n  public caseTypeIcon: string;\r\n  public caseTypeColor: string;\r\n\r\n  // prepareExternalUrl will add the base href\r\n  public DEFAULT_CASE_TYPE_ICON = 'assets/icons/ic-generic-casetype.svg';\r\n  public DEFAULT_CASE_TYPE_COLOR = '#8197c0';\r\n  public DEFAULT_CASE_STATE_ICON = 'assets/icons/ic-generic-state.svg';\r\n  public DEFAULT_CASE_STATE_COLOR = '#8197c0';\r\n  public DEFAULT_COLOR_PALETTE = [\r\n    '#3E94C0', '#49B3D3', '#76C6CF', '#A9DACD', '#DCECC9',\r\n    '#FFAB40', '#FFD180', '#FFE0B2', '#FFF3E0', '#81D4FA',\r\n    '#B3E5FC', '#8AF2F2', '#91A3AE', '#CED8DD', '#EBEFF1',\r\n    '#6A1B9A', '#AD1457', '#EC407A', '#C4469E', '#BA68C8',\r\n    '#8C9EFF', '#FF8A80', '#546F7A', '#263237'\r\n  ];\r\n\r\n  public getConfigForState = (state: CaseTypeState): IconMap => {\r\n    let reqIconMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach((stateMap) => {\r\n        if (stateMap.state === state.value) {\r\n          reqIconMap = stateMap;\r\n        }\r\n      });\r\n    }\r\n    return reqIconMap ? reqIconMap : new IconMap(false, state.value, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON);\r\n  }\r\n\r\n  public getConfigForCaseType = (caseTypeId: string): IconMap => {\r\n    let reqIconMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach((stateMap) => {\r\n        if (stateMap.isCaseType) {\r\n          reqIconMap = stateMap;\r\n        }\r\n      });\r\n    }\r\n    return reqIconMap ? reqIconMap : new IconMap(true, caseTypeId, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON);\r\n  }\r\n\r\n  public updateIconMap = (stateConfig: IconMap) => {\r\n    let foundMap: IconMap;\r\n    let updatedMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach(function(stateMap) {\r\n        if (stateMap.state === stateConfig.state) {\r\n          foundMap = stateConfig;\r\n          stateMap.state = stateConfig.state;\r\n          stateMap.icon = stateConfig.icon;\r\n          stateMap.fill = stateConfig.fill;\r\n        }\r\n      });\r\n      if (foundMap) {\r\n        foundMap = stateConfig;\r\n      } else {\r\n        this.caseCardConfig.cardConfig.stateMap.push(stateConfig);\r\n      }\r\n    } else {\r\n      this.caseCardConfig.cardConfig.stateMap = [];\r\n      this.caseCardConfig.cardConfig.stateMap.push(stateConfig);\r\n    }\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public handleCaseTypeColorToggleChange = (changes) => {\r\n    this.caseCardConfig.cardConfig.useCaseTypeColor = changes.checked ? changes.checked : false;\r\n    if (changes.checked) {\r\n      this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n        comp.restylePreview(this.selectedStateConfig.icon, this.caseTypeColor);\r\n      });\r\n    }\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public setFill = (fill, stateConfig: IconMap) => {\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreview(stateConfig.icon, fill);\r\n    });\r\n    this.stateIconComponents.find(function(comp) {\r\n      return comp.id === stateConfig.state;\r\n    }).refillSVG(fill);\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public setCaseTypeFill = (fill, stateConfig: IconMap) => {\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreviewCaseType(stateConfig.icon, fill);\r\n    });\r\n    this.stateIconComponents.find(function(comp) {\r\n      return (comp.id === stateConfig.state && stateConfig.isCaseType);\r\n    }).refillSVG(fill);\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public selectState = (state: CaseTypeState) => {\r\n    this.selectedStateConfig = this.getConfigForState(state);\r\n    if (!this.caseCardConfig.cardConfig.useCaseTypeColor) {\r\n      this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n        comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n      });\r\n    }\r\n  }\r\n\r\n  /*public saveConfig = () => {\r\n    this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(caseCardConfig => {\r\n          this.caseCardConfig = caseCardConfig;\r\n        })\r\n      ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }\r\n    );\r\n  }*/\r\n\r\n  public openDialog(state: CaseTypeState, isCaseType: boolean): void {\r\n\r\n    if (!isCaseType) {\r\n      this.selectState(state);\r\n    } else {\r\n      state = new CaseTypeState().deserialize({ value: this.appTypeLabel });\r\n    }\r\n    const dialogRef = this.dialog.open(LiveAppsStateIconUploadDialogComponent, {\r\n      width: '500px',\r\n      data: { state: state, isCaseType: isCaseType }\r\n    });\r\n\r\n    dialogRef.componentInstance.fileevent.subscribe(($e) => {\r\n      this.uploadFile($e.file, $e.state, $e.isCaseType);\r\n    })\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  public setNewStateIcon = (url) => {\r\n    this.selectedStateConfig.icon = url;\r\n    this.stateIconComponents.find((comp: LiveAppsStateIconComponent) => {\r\n      return (comp.id === this.selectedStateConfig.state);\r\n    }).refresh(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n    });\r\n    this.updateIconMap(this.selectedStateConfig);\r\n  }\r\n\r\n  public setNewCaseTypeIcon = (url) => {\r\n    this.caseTypeIcon = url;\r\n    this.stateIconComponents.find((comp: LiveAppsStateIconComponent) => {\r\n      return (comp.id === this.appTypeLabel);\r\n    }).refresh(this.caseTypeIcon, this.caseTypeColor);\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreviewCaseType(this.caseTypeIcon, this.caseTypeColor);\r\n    });\r\n    this.updateIconMap(new IconMap(true, this.appTypeLabel, this.caseTypeColor, this.caseTypeIcon));\r\n  }\r\n\r\n  public uploadFile(file: File, state: CaseTypeState, isStateIcon: boolean) {\r\n    if (file) {\r\n      const url = 'webresource/v1/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;\r\n      const dlUrl = 'webresource/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;\r\n      this.liveapps.clearFromIconSVGTextCache(url);\r\n      this.documentsService.uploadDocument('orgFolders', this.folderId, this.sandboxId,\r\n        file, (this.appId + '.' + file.name), '')\r\n        .pipe(\r\n          map(val => {\r\n            if (!isStateIcon) {\r\n              this.setNewStateIcon(dlUrl);\r\n            } else {\r\n              this.setNewCaseTypeIcon(dlUrl);\r\n            }\r\n          })\r\n        )\r\n        .subscribe(\r\n          result => null,\r\n          error => { console.log('error'); this.errorMessage = 'Error uploading state icon: ' + error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  public refresh = () => {\r\n    // need states & cardConfig\r\n    this.selectedCaseTypeConfig = null;\r\n    this.caseCardConfigService.getCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.appTypeLabel, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(caseCardConfig => {\r\n        this.caseCardConfig = caseCardConfig;\r\n        // set default selected to first state for this case type (0 is case type)\r\n        this.selectedStateConfig = this.caseCardConfig.cardConfig.stateMap[1];\r\n        const caseTypeRec = this.caseCardConfig.cardConfig.stateMap.find(function(stateMap) {\r\n          return stateMap.isCaseType;\r\n        });\r\n\r\n        this.caseTypeIcon = caseTypeRec.icon;\r\n        this.caseTypeColor = caseTypeRec.fill;\r\n        this.selectedCaseTypeConfig = this.getConfigForCaseType(this.appTypeLabel);\r\n      })\r\n    ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case card config: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer,\r\n              private liveapps: LiveAppsService, public caseCardConfigService: TcCaseCardConfigService, private documentsService: TcDocumentService, public dialog: MatDialog, private location: Location) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-state-icon-upload-dialog',\r\n  templateUrl: 'upload-file-dialog/app-live-apps-state-icon-upload-dialog.html',\r\n  styleUrls: [ 'upload-file-dialog/app-live-apps-state-icon-upload-dialog.css']\r\n})\r\nexport class LiveAppsStateIconUploadDialogComponent {\r\n  @Output() fileevent = new EventEmitter<any>();\r\n  public fileToUpload: File = undefined;\r\n  public description: string = undefined;\r\n  public fileText: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsStateIconUploadDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {}\r\n\r\n  public uploadFile = () => {\r\n    if (this.fileToUpload) {\r\n      this.fileevent.emit({ file: this.fileToUpload, state: this.data.state, isCaseType: this.data.isCaseType } );\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.description = description;\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    this.fileToUpload = files.item(0);\r\n    /*const myReader: FileReader = new FileReader();\r\n    myReader.readAsText(this.fileToUpload);\r\n    this.fileText = myReader.result.toString();*/\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-card-customization {\r\n  min-width: 775px;\r\n  min-height: 370px;\r\n  /* border-radius: 3px; */\r\n  /* box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);*/\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-card-customization * {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #000000;\r\n}\r\n\r\n.case-type-color-toggle {\r\n  margin-bottom: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.tcs-case-card-customization-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-card-customization .tcs-case-card-customization-header-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  text-align: left;\r\n  color: black;\r\n  margin-left: 10px;\r\n}\r\n\r\n.tcs-case-card-customization-action-buttons {\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tcs-case-card-customization-divider {\r\n  padding: 0px;\r\n  margin-top: 4px;\r\n  margin-bottom: 0px;\r\n  margin-left:5px;\r\n  margin-right: 5px;\r\n  border-left-color: #f4f4f4;\r\n  border-left-width: 1.1px;\r\n  border-left-style: solid;\r\n}\r\n\r\n.tcs-case-card-customization .tcs-case-card-customization-section-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: black;\r\n}\r\n\r\n.tcs-case-states-list {\r\n  margin: 5px;\r\n}\r\n\r\n.tcs-case-states-list-inner {\r\n  overflow-y: auto;\r\n}\r\n\r\n.tcs-case-card-customization-preview {\r\n  /*margin: 20px;*/\r\n}\r\n\r\n.tcs-case-card-customization-preview app-live-apps-case-summary {\r\n  overflow-y: auto;\r\n}\r\n\r\n.tcs-case-states-list-row {\r\n  border-radius: 3px;\r\n  padding: 3px;\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.tcs-case-states-list-row:hover {\r\n  transition: background-color 0.5s;\r\n  background-color: #EEF0F7;\r\n}\r\n\r\n.tcs-icon-active.tcs-config-button {\r\n  display: none;\r\n}\r\n\r\n.tcs-icon-active.tcs-config-button-placeholder {\r\n  display: inline-block;\r\n  width: 24px;\r\n}\r\n\r\n.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button {\r\n  display: inline-block;\r\n}\r\n\r\n.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button-placeholder {\r\n  display: none;\r\n}\r\n\r\n.tcs-case-states-icon-divider {\r\n  padding: 0px;\r\n  margin-top: 2px;\r\n  margin-bottom: 4px;\r\n  margin-left:10px;\r\n  margin-right: 15px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n\r\n.tcs-save-app-config-button {\r\n  height: 35px;\r\n}\r\n",
                    "styleUrl": "./live-apps-application-configuration.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService"
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 265,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"appId\" class=\"tcs-case-card-customization\" fxLayout=\"column\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-around stretch\" fxFlex>\r\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n          <div class=\"tcs-case-card-customization-section-text\">Preview</div>\r\n        </div>\r\n        <div class=\"tcs-case-card-customization-preview\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\r\n          <div *ngIf=\"selectedStateConfig && caseTypeColor && caseTypeIcon\" style=\"border-radius: 3px; margin: 5px;\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\r\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'card'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\r\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'miniCard'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"tcs-case-card-customization-divider\"></div>\r\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n          <div class=\"tcs-case-card-customization-section-text\">Configure Icons</div>\r\n        </div>\r\n        <div fxFlex>\r\n          <div fxFlex class=\"tcs-case-states-list\" *ngIf=\"caseCardConfig && caseCardConfig.cardConfig && caseCardConfig.states\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n            <div class=\"tcs-case-states-list-inner\">\r\n              <div class=\"case-type-color-toggle\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                  <mat-slide-toggle\r\n                  class=\"use-case-type-color\"\r\n                  [labelPosition]=\"'before'\"\r\n                  [checked]=\"caseCardConfig.cardConfig.useCaseTypeColor\"\r\n                  (change)=\"handleCaseTypeColorToggleChange($event)\">\r\n                  Use Case Type Color for color bar\r\n                  </mat-slide-toggle>\r\n                </div>\r\n              </div>\r\n              <div class=\"tcs-case-states-list-row\">\r\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">Case Type Icon</div>\r\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"appTypeLabel\" [iconPath]=\"selectedCaseTypeConfig.icon\" [color]=\"selectedCaseTypeConfig.fill\"\r\n                                               [appId]=\"appId\" [(colorPicker)]=\"selectedCaseTypeConfig.fill\" (colorPickerChange)=\"setCaseTypeFill($event, selectedCaseTypeConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\r\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n                    </tcla-live-apps-state-icon>\r\n                    <mat-icon (click)=\"openDialog(null, true)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\r\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n                    </mat-icon>\r\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\r\n                  </div>\r\n              </div>\r\n              <div class=\"tcs-case-states-icon-divider\"></div>\r\n              <!-- case state icons -->\r\n              <div *ngFor=\"let state of caseCardConfig.states\" class=\"tcs-case-states-list-row\" (click)=\"selectState(state)\">\r\n                <div *ngIf=\"getConfigForState(state); let stateConfig;\">\r\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">{{state.label | ellipsis: 25}}</div>\r\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"state.value\" [iconPath]=\"stateConfig.icon\" [color]=\"stateConfig.fill\"\r\n                                               [appId]=\"appId\" [(colorPicker)]=\"stateConfig.fill\" (colorPickerChange)=\"setFill($event, stateConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\r\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n                    </tcla-live-apps-state-icon>\r\n                    <mat-icon (click)=\"openDialog(state, false)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\r\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n                    </mat-icon>\r\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  <!--div class=\"tcs-case-card-customization-footer\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\">\r\n    <div class=\"tcs-case-card-customization-action-buttons\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button class=\"tcs-save-app-config-button\" mat-button (click)=\"saveConfig()\" type=\"submit\">Save Configuration</button>\r\n    </div>\r\n  </div-->\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsApplicationCreateButtonComponent",
            "id": "component-LiveAppsApplicationCreateButtonComponent-615f0bdd4bef9216afd3b3741150b499",
            "file": "src/lib/components/live-apps-application-create-button/live-apps-application-create-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-application-create-button",
            "styleUrls": [
                "./live-apps-application-create-button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-application-create-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 31,
                    "type": "string[]",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "line": 30,
                    "type": "number",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectedApp",
                    "defaultValue": "this.selectedApp ? this.selectedApp : new CaseType()",
                    "line": 33,
                    "type": "CaseType",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectFirstApp",
                    "line": 32,
                    "type": "boolean",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter<CaseType>()",
                    "line": 34,
                    "type": "EventEmitter<CaseType>",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "handleCreatorAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "applications",
                    "defaultValue": "new CaseTypesList()",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectApplication",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {LiveAppsApplicationsComponent} from '../live-apps-applications/live-apps-applications.component';\r\nimport {CaseType} from '../../models/liveappsdata';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-application-create-button',\r\n  templateUrl: './live-apps-application-create-button.component.html',\r\n  styleUrls: ['./live-apps-application-create-button.component.css']\r\n})\r\nexport class LiveAppsApplicationCreateButtonComponent extends LiveAppsApplicationsComponent {\r\n\r\n  public handleCreatorAppSelection = (application: CaseType) => {\r\n    this.selection.emit(application);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-create-button-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #0081cb;\r\n}\r\n",
                    "styleUrl": "./live-apps-application-create-button.component.css"
                }
            ],
            "stylesData": "",
            "extends": "LiveAppsApplicationsComponent",
            "templateData": "<button mat-button [matMenuTriggerFor]=\"creatorApplicationMenu\">\r\n  <mat-icon [svgIcon]=\"'tcs-case-start-icon'\"></mat-icon>\r\n  <span class=\"tcs-case-create-button-text\"> Create Case</span>\r\n</button>\r\n<mat-menu #creatorApplicationMenu=\"matMenu\">\r\n  <button mat-menu-item *ngFor=\"let application of applications.casetypes\" (click)=\"handleCreatorAppSelection(application)\">{{application.applicationName}}</button>\r\n</mat-menu>\r\n"
        },
        {
            "name": "LiveAppsApplicationListComponent",
            "id": "component-LiveAppsApplicationListComponent-93f6d01f8d1a2da31df8e2757e430aaf",
            "file": "src/lib/components/live-apps-application-list/live-apps-application-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-application-list",
            "styleUrls": [
                "./live-apps-application-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-application-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedAppIds",
                    "defaultValue": "[]",
                    "line": 14,
                    "type": "string[]"
                },
                {
                    "name": "appIds",
                    "line": 31,
                    "type": "string[]",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "line": 30,
                    "type": "number",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectedApp",
                    "defaultValue": "this.selectedApp ? this.selectedApp : new CaseType()",
                    "line": 33,
                    "type": "CaseType",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectFirstApp",
                    "line": 32,
                    "type": "boolean",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "appIdsSelected",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "line": 16,
                    "type": "EventEmitter<string[]>"
                },
                {
                    "name": "appsSelected",
                    "defaultValue": "new EventEmitter<CaseType[]>()",
                    "line": 15,
                    "type": "EventEmitter<CaseType[]>"
                },
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter<CaseType>()",
                    "line": 34,
                    "type": "EventEmitter<CaseType>",
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "appSelectionList",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSelectionList"
                        }
                    ]
                },
                {
                    "name": "getAppIds",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "handleDeselectAll",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "handleSelectAll",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "mySelectedOptions",
                    "type": "CaseType[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "applications",
                    "defaultValue": "new CaseTypesList()",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "selectApplication",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsApplicationsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {CaseType} from '../../models/liveappsdata';\r\nimport {LiveAppsApplicationsComponent} from '../live-apps-applications/live-apps-applications.component';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {MatSelectionList} from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-application-list',\r\n  templateUrl: './live-apps-application-list.component.html',\r\n  styleUrls: ['./live-apps-application-list.component.css']\r\n})\r\nexport class LiveAppsApplicationListComponent extends LiveAppsApplicationsComponent implements OnInit, OnChanges {\r\n  @ViewChild (MatSelectionList) appSelectionList: MatSelectionList;\r\n  @Input() selectedAppIds: string[] = [];\r\n  @Output() appsSelected: EventEmitter<CaseType[]> = new EventEmitter<CaseType[]>();\r\n  @Output() appIdsSelected: EventEmitter<string[]> = new EventEmitter<string[]>();\r\n\r\n  public mySelectedOptions: CaseType[];\r\n\r\n  handleAppSelection = (selectionEvent: CaseType[]) => {\r\n    this.appsSelected.emit(selectionEvent);\r\n    const selIds = [];\r\n    selectionEvent.forEach((selected) => {\r\n      selIds.push(selected.applicationId);\r\n    });\r\n    this.appIdsSelected.emit(selIds);\r\n  }\r\n\r\n  handleSelectAll = () => {\r\n    this.mySelectedOptions = this.applications.casetypes;\r\n    this.appIdsSelected.emit(this.getAppIds(this.mySelectedOptions));\r\n    this.appsSelected.emit(this.applications.casetypes);\r\n  }\r\n\r\n  handleDeselectAll = () => {\r\n    this.mySelectedOptions = [];\r\n    this.appIdsSelected.emit([]);\r\n    this.appsSelected.emit([]);\r\n  }\r\n\r\n  private getAppIds = (casetypes: CaseType[]): string[] => {\r\n    const selIds = [];\r\n    casetypes.forEach((selected) => {\r\n      selIds.push(selected.applicationId);\r\n    });\r\n    return selIds;\r\n  }\r\n\r\n  public refresh = (bypassCache: boolean) => {\r\n    this.liveapps.getApplications(this.sandboxId, this.appIds, 100, bypassCache)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(applicationList => {\r\n          this.applications = applicationList;\r\n          // handle single app selection input\r\n          if (this.selectedApp && this.selectedApp.applicationId) {\r\n            this.selectedApp = applicationList.casetypes.find((casetype) => {\r\n              return casetype.applicationId === this.selectedApp.applicationId;\r\n            });\r\n            // this.selection.emit(this.selectedApp);\r\n          } else if (this.selectedAppIds && this.selectedAppIds.length > 0) {\r\n            // pre select any casetypes that were passed in the selectedAppIds input attribute\r\n            this.mySelectedOptions = this.applications.casetypes.filter(casetype => {\r\n              return (this.selectedAppIds.findIndex((ct) => {\r\n                return ct === casetype.applicationId;\r\n              }\r\n              ) !== -1);\r\n            });\r\n          }\r\n        })\r\n      )\r\n      .subscribe(null, error => { this.errorMessage = 'Error retrieving applications: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // only interested in initial selection - catching every change would create an infinite loop!\r\n    if (changes.selectedAppIds && (changes.selectedAppIds.firstChange)) {\r\n      this.refresh(false);\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    // leave this blank so superclass ngOnInit not called\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " .tcs-application-option {\r\n   max-width: 320px;\r\n }\r\n\r\n .tcs-application-list {\r\n   overflow: auto;\r\n }\r\n\r\n .tcs-application-list-buttons {\r\n   min-height: 40px;\r\n }\r\n",
                    "styleUrl": "./live-apps-application-list.component.css"
                }
            ],
            "stylesData": "",
            "extends": "LiveAppsApplicationsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div fxFlex style=\"padding: 10px;\" fxLayout=\"column\">\r\n  <div fxLayout=\"row\" class=\"tcs-application-list-buttons\">\r\n    <button mat-button (click)=\"handleSelectAll()\">\r\n      <span>Select All</span>\r\n    </button>\r\n    <button mat-button (click)=\"handleDeselectAll()\">\r\n      <span>Deselect All</span>\r\n    </button>\r\n  </div>\r\n  <mat-selection-list class=\"tcs-application-list\" #selectedApps [(ngModel)]=\"mySelectedOptions\" (ngModelChange)=\"handleAppSelection($event)\"\r\n                      fxLayout=\"column\" fxLayout=\"row wrap\">\r\n    <mat-list-option class=\"tcs-application-option\" checkboxPosition=\"before\"\r\n                     *ngFor=\"let casetype of applications.casetypes\"\r\n                     [value]=\"casetype\">\r\n      <span>{{casetype.label}}</span>\r\n    </mat-list-option>\r\n  </mat-selection-list>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsApplicationsComponent",
            "id": "component-LiveAppsApplicationsComponent-6b64639553a020a1575285ba5fff28d3",
            "file": "src/lib/components/live-apps-applications/live-apps-applications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-applications",
            "styleUrls": [
                "./live-apps-applications.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-applications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 31,
                    "type": "string[]"
                },
                {
                    "name": "sandboxId",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "selectedApp",
                    "defaultValue": "this.selectedApp ? this.selectedApp : new CaseType()",
                    "line": 33,
                    "type": "CaseType"
                },
                {
                    "name": "selectFirstApp",
                    "line": 32,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter<CaseType>()",
                    "line": 34,
                    "type": "EventEmitter<CaseType>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "applications",
                    "defaultValue": "new CaseTypesList()",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectApplication",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CaseInfo, CaseType, CaseTypesList} from '../../models/liveappsdata';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-applications',\r\n  templateUrl: './live-apps-applications.component.html',\r\n  styleUrls: ['./live-apps-applications.component.css']\r\n})\r\n\r\nexport class LiveAppsApplicationsComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() sandboxId: number;\r\n  @Input() appIds: string[];\r\n  @Input() selectFirstApp: boolean;\r\n  @Input() selectedApp: CaseType = this.selectedApp ? this.selectedApp : new CaseType();\r\n  @Output() selection: EventEmitter<CaseType> = new EventEmitter<CaseType>();\r\n\r\n  applications: CaseTypesList = new CaseTypesList();\r\n  // selectedApp: CaseType = new CaseType();\r\n  errorMessage: string;\r\n\r\n  constructor(protected liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  selectApplication = (selectionEvent) => {\r\n    this.selectedApp = selectionEvent.source.value;\r\n    this.selection.emit(selectionEvent.source.value);\r\n  }\r\n\r\n  public refresh = (bypassCache: boolean) => {\r\n    this.liveapps.getApplications(this.sandboxId, this.appIds, 100, bypassCache)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(applicationList => {\r\n          this.applications = applicationList;\r\n          if (this.selectedApp.applicationId) {\r\n            this.selectedApp = applicationList.casetypes.find((casetype) => {\r\n              return casetype.applicationId === this.selectedApp.applicationId;\r\n            });\r\n            // this.selection.emit(this.selectedApp);\r\n          } else\r\n          // select first as default\r\n            if (applicationList.casetypes.length > 0 && this.selectFirstApp) {\r\n              this.selectedApp = applicationList.casetypes[0];\r\n              this.selection.emit(applicationList.casetypes[0]);\r\n          }\r\n        })\r\n      )\r\n      .subscribe(null, error => { this.errorMessage = 'Error retrieving applications: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.refresh(false);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .tcs-application-selector .mat-form-field-underline {\r\n  display: none;\r\n}\r\n\r\n:host ::ng-deep .mat-select-value {\r\n  min-width: 100px;\r\n  max-width: 100%;\r\n  width: auto;\r\n}\r\n\r\n.la-applications-div {\r\n  margin-top: 50px;\r\n}\r\n\r\n.la-applications-card {\r\n  width: 500px;\r\n  /*  height: 300px; */\r\n}\r\n\r\n.la-available-sub:hover {\r\n  box-shadow: 0 7px 14px 0 rgba(0,0,0,.3);\r\n  transition: all .2s ease-in-out;\r\n  cursor: pointer;\r\n}\r\n\r\n.la-available-sub {\r\n  border: 1px solid #dedede;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px 0 rgba(0,0,0,.1);\r\n  padding: 20px 31px 31px;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.la-application-name {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n\r\n:host ::ng-deep  .tcs-application-selector-option .mat-select-value span {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep  .tcs-application-selector-option .mat-select-arrow-wrapper div {\r\n  color: #0081cb;\r\n}\r\n",
                    "styleUrl": "./live-apps-applications.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-application-selector\" fxFlex style=\"margin-left: 10px;\">\r\n    <mat-label></mat-label>\r\n    <mat-select *ngIf=\"selectedApp\" class=\"tcs-application-selector-option\" [disableOptionCentering]=\"true\" placeholder=\"Application\" [(value)]=\"selectedApp\" (selectionChange)=\"selectApplication($event)\" matTooltip=\"{{selectedApp.applicationName}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n      <mat-option *ngFor=\"let application of applications.casetypes\" [value]=\"application\">\r\n        {{application.label}}\r\n      </mat-option>\r\n    </mat-select>\r\n</div>\r\n\r\n\r\n\r\n<!--div *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n<div *ngIf=\"applications\" class=\"la-applications-div\" fxLayoutAlign=\"space-around start\">\r\n  <div class=\"la-applications-card\" fxLayout=\"column\">\r\n    <h3>Select application:</h3>\r\n    <div class=\"la-application-selection\">\r\n      <div class=\"la-available-sub\" (click)=\"selectApplication(application)\" *ngFor=\"let application of applications.casetypes\">\r\n        <div class=\"la-application-name\">{{application.applicationName}}</div>\r\n        <div fxLayout=\"column\" class=\"la-application-selection-dtl\" fxLayoutAlign=\"start start\">\r\n          <div>Application Id: {{application.applicationId}}</div>\r\n          <div>Type Id: {{application.id}}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div-->\r\n"
        },
        {
            "name": "LiveAppsCaseActionComponent",
            "id": "component-LiveAppsCaseActionComponent-f79cfb2cf50892393141cbc89f496840",
            "file": "src/lib/components/live-apps-case-action/live-apps-case-action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-action",
            "styleUrls": [
                "./live-apps-case-action.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseRef",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "showHeader",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "applicationId",
                    "line": 16,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "dataOverride",
                    "line": 19,
                    "type": "any",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "process",
                    "line": 18,
                    "type": "LaProcessSelection",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "line": 15,
                    "type": "number",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "typeId",
                    "line": 17,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "caseChanged",
                    "defaultValue": "new EventEmitter<ProcessId>()",
                    "line": 20,
                    "type": "EventEmitter<ProcessId>",
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "getCaseData",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "originalData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "handleSubmit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "layout",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "options",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "schema",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getMainCaseTypeFromSchema",
                    "args": [
                        {
                            "name": "typeId",
                            "type": "string"
                        },
                        {
                            "name": "process",
                            "type": "LaProcessSelection"
                        }
                    ],
                    "optional": false,
                    "returnType": "CaseType",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "typeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "process",
                            "type": "LaProcessSelection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "inheritance": {
                        "file": "LiveAppsCaseCreatorComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {LiveAppsCaseCreatorComponent} from '../live-apps-case-creator/live-apps-case-creator.component';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {CaseType, ProcessId} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-action',\r\n  templateUrl: './live-apps-case-action.component.html',\r\n  styleUrls: ['./live-apps-case-action.component.css']\r\n})\r\nexport class LiveAppsCaseActionComponent extends LiveAppsCaseCreatorComponent implements OnInit, OnChanges {\r\n  @Input() caseRef: string;\r\n  @Input() showHeader: boolean;\r\n\r\n  originalData: any;\r\n\r\n  private getMainCaseTypeFromSchema(typeId: string, process: LaProcessSelection): CaseType {\r\n    let requestedType: CaseType;\r\n    process.appSchema.casetypes.forEach((cType) => {\r\n      if (cType.id === typeId) {\r\n        requestedType = cType;\r\n      }\r\n    });\r\n    return requestedType;\r\n  }\r\n\r\n  private getCaseData = (caseRef) => {\r\n    // retrieve the case data for this case reference\r\n    this.liveapps.getCase(this.caseRef, this.sandboxId, this.applicationId, this.typeId )\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          if (result.metadata.applicationId === this.applicationId.toString()) {\r\n            const casedata = result.untaggedCasedataObj;\r\n            this.originalData = {\r\n              [this.process.process.name]: casedata\r\n            };\r\n            const caseTypeName = this.getMainCaseTypeFromSchema(this.typeId, this.process).applicationInternalName;\r\n            this.data = {\r\n              [caseTypeName]: casedata\r\n            };\r\n          } else {\r\n            console.error('The selected case is not the right case type for this action');\r\n          }\r\n        })\r\n    )\r\n      .subscribe(success => success, error => {\r\n        // Emit any error retrieving case data to the parent\r\n        console.error('Unable to retrieve case data');\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  constructor(private lasvc: LiveAppsService) {\r\n    super(lasvc);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // set default layout\r\n    // this.layout = [];\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // the extended class will detect change in the process and layout passed\r\n    super.ngOnChanges(changes);\r\n    // handle input param changes\r\n    if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))\r\n      || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {\r\n      // get case data if anything changes\r\n      this.getCaseData(this.caseRef);\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-action-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-action-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-action-header-text {\r\n  margin-left: 10px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-action.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "lasvc",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "lasvc",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsCaseCreatorComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\r\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\r\n  <tcfrm-rendered-form *ngIf=\"schema && data\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\r\n  <span *ngIf=\"!schema\">This action cannot be executed as no schema is available</span>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseActionsComponent",
            "id": "component-LiveAppsCaseActionsComponent-f82e7b7c7a6354b734a4a8d53dc342ba",
            "file": "src/lib/components/live-apps-case-actions/live-apps-case-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-actions",
            "styleUrls": [
                "./live-apps-case-actions.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "caseReference",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "caseState",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "maxActions",
                    "defaultValue": "1",
                    "line": 36
                },
                {
                    "name": "sandboxId",
                    "line": 34,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 33,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClicked",
                    "defaultValue": "new EventEmitter<LaProcessSelection>()",
                    "line": 37,
                    "type": "EventEmitter<LaProcessSelection>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "caseActionList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "caseactions",
                    "type": "CaseAction[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseType",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "selectAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "CaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "CaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil, tap} from 'rxjs/operators';\r\nimport {CaseAction, CaseType, CaseTypesList, Process} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseProcessesService} from '../../services/tc-case-processes.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-actions',\r\n  templateUrl: './live-apps-case-actions.component.html',\r\n  styleUrls: ['./live-apps-case-actions.component.css']\r\n})\r\nexport class LiveAppsCaseActionsComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() caseReference: string;\r\n  @Input() appId: string;\r\n  @Input() typeId: string;\r\n  @Input() sandboxId: number;\r\n  @Input() caseState: string;\r\n  @Input() maxActions = 1;\r\n  @Output() actionClicked: EventEmitter<LaProcessSelection> = new EventEmitter<LaProcessSelection>();\r\n\r\n  public caseactions: CaseAction[];\r\n  public errorMessage: string;\r\n\r\n  appSchema: CaseTypesList;\r\n  caseType: CaseType;\r\n  caseActionList: Process[];\r\n\r\n  constructor(protected liveapps: LiveAppsService, protected caseProcessesService: TcCaseProcessesService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.caseProcessesService.getCaseActionsForCaseRef(this.caseReference, this.sandboxId, this.appId, this.typeId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(caseactions => {\r\n          this.caseactions = caseactions.actions;\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  public selectAction(action: CaseAction) {\r\n\r\n    this.caseProcessesService.getProcessDetails(this.caseReference, this.appId, this.typeId, this.sandboxId, action, null,100).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      tap(processDetails => {\r\n        if (!processDetails || !processDetails.process) {\r\n          // This will be triggered when no form schema is available\r\n          // Typically happens when:\r\n          // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors\r\n          // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.\r\n            console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');\r\n          }\r\n        }\r\n      ),\r\n      map(processSchema => {\r\n        this.actionClicked.emit(processSchema);\r\n        return processSchema;\r\n      })\r\n    )\r\n    .subscribe(null, error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-action-button {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n  height: 40px;\r\n  border-radius: 3px;\r\n  border-color: #0081cb;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  background-color: #ffffff;\r\n  color: #0081cb;\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: 0.2px;\r\n}\r\n\r\n.tcs-case-action-option {\r\n  padding-top: 9px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  height: 40px;\r\n  border-radius: 3px;\r\n  border-color: #0081cb;\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  background-color: #ffffff;\r\n  color: #0081cb;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-actions.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseProcessesService",
                        "type": "TcCaseProcessesService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseProcessesService",
                        "type": "TcCaseProcessesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"row\">\r\n  <button mat-button class=\"tcs-case-action-button\" *ngFor=\"let action of caseactions| slice:0:maxActions\"\r\n          matTooltip=\"{{action.label}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\"\r\n          (click)=\"selectAction(action)\">\r\n    {{action.label | ellipsis: 30 }}\r\n  </button>\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"width: 75px\" *ngIf=\"caseactions && caseactions.length > maxActions\">\r\n    <mat-select class=\"tcs-case-action-option\" [disableOptionCentering]=\"true\" placeholder=\"More\" matTooltip=\"\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\r\n      <mat-option *ngFor=\"let action of caseactions | slice:maxActions:caseactions.length\" [value]=\"\" (click)=\"selectAction(action)\">\r\n        <span>{{action.label}}</span>\r\n      </mat-option>\r\n    </mat-select>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseActionsListComponent",
            "id": "component-LiveAppsCaseActionsListComponent-27c4a474fce33743966271040a0a0975",
            "file": "src/lib/components/live-apps-case-actions-list/live-apps-case-actions-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-actions-list",
            "styleUrls": [
                "./live-apps-case-actions-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-actions-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "seletedActionId",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "appId",
                    "line": 32,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "caseReference",
                    "line": 31,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "caseState",
                    "line": 35,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "maxActions",
                    "defaultValue": "1",
                    "line": 36,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "line": 34,
                    "type": "number",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "typeId",
                    "line": 33,
                    "type": "string",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClicked",
                    "defaultValue": "new EventEmitter<LaProcessSelection>()",
                    "line": 37,
                    "type": "EventEmitter<LaProcessSelection>",
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "caseActionList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "compareObjects",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedAction",
                    "type": "Process",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "caseActionList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "caseactions",
                    "type": "CaseAction[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "caseType",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "CaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "CaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "selectAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "CaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "CaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsCaseActionsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { LiveAppsService } from '../../services/live-apps.service';\r\nimport { map, takeUntil, take, tap } from 'rxjs/operators';\r\nimport { Process, CaseAction } from '../../models/liveappsdata';\r\nimport { LaProcessSelection } from '../../models/tc-case-processes';\r\nimport { LiveAppsCaseActionsComponent } from '../live-apps-case-actions/live-apps-case-actions.component';\r\n\r\n@Component({\r\n    selector: 'tcla-live-apps-case-actions-list',\r\n    templateUrl: './live-apps-case-actions-list.component.html',\r\n    styleUrls: ['./live-apps-case-actions-list.component.css']\r\n})\r\nexport class LiveAppsCaseActionsListComponent extends LiveAppsCaseActionsComponent implements OnInit, OnChanges {\r\n\r\n    @Input() seletedActionId: string;\r\n\r\n    caseActionList: Process[];\r\n    selectedAction: Process;\r\n\r\n    public refresh = () => {\r\n        // retrieve the schema for this case type so we can display case creators and case actions for this case type\r\n        this.liveapps.getCaseTypeSchema(this.sandboxId, this.appId, 100).pipe(\r\n            map(schema => {\r\n                // this.appSchema = schema;\r\n                schema.casetypes.forEach((casetype) => {\r\n                    // the schema will contain definitions for both the 'case' and any defined types in that case.\r\n                    // We want the schema for this 'case'.\r\n                    if (casetype.applicationId === this.appId && casetype.id === this.typeId) {\r\n                        if (casetype.jsonSchema !== undefined) {\r\n                            // this.caseType = casetype;\r\n                            this.caseActionList = casetype.actions ? casetype.actions : [];\r\n                            // if (this.caseActionList.length == 1) {\r\n                            //     this.selectProcess(this.caseActionList[0]);\r\n                            // }\r\n                        } else {\r\n                            console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');\r\n                        }\r\n                    }\r\n                }\r\n                );\r\n            }\r\n            )\r\n        ).subscribe();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {\r\n            this.caseActionList = [];\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    compareObjects = (o1: any, o2: any): boolean => {\r\n        return o1.id === this.seletedActionId;\r\n    }\r\n\r\n    public selectAction(action: CaseAction) {\r\n        this.caseProcessesService.getProcessDetails(this.caseReference, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(\r\n            take(1),\r\n            takeUntil(this._destroyed$),\r\n            tap(processDetails => {\r\n                if (!processDetails || !processDetails.process) {\r\n                    // This will be triggered when no form schema is available\r\n                    // Typically happens when:\r\n                    // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors\r\n                    // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.\r\n                    console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');\r\n                }\r\n            }\r\n            ),\r\n            map(processSchema => {\r\n                this.actionClicked.emit(processSchema);\r\n                return processSchema;\r\n            })\r\n        )\r\n            .subscribe(null, error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep  .tcs-action-selector-option .mat-select-value span {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep  .tcs-action-selector-option .mat-select-arrow-wrapper div {\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep .mat-select-value {\r\n  min-width: 100px;\r\n  max-width: 100%;\r\n  width: auto;\r\n}\r\n\r\n.tcs-actions-box {\r\n  width: 200px;\r\n  height: 44px;\r\n  box-shadow: inset 0 1px 3px 0 rgba(0, 0, 0, 0.5);\r\n  background-color: #ffffff;\r\n}\r\n\r\ntcs-action-selector-option {\r\n  width: 170px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  height: 20px;\r\n  background-color: #eeeeee;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  height: 35px;\r\n}\r\n\r\n.tcs-case-creation-dialog-instruction {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color:#727272;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./live-apps-case-actions-list.component.css"
                }
            ],
            "stylesData": "",
            "extends": "LiveAppsCaseActionsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div fxFlex style=\"margin-left: 10px;\">\r\n    <mat-select class=\"tcs-action-selector-option\" [disableOptionCentering]=\"true\" [(ngModel)]=\"selectedAction\" [compareWith]=\"compareObjects\"\r\n        placeholder=\"Case Actions\" >\r\n        <mat-option *ngFor=\"let action of caseActionList\" [value]=\"action\" (click)=\"selectAction(action)\">\r\n            <span>{{action.name}}</span>\r\n        </mat-option>\r\n    </mat-select>\r\n</div>"
        },
        {
            "name": "LiveAppsCaseAuditComponent",
            "id": "component-LiveAppsCaseAuditComponent-c8f7e33ff4fad858d0d60c3efba83d2b",
            "file": "src/lib/components/live-apps-case-audit/live-apps-case-audit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-audit",
            "styleUrls": [
                "./live-apps-case-audit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-audit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseRef",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 15,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auditEvents",
                    "defaultValue": "[]",
                    "type": "AuditEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "end",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getAuditEvents",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getNextBatch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startat",
                    "defaultValue": "undefined",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "top",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {AuditEvent} from '../../models/tc-case-audit';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseAuditService} from '../../services/tc-case-audit.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-audit',\r\n  templateUrl: './live-apps-case-audit.component.html',\r\n  styleUrls: ['./live-apps-case-audit.component.css']\r\n})\r\nexport class LiveAppsCaseAuditComponent extends LiveAppsComponent implements OnDestroy {\r\n\r\n  @Input() caseRef: string;\r\n  @Input() sandboxId: number;\r\n\r\n  public auditEvents: AuditEvent[] = [];\r\n  public errorMessage: string;\r\n  public startat = undefined;\r\n  public top = 20;\r\n  public end = false;\r\n\r\n  public refresh = () => {\r\n    this.startat = undefined;\r\n    this.top = 20;\r\n    this.end = false;\r\n    this.auditEvents = [];\r\n    this.getAuditEvents(this.caseRef, this.sandboxId, this.startat, this.top);\r\n  }\r\n\r\n  public getAuditEvents = (caseRef: string, sandboxId: number, startAt: number, top: number) => {\r\n    this.caseAuditService.getCaseAudit(this.caseRef, this.sandboxId, this.startat, this.top)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(auditeventlist => {\r\n          // this will strip any duplicates that may have been retrieved due to fast scrolling\r\n          const filteredEvents = auditeventlist.auditevents.filter(x => this.auditEvents.every(y => y.key.value !== x.key.value))\r\n          this.auditEvents = this.auditEvents.concat(filteredEvents);\r\n          if (auditeventlist.auditevents.length < this.top) {\r\n            this.end = true;\r\n          } else {\r\n            this.startat = auditeventlist.auditevents[auditeventlist.auditevents.length - 1].key.value;\r\n          }\r\n        })\r\n      ).subscribe(\r\n      null, error => {\r\n        this.errorMessage = 'Error retrieving case audit: ' + error.error.errorMsg;\r\n      });\r\n  }\r\n\r\n  public getNextBatch = (event) => {\r\n    if (!this.end) {\r\n      this.getAuditEvents(this.caseRef, this.sandboxId, this.startat, this.top);\r\n    }\r\n  }\r\n\r\n  constructor(private caseAuditService: TcCaseAuditService) {\r\n    super();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-audit-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-audit-container {\r\n  height: 100%;\r\n  overflow-x: auto;\r\n  padding: 11px;\r\n}\r\n\r\n.tcs-case-audit-dtl {\r\n  height: 70px;\r\n}\r\n\r\n.audit-template {\r\n  padding: 20px;\r\n}\r\n\r\n.audit-template span {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n}\r\n\r\n.audit-template ul {\r\n  padding-left: 25px;\r\n  border-left: 2px solid #bfbfbf;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-direction: row;\r\n  flex-direction: row;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  position: relative;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}\r\n\r\n.audit-icon-container {\r\n  background-color: white;\r\n  padding: 5px;\r\n  position: absolute;\r\n  left: -19px;\r\n\r\n  border-radius: 50%;\r\n  border: solid 1px #0081cb;\r\n}\r\n\r\n.audit-icon-container mat-icon {\r\n  padding: 4px;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-audit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseAuditService",
                        "type": "TcCaseAuditService"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "caseAuditService",
                        "type": "TcCaseAuditService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"tcs-case-audit-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\r\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'Audit'\"\r\n                                [icon]=\"'tcs-recent-icon'\"></tc-tibco-cloud-widget-header>\r\n\r\n\r\n  <!--div *ngIf=\"auditEvents && auditEvents.length > 0\" class=\"tcs-case-audit-container\">\r\n\r\n  </div-->\r\n  <div class=\"audit-template\" style=\"height: 100%\">\r\n  <cdk-virtual-scroll-viewport style=\"height: 100%\" itemSize=\"50\" (scrolledIndexChange)=\"getNextBatch($event)\">\r\n    <ul style=\"\"\r\n         *cdkVirtualFor=\"let item of auditEvents; let i = index\">\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_INSTANCE_CREATED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_INSTANCE_CREATED\"></mat-icon>\r\n        </div>\r\n        <div class=\"audit-details\">\r\n          <li>\r\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}} </span>\r\n            <span>\r\n                      <span> started </span>\r\n                      <b>{{item.procName.value}}</b>\r\n                      <span> on {{item.creationTime.value | date:'full'}}</span>\r\n                  </span>\r\n          </li>\r\n        </div>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_AUTO_STARTED_INSTANCE'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_AUTO_STARTED_INSTANCE\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <!--span *ngIf=\"item.principalName\">{{item.principalName.value}} </span-->\r\n          <span>\r\n                    <b>{{item.procName.value}}</b>\r\n                    <span> auto initiated on {{item.creationTime.value | date:'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_STARTED_INSTANCE'\">\r\n        <!-- todo: JS fix this -->\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_DELAYED_AUTO_STARTED_INSTANCE\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span>\r\n                    <b>{{item.procName.value}}</b>\r\n\t\t\t\t\t<span> deadline auto initiated on {{item.creationTime.value | date:'full'}}</span>\r\n          <span>. </span>\r\n          <span> Time to deadline {{item.delayTime.value}}></span>. </span>\r\n          <!--span class=\"skip-delay\" *ngIf=\"isInstanceDelayed(item)\" ng-click=\"skipDelay(item)\" skip\"></span>\r\n                </span-->\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_START_TIMER_EXPIRED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_DELAYED_AUTO_START_TIMER_EXPIRED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span>\r\n            <b>{{item.procName.value}}</b>\r\n\t\t\t\t\t  <span> deadline reached {{item.creationTime.value | date: 'full'}}></span>\r\n          </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED_DUE_TO_STATE_CHANGE'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED_DUE_TO_STATE_CHANGE\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <!--span *ngIf=\"item.principalName\">{{item.principalName.value}} </span-->\r\n          <span>\r\n                    <b>{{item.procName.value}}</b>\r\n            <span> deadline cancelled {{item.creationTime.value | date: 'full'}}</span>\r\n          </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_TASK_CREATED' && ['User Task','Email Task','Calculation Task','TCI Task','AuditSafe Task'].indexOf(item.taskType.value) > -1\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"{{item.taskType.value}}\"></mat-icon>\r\n        </div>\r\n        <li>\r\n                <span>\r\n                    <b>{{item.taskName.value}}</b>\r\n                    <span> initiated on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_CREATED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"CM_CASE_CREATED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> created </span>\r\n                    <b> {{item.label.value}}</b>\r\n                    <span> in state</span>\r\n                    <span class=\"audit-state\">\"{{item.caseState.value}}\"</span>\r\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_UPDATED_STATE_CHANGED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"CM_CASE_UPDATED_STATE_CHANGED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> updated </span>\r\n                    <b> {{item.label.value}}</b>\r\n                    <span>, new state is></span>\r\n                    <span class=\"audit-state\"> \"{{item.caseState.value}}\" </span>\r\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_UPDATED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"CM_CASE_UPDATED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> updated </span>\r\n                    <b> {{item.label.value}} </b>\r\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_CREATED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_CREATED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> uploaded </span>\r\n                    <span>{{item.artifactName.value}}</span>\r\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_UPDATED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_UPDATED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> updated </span>\r\n                    <span>{{item.artifactName.value}}</span>\r\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_DELETED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_DELETED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\r\n          <span class=\"spanPadding\">\r\n                    <span> deleted </span>\r\n                    <span>{{item.artifactName.value}}</span>\r\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_TASK_COMPLETED' && ['User Task','Email Task','Calculation Task','TCI Task','AuditSafe Task'].indexOf(item.taskType.value) > -1\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"{{item.taskType.value}}\"></mat-icon>\r\n        </div>\r\n        <li>\r\n          <span *ngIf=\"item.principalName\">{{item.principalName.value}} </span>\r\n          <span>\r\n                    <span> completed </span>\r\n                    <b> {{item.taskName.value}} </b>\r\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_INSTANCE_COMPLETED'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"BP_INSTANCE_COMPLETED\"></mat-icon>\r\n        </div>\r\n        <li>\r\n                <span>\r\n                    <b>{{item.procName.value}} </b>\r\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n                </span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.severity.value === 'ERROR'\">\r\n        <div class=\"audit-icon-container\">\r\n          <mat-icon svgIcon=\"ERROR\"></mat-icon>\r\n        </div>\r\n        <li>\r\n                <span *ngIf=\"item.principalName\">{{item.principalName.value}} has error at {{item.taskName.value}}\r\n                </span>\r\n          <b> {{item.message.value | parseAuditMessage : item }}</b>\r\n          <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n      <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.severity.value === 'WARN'\">\r\n        <div class=\"audit-icon-container warn-icon\">\r\n          <mat-icon svgIcon=\"ERROR\"></mat-icon>\r\n        </div>\r\n        <li>\r\n                <span *ngIf=\"item.principalName\">{{item.principalName.value}} has warning at {{item.taskName.value}}>\r\n                </span>\r\n          <b> {{item.message.value | parseAuditMessage : item }}</b>\r\n          <span> on {{item.creationTime.value | date: 'full'}}</span>\r\n        </li>\r\n        <div class=\"audit-line\"></div>\r\n      </div>\r\n\r\n\r\n    </ul>\r\n  </cdk-virtual-scroll-viewport>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseCockpitComponent",
            "id": "component-LiveAppsCaseCockpitComponent-ea475c284f50fdd1c242d8d235be2a35",
            "file": "src/lib/components/live-apps-case-cockpit/live-apps-case-cockpit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-cockpit",
            "styleUrls": [
                "./live-apps-case-cockpit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-cockpit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 53
                },
                {
                    "name": "caseRef",
                    "line": 56
                },
                {
                    "name": "exclRecentAppIds",
                    "line": 58,
                    "type": "string[]"
                },
                {
                    "name": "layout",
                    "defaultValue": "this.layout ?  this.layout : this.DEFAULT_CASE_DATA_LAYOUT",
                    "line": 60,
                    "type": "any[]"
                },
                {
                    "name": "roles",
                    "line": 59,
                    "type": "Roles"
                },
                {
                    "name": "sandboxId",
                    "line": 55
                },
                {
                    "name": "typeId",
                    "line": 54
                },
                {
                    "name": "uiAppId",
                    "line": 52
                },
                {
                    "name": "userId",
                    "line": 57
                }
            ],
            "outputsClass": [
                {
                    "name": "routeAction",
                    "defaultValue": "new EventEmitter<RouteAction>()",
                    "line": 61,
                    "type": "EventEmitter<RouteAction>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "actionSelection",
                    "type": "LaProcessSelection",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "actionTabCreated",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseActionsComponent",
                    "type": "LiveAppsCaseActionsComponent",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseActionsComponent"
                        }
                    ]
                },
                {
                    "name": "caseAuditComponent",
                    "type": "LiveAppsCaseAuditComponent",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseAuditComponent"
                        }
                    ]
                },
                {
                    "name": "caseDataComponent",
                    "type": "LiveAppsCaseDataComponent",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseDataComponent"
                        }
                    ]
                },
                {
                    "name": "caseDocumentsComponent",
                    "type": "LiveAppsDocumentsComponent",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsDocumentsComponent"
                        }
                    ]
                },
                {
                    "name": "caseNotesComponent",
                    "type": "LiveAppsNotesComponent",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsNotesComponent"
                        }
                    ]
                },
                {
                    "name": "caseStateAuditComponent",
                    "type": "LiveAppsCaseStateAuditComponent",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseStateAuditComponent"
                        }
                    ]
                },
                {
                    "name": "caseStatesComponent",
                    "type": "LiveAppsCaseStatesComponent",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseStatesComponent"
                        }
                    ]
                },
                {
                    "name": "caseSummaryComponent",
                    "type": "LiveAppsCaseSummaryComponent",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseSummaryComponent"
                        }
                    ]
                },
                {
                    "name": "createToolbarButtons",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "dataTabGroups",
                    "type": "MatTabGroup",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dataTabGroup'"
                        }
                    ]
                },
                {
                    "name": "DEFAULT_CASE_DATA_LAYOUT",
                    "defaultValue": "[\r\n    '*',\r\n    { type: 'submit', title: 'Save', condition: '1===2' },\r\n    { type: 'actions', title: 'Hidden', condition: '1===2' }\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "handleActionCompleted",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleActionSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleCancelAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleToolbarButtonEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inclusiveTabs",
                    "type": "QueryList<MatTab>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'dataTabs'"
                        }
                    ]
                },
                {
                    "name": "isFavorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "matTabGroup",
                    "type": "MatTabGroup",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dataTabGroup'"
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tabsFromNgContent",
                    "type": "QueryList<MatTab>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "'projectedTab'"
                        }
                    ]
                },
                {
                    "name": "toggleFavorite",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toolbarButtons",
                    "type": "ToolbarButton[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "valid",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsCaseActionsComponent} from '../live-apps-case-actions/live-apps-case-actions.component';\r\nimport {LiveAppsCaseAuditComponent} from '../live-apps-case-audit/live-apps-case-audit.component';\r\nimport {LiveAppsCaseDataComponent} from '../live-apps-case-data/live-apps-case-data.component';\r\nimport {LiveAppsCaseStateAuditComponent} from '../live-apps-case-state-audit/live-apps-case-state-audit.component';\r\nimport {LiveAppsCaseStatesComponent} from '../live-apps-case-states/live-apps-case-states.component';\r\nimport {LiveAppsDocumentsComponent} from '../live-apps-documents/live-apps-documents.component';\r\nimport {LiveAppsNotesComponent} from '../live-apps-notes/live-apps-notes.component';\r\nimport {LiveAppsCaseSummaryComponent} from '../live-apps-case-summary/live-apps-case-summary.component';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {ToolbarButton, TcButtonsHelperService} from '@tibco-tcstk/tc-core-lib';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {MatTab, MatTabGroup} from '@angular/material';\r\nimport {QueryList} from '@angular/core';\r\nimport { RouteAction } from '@tibco-tcstk/tc-core-lib';\r\nimport {Roles} from '../../models/tc-groups-data';\r\nimport {TcRolesService} from '../../services/tc-roles-service.ts.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-cockpit',\r\n  templateUrl: './live-apps-case-cockpit.component.html',\r\n  styleUrls: ['./live-apps-case-cockpit.component.css']\r\n})\r\nexport class LiveAppsCaseCockpitComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n  @ViewChild('dataTabGroup') matTabGroup: MatTabGroup;\r\n  @ViewChildren('dataTabs') inclusiveTabs: QueryList<MatTab>;\r\n  @ContentChildren('projectedTab') tabsFromNgContent: QueryList<MatTab>;\r\n\r\n  // this default layout displays all data but will hide buttons\r\n  DEFAULT_CASE_DATA_LAYOUT = [\r\n    '*',\r\n    { type: 'submit', title: 'Save', condition: '1===2' },\r\n    { type: 'actions', title: 'Hidden', condition: '1===2' }\r\n  ];\r\n\r\n  @Input() uiAppId;\r\n  @Input() appId;\r\n  @Input() typeId;\r\n  @Input() sandboxId;\r\n  @Input() caseRef;\r\n  @Input() userId;\r\n  @Input() exclRecentAppIds: string[];\r\n  @Input() roles: Roles;\r\n  @Input() layout: any[] = this.layout ?  this.layout : this.DEFAULT_CASE_DATA_LAYOUT;\r\n  @Output() routeAction: EventEmitter<RouteAction> = new EventEmitter<RouteAction>();\r\n\r\n// The ViewChild declarations give access to components marked on the template so that I can call public functions like refresh\r\n  @ViewChild(LiveAppsCaseSummaryComponent) caseSummaryComponent: LiveAppsCaseSummaryComponent;\r\n  @ViewChild(LiveAppsCaseDataComponent) caseDataComponent: LiveAppsCaseDataComponent;\r\n  @ViewChild(LiveAppsCaseActionsComponent) caseActionsComponent: LiveAppsCaseActionsComponent;\r\n  @ViewChild(LiveAppsCaseAuditComponent) caseAuditComponent: LiveAppsCaseAuditComponent;\r\n  @ViewChild(LiveAppsDocumentsComponent) caseDocumentsComponent: LiveAppsDocumentsComponent;\r\n  @ViewChild(LiveAppsNotesComponent) caseNotesComponent: LiveAppsNotesComponent;\r\n  @ViewChild(LiveAppsCaseStatesComponent) caseStatesComponent: LiveAppsCaseStatesComponent;\r\n  @ViewChild(LiveAppsCaseStateAuditComponent) caseStateAuditComponent: LiveAppsCaseStateAuditComponent;\r\n  @ViewChild('dataTabGroup') dataTabGroups: MatTabGroup;\r\n\r\n  isFavorite: boolean;\r\n  valid = false;\r\n  toolbarButtons: ToolbarButton[];\r\n  actionSelection: LaProcessSelection;\r\n\r\n  // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received\r\n  protected _destroyed$ = new Subject();\r\n  protected errorMessage: string;\r\n\r\n  constructor(protected liveapps: LiveAppsService, protected buttonsHelper: TcButtonsHelperService, private router: Router, protected rolesService: TcRolesService) {\r\n  }\r\n\r\n  protected createToolbarButtons = (): ToolbarButton[] => {\r\n    const configButton = this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', this.rolesService.checkRole('Partner Portal Configurator', this.roles), true);\r\n    const favButton = this.buttonsHelper.createButton('favorite', 'tcs-favorites-icon', this.isFavorite, 'Toggle Favorite', true, true);\r\n    const refreshButton = this.buttonsHelper.createButton('refresh', 'tcs-refresh-icon', true, 'Refresh', true, true);\r\n    const homeButton = this.buttonsHelper.createButton('close', 'tcs-close-icon', true, 'Close', true, true);\r\n    const buttons = [ configButton, favButton, refreshButton, homeButton ];\r\n    return buttons;\r\n  }\r\n\r\n  public handleToolbarButtonEvent = (buttonId: string) => {\r\n    if (buttonId === 'favorite') {\r\n      this.toggleFavorite();\r\n    }\r\n    if (buttonId === 'refresh') {\r\n      this.refresh();\r\n    }\r\n    if (buttonId === 'close') {\r\n      this.routeAction.emit(new RouteAction('backClicked', null));\r\n    }\r\n    if (buttonId === 'config') {\r\n      this.routeAction.emit(new RouteAction('configClicked', null));\r\n    }\r\n  }\r\n\r\n  public handleActionSelection = (actionSelection) => {\r\n    this.actionSelection = actionSelection;\r\n  }\r\n\r\n  public actionTabCreated = (data) => {\r\n    // the tab isn't actually it the tab-group at this point but this should still work as length is current tab + 1\r\n    this.dataTabGroups.selectedIndex = this.dataTabGroups._tabs.length;\r\n  }\r\n\r\n  public handleCancelAction = () => {\r\n    this.actionSelection = undefined;\r\n  }\r\n\r\n  public handleActionCompleted = (processId: string) => {\r\n    this.actionSelection = undefined;\r\n    // to allow case to update async before we refresh\r\n    setTimeout(() => {\r\n      this.refresh();\r\n    }, 1000);\r\n  }\r\n\r\n  public refresh = () => {\r\n    if (this.caseSummaryComponent) {\r\n      this.caseSummaryComponent.refresh();\r\n    }\r\n    if (this.caseDataComponent) {\r\n      this.caseDataComponent.refresh();\r\n    }\r\n    if (this.caseStatesComponent) {\r\n      this.caseStatesComponent.refresh();\r\n    }\r\n    if (this.caseActionsComponent) {\r\n      this.caseActionsComponent.refresh();\r\n    }\r\n    if (this.caseAuditComponent) {\r\n      this.caseAuditComponent.refresh();\r\n    }\r\n    if (this.caseStateAuditComponent) {\r\n      this.caseStateAuditComponent.refresh();\r\n    }\r\n    if (this.caseStatesComponent) {\r\n      this.caseStatesComponent.refresh();\r\n    }\r\n    if (this.caseDocumentsComponent) {\r\n      this.caseDocumentsComponent.refresh();\r\n    }\r\n    if (this.caseNotesComponent) {\r\n      this.caseNotesComponent.refresh();\r\n    }\r\n  }\r\n\r\n  public toggleFavorite = () => {\r\n    this.liveapps.setFavoriteCase(this.caseRef, this.uiAppId, this.sandboxId);\r\n    this.isFavorite = !this.isFavorite;\r\n    const updatedFavButton = this.buttonsHelper.createButton(\r\n      'favorite', 'tcs-favorites-icon', this.isFavorite, 'Toggle Favorite', true, true);\r\n    this.toolbarButtons = this.buttonsHelper.updateButtons([updatedFavButton], this.toolbarButtons);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!isNaN(Number(this.caseRef))) {\r\n      // dont set recent if it is in the exclude app list\r\n      if (!this.exclRecentAppIds || (this.exclRecentAppIds.indexOf(this.appId) === -1)) {\r\n        this.liveapps.setRecentCase(this.caseRef, this.uiAppId, this.sandboxId);\r\n      }\r\n      this.valid = true;\r\n    }\r\n    this.liveapps.isFavoriteCase(this.caseRef, this.uiAppId, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          this.isFavorite = result;\r\n          this.toolbarButtons = this.createToolbarButtons();\r\n          return result;\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => {\r\n          this.errorMessage = 'Error retrieving isFavorite: ' + error.error.errorMsg;\r\n        }\r\n      );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroyed$.next();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.matTabGroup._tabs.reset([...this.inclusiveTabs.toArray(), ...this.tabsFromNgContent.toArray()]);\r\n    // this.matTabGroup.afterViewInit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".live-apps-widget {\r\n  background-color: white; border-radius: 3px;\r\n}\r\n\r\n.tcs-actions-bar {\r\n  height: 50px;\r\n  margin-top: 5px;\r\n}\r\n\r\n:host ::ng-deep .tcs-cancel-action-button svg {\r\n  width: 15px;\r\n  height: 15px;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-cockpit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div fxFill fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\" style=\"overflow: hidden\">\r\n  <tc-tibco-cloud-menu-bar [toolbarButtons]=\"toolbarButtons\" (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\">\r\n    <!-- this is content projection. Tibco cloud menu bar contains ng-template and content here is projected inside the ng-content -->\r\n    <tcla-live-apps-case-summary class=\"live-apps-widget\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"'staticlist'\" [sandboxId]=\"sandboxId\" [caseReference]=\"caseRef\"></tcla-live-apps-case-summary>\r\n  </tc-tibco-cloud-menu-bar>\r\n  <div *ngIf=\"valid\" fxLayout=\"column\" fxFlex fxFill style=\"padding: 20px; overflow: hidden;\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n      <tcla-live-apps-case-states fxFlex [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [appId]=\"appId\"></tcla-live-apps-case-states>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"end center\" class=\"tcs-actions-bar\">\r\n      <tcla-live-apps-case-actions [sandboxId]=\"sandboxId\" [typeId]=\"typeId\" [appId]=\"appId\" [caseReference]=\"caseRef\" [caseState]=\"'Created'\" [maxActions]=\"5\" (actionClicked)=\"handleActionSelection($event)\"></tcla-live-apps-case-actions>\r\n    </div>\r\n    <div fxLayout=\"row\" fxFlex style=\"overflow: hidden;\">\r\n      <div fxFlex fxLayoutGap=\"20px\">\r\n        <div fxLayout=\"column\" fxFlex=\"70\" style=\"min-width: 70%\">\r\n          <mat-tab-group fxFill #dataTabGroup style=\"overflow: hidden\">\r\n            <ng-content></ng-content>\r\n            <mat-tab #dataTabs label=\"Case Data\">\r\n                <tcla-live-apps-case-data class=\"live-apps-widget\" fxFill [caseReference]=\"caseRef\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [appId]=\"appId\" [typeId]=\"typeId\" [layout]=\"layout\" [showHeader]=\"false\"></tcla-live-apps-case-data>\r\n            </mat-tab>\r\n            <mat-tab #actionTab #dataTabs *ngIf=\"actionSelection\">\r\n              <ng-template mat-tab-label fxLayout=\"row\" fxFlex>\r\n                {{actionSelection?.process?.name ? actionSelection.process.name : 'Action' }}\r\n                <mat-icon fxLayoutAlign=\"end start\" class=\"tcs-cancel-action-button\" [svgIcon]=\"'tcs-close-icon'\" (click)=\"handleCancelAction()\"></mat-icon>\r\n              </ng-template>\r\n              <tcla-live-apps-case-action *ngIf=\"actionSelection\" tcOnCreate (fireCreated)=\"actionTabCreated($event)\" [process]=\"actionSelection\" [caseRef]=\"caseRef\" [typeId]=\"typeId\" [applicationId]=\"appId\" [sandboxId]=\"sandboxId\" (caseChanged)=\"handleActionCompleted($event)\"></tcla-live-apps-case-action>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </div>\r\n        <div fxLayout=\"column\" fxFlex fxLayoutGap=\"20px\">\r\n          <mat-tab-group fxFlex style=\"overflow: hidden\">\r\n            <mat-tab label=\"Notes\">\r\n              <ng-template matTabContent>\r\n                <tcla-live-apps-notes class=\"live-apps-widget\" [relatedItemType]=\"'CASE_APP'\" [relatedItemId]=\"caseRef\" [userId]=\"userId\"></tcla-live-apps-notes>\r\n              </ng-template>\r\n            </mat-tab>\r\n            <mat-tab label=\"Documents\">\r\n              <ng-template matTabContent>\r\n                <tcla-live-apps-documents class=\"live-apps-widget\" [sandboxId]=\"sandboxId\" [folderId]=\"caseRef\" [folderType]=\"'caseFolders'\"></tcla-live-apps-documents>\r\n              </ng-template>\r\n            </mat-tab>\r\n            <mat-tab label=\"States\">\r\n              <ng-template matTabContent>\r\n                <tcla-live-apps-case-state-audit [caseRef]=\"caseRef\" [sandboxId]=\"sandboxId\" [appId]=\"appId\"></tcla-live-apps-case-state-audit>\r\n              </ng-template>\r\n            </mat-tab>\r\n            <mat-tab label=\"Audit\">\r\n              <ng-template matTabContent>\r\n                <tcla-live-apps-case-audit [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\"></tcla-live-apps-case-audit>\r\n              </ng-template>\r\n            </mat-tab>\r\n          </mat-tab-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseCreatorComponent",
            "id": "component-LiveAppsCaseCreatorComponent-f68f035f21bcd0cce28ef1a4703dddb7",
            "file": "src/lib/components/live-apps-case-creator/live-apps-case-creator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-creator",
            "styleUrls": [
                "./live-apps-case-creator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-creator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "applicationId",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "dataOverride",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "process",
                    "line": 18,
                    "type": "LaProcessSelection"
                },
                {
                    "name": "sandboxId",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "caseChanged",
                    "defaultValue": "new EventEmitter<ProcessId>()",
                    "line": 20,
                    "type": "EventEmitter<ProcessId>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "handleSubmit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "layout",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "options",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "schema",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, OnDestroy, SimpleChanges, OnChanges} from '@angular/core';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {ProcessId} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-creator',\r\n  templateUrl: './live-apps-case-creator.component.html',\r\n  styleUrls: ['./live-apps-case-creator.component.css']\r\n})\r\nexport class LiveAppsCaseCreatorComponent extends LiveAppsComponent implements OnInit, OnChanges {\r\n  @Input() sandboxId: number;\r\n  @Input() applicationId: string;\r\n  @Input() typeId: string;\r\n  @Input() process: LaProcessSelection;\r\n  @Input() dataOverride: any;\r\n  @Output() caseChanged: EventEmitter<ProcessId> = new EventEmitter<ProcessId>();\r\n\r\n  data: any;\r\n  schema: any;\r\n  layout: any[];\r\n  options: any;\r\n\r\n  handleSubmit = (data, caseRef) => {\r\n    // run the process\r\n    this.liveapps.runProcess(this.sandboxId, this.applicationId, this.process.process.id, caseRef, data)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(response => {\r\n          if (response) {\r\n            if (!response.data.errorMsg) {\r\n              // parse data to object\r\n              response.data = JSON.parse(response.data);\r\n              // case created send back response including caseIdentifier if one is present\r\n              let caseIdentifier;\r\n              let caseReference;\r\n              if (response.caseIdentifier) {\r\n                caseIdentifier = response.caseIdentifier;\r\n              }\r\n              if (response.caseReference) {\r\n                caseReference = response.caseReference;\r\n              }\r\n              const processResponse = new ProcessId().deserialize({'caseIdentifier': caseIdentifier, 'caseReference': caseReference });\r\n              this.caseChanged.emit(processResponse);\r\n              this.schema = undefined;\r\n              this.data = undefined;\r\n              this.layout = undefined;\r\n            } else {\r\n              console.error('Unable to run case creator');\r\n              console.error(response.data.errorMsg);\r\n            }\r\n          }\r\n        })\r\n      )\r\n      .subscribe(success => success, error => {\r\n          console.error('Unable to run case creator');\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  constructor(protected liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.options = {\r\n      defaultOptions: {\r\n        'appearance': 'legacy'\r\n      }\r\n    };\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // handle input param changes\r\n    if (changes.process && (changes.process.currentValue !== changes.process.previousValue)) {\r\n      this.schema = changes.process.currentValue.process ? changes.process.currentValue.process.jsonSchema : undefined;\r\n    } else if (changes.applicationId && (changes.applicationId.currentValue !== changes.applicationId.previousValue)) {\r\n      // appId has changed: make sure no process selected/form displayed\r\n      this.process = undefined;\r\n    }\r\n    if (changes.layout && (changes.layout.currentValue !== changes.layout.previousValue)) {\r\n      this.layout = changes.layout.currentValue;\r\n    }\r\n    if (changes.dataOverride && (changes.dataOverride.currentValue !== changes.dataOverride.previousValue)) {\r\n      this.data = this.dataOverride;\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-case-creator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<tcfrm-rendered-form *ngIf=\"schema && process\" style=\"min-height:500px; overflow: auto;\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [options]=\"options\" (formSubmit)=\"handleSubmit($event, undefined)\"></tcfrm-rendered-form>\r\n<span *ngIf=\"process && !schema\">This creator cannot be executed as no schema is available</span>\r\n"
        },
        {
            "name": "LiveAppsCaseCreatorsComponent",
            "id": "component-LiveAppsCaseCreatorsComponent-50041870ef35030a0b9e2357c4a66a66",
            "file": "src/lib/components/live-apps-case-creators/live-apps-case-creators.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-creators",
            "styleUrls": [
                "./live-apps-case-creators.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-creators.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 33,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "creatorClicked",
                    "defaultValue": "new EventEmitter<LaProcessSelection>()",
                    "line": 34,
                    "type": "EventEmitter<LaProcessSelection>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "caseActionList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "casecreators",
                    "type": "CaseCreator[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseType",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "selectCreator",
                    "args": [
                        {
                            "name": "creator",
                            "type": "CaseCreator"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "creator",
                            "type": "CaseCreator",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil, tap} from 'rxjs/operators';\r\nimport {CaseCreator, CaseType, CaseTypesList, Process} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseProcessesService} from '../../services/tc-case-processes.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-creators',\r\n  templateUrl: './live-apps-case-creators.component.html',\r\n  styleUrls: ['./live-apps-case-creators.component.css']\r\n})\r\nexport class LiveAppsCaseCreatorsComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() appId: string;\r\n  @Input() typeId: string;\r\n  @Input() sandboxId: number;\r\n  @Output() creatorClicked: EventEmitter<LaProcessSelection> = new EventEmitter<LaProcessSelection>();\r\n\r\n  public casecreators: CaseCreator[];\r\n  public errorMessage: string;\r\n\r\n  appSchema: CaseTypesList;\r\n  caseType: CaseType;\r\n  caseActionList: Process[];\r\n\r\n  constructor(protected liveapps: LiveAppsService, protected caseProcessesService: TcCaseProcessesService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.caseProcessesService.getCaseCreators(this.sandboxId, this.appId, this.typeId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(casecreators => {\r\n          this.casecreators = casecreators.creators;\r\n          if (this.casecreators.length === 1) {\r\n            this.selectCreator(this.casecreators[0]);\r\n          }\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  public selectCreator(creator: CaseCreator) {\r\n\r\n    this.caseProcessesService.getProcessDetails(null, this.appId, this.typeId, this.sandboxId, null, creator, 100).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      tap(processDetails => {\r\n        if (!processDetails || !processDetails.process) {\r\n          // This will be triggered when no form schema is available\r\n          // Typically happens when:\r\n          // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors\r\n          // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.\r\n            console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');\r\n          }\r\n        }\r\n      ),\r\n      map(processSchema => {\r\n        this.creatorClicked.emit(processSchema);\r\n        return processSchema;\r\n      })\r\n    )\r\n    .subscribe(null, error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep  .tcs-creator-selector-option .mat-select-value span {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep  .tcs-creator-selector-option .mat-select-arrow-wrapper div {\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep .mat-select-value {\r\n  min-width: 100px;\r\n  max-width: 100%;\r\n  width: auto;\r\n}\r\n\r\n.tcs-creators-box {\r\n  width: 200px;\r\n  height: 44px;\r\n  box-shadow: inset 0 1px 3px 0 rgba(0, 0, 0, 0.5);\r\n  background-color: #ffffff;\r\n}\r\n\r\ntcs-creator-selector-option {\r\n  width: 170px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  height: 20px;\r\n  background-color: #eeeeee;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  height: 35px;\r\n}\r\n\r\n.tcs-case-creation-dialog-instruction {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color:#727272;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./live-apps-case-creators.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseProcessesService",
                        "type": "TcCaseProcessesService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseProcessesService",
                        "type": "TcCaseProcessesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"casecreators && casecreators.length > 1\" fxFlex style=\"margin-left: 10px;\">\r\n  <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\r\n  <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\r\n              placeholder=\"Case Creators\" (selectionChange)=\"selectCreator($event.value)\">\r\n    <mat-option *ngFor=\"let creator of casecreators\" [value]=\"creator\">\r\n      <span>{{creator.label}}</span>\r\n    </mat-option>\r\n  </mat-select>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseCreatorWidgetComponent",
            "id": "component-LiveAppsCaseCreatorWidgetComponent-c6eeb3ad6ded6fae5e1a27c35e3d74dd",
            "file": "src/lib/components/live-apps-case-creator-widget/live-apps-case-creator-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-creator-widget",
            "styleUrls": [
                "./live-apps-case-creator-widget.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-creator-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "line": 11,
                    "type": "CaseType"
                },
                {
                    "name": "initialData",
                    "line": 14,
                    "type": "any"
                },
                {
                    "name": "sandboxId",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "uiAppId",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "caseCreated",
                    "defaultValue": "new EventEmitter<ProcessId>()",
                    "line": 15,
                    "type": "EventEmitter<ProcessId>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "handleCaseCreation",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\r\nimport {CaseType, ProcessId} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-creator-widget',\r\n  templateUrl: './live-apps-case-creator-widget.component.html',\r\n  styleUrls: ['./live-apps-case-creator-widget.component.css']\r\n})\r\nexport class LiveAppsCaseCreatorWidgetComponent implements OnInit {\r\n  @Input() application: CaseType;\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() initialData: any;\r\n  @Output() caseCreated: EventEmitter<ProcessId> = new EventEmitter<ProcessId>();\r\n\r\n  constructor() { }\r\n\r\n  // handle case created\r\n  public handleCaseCreation = (processId: ProcessId) => {\r\n    this.caseCreated.emit(processId);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-case-creator-widget.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <div fxLayout=\"row\" fxLayout=\"start stretch\">\r\n    <span style=\"width: 185px\">Select Case Creator: </span>\r\n    <tcla-live-apps-creators fxFlex [sandboxId]=\"sandboxId\" [applicationId]=\"application.id\" [typeId]=\"application.id\" (caseCreated)=\"handleCaseCreation($event)\"></tcla-live-apps-creators>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseDataComponent",
            "id": "component-LiveAppsCaseDataComponent-b8406872c2792e6e597a8401ca928efa",
            "file": "src/lib/components/live-apps-case-data/live-apps-case-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-data",
            "styleUrls": [
                "./live-apps-case-data.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "caseReference",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "layout",
                    "line": 21,
                    "type": "any[]"
                },
                {
                    "name": "sandboxId",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "showHeader",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "typeId",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "uiAppId",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "casedata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "metadata",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "schema",
                    "type": "JsonSchema",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "summary",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CaseInfo, JsonSchema, Metadata} from '../../models/liveappsdata';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseDataService} from '../../services/tc-case-data.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-data',\r\n  templateUrl: './live-apps-case-data.component.html',\r\n  styleUrls: ['./live-apps-case-data.component.css']\r\n})\r\nexport class LiveAppsCaseDataComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() caseReference: string;\r\n  @Input() appId: string;\r\n  @Input() typeId: string;\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() showHeader: boolean;\r\n  @Input() layout: any[];\r\n\r\n  public casedata: any;\r\n  public summary: any;\r\n  public metadata: Metadata;\r\n  public errorMessage: string;\r\n  public schema: JsonSchema;\r\n\r\n  constructor(private caseDataService: TcCaseDataService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.caseDataService.getCaseWithSchema(this.caseReference, this.sandboxId, this.appId, this.typeId, this.uiAppId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          this.casedata = result.caseInfo.untaggedCasedataObj;\r\n          this.metadata = result.caseInfo.metadata;\r\n          this.summary = result.caseInfo.summaryObj;\r\n          this.schema = result.caseSchema;\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case data: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-data-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-data-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-data-header-text {\r\n  margin-left: 10px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-data.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "caseDataService",
                        "type": "TcCaseDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-case-data-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\r\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Case Data'\" [icon]=\"'tcs-case-data-icon'\"></tc-tibco-cloud-widget-header>\r\n  <tcla-live-apps-case-data-display fxFlex=\"grow\" id=\"readOnlyDiv\" style=\"overflow:auto\" *ngIf=\"casedata && schema\" [schema]=\"schema\" [caseData]=\"casedata\" [layout]=\"layout\"></tcla-live-apps-case-data-display>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseDataDisplayComponent",
            "id": "component-LiveAppsCaseDataDisplayComponent-ba3c80d3093807d0742c36becddc9de4",
            "file": "src/lib/components/live-apps-case-data-display/live-apps-case-data-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-data-display",
            "styleUrls": [
                "./live-apps-case-data-display.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-data-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseData",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "layout",
                    "defaultValue": "this.layout ? this.layout : this.DEFAULT_CASE_DATA_LAYOUT",
                    "line": 21,
                    "type": "any[]"
                },
                {
                    "name": "schema",
                    "line": 20,
                    "type": "JsonSchema"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "DEFAULT_CASE_DATA_LAYOUT",
                    "defaultValue": "[\r\n    '*',\r\n    { type: 'submit', title: 'Save', condition: '1===2' },\r\n    { type: 'actions', title: 'hello', condition: '1===2' }\r\n\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "options",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {CaseType, CaseTypesList, JsonSchema} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-data-display',\r\n  templateUrl: './live-apps-case-data-display.component.html',\r\n  styleUrls: ['./live-apps-case-data-display.component.css']\r\n})\r\nexport class LiveAppsCaseDataDisplayComponent implements OnInit {\r\n\r\n  DEFAULT_CASE_DATA_LAYOUT = [\r\n    '*',\r\n    { type: 'submit', title: 'Save', condition: '1===2' },\r\n    { type: 'actions', title: 'hello', condition: '1===2' }\r\n\r\n  ];\r\n\r\n  @Input() caseData: string;\r\n  @Input() schema: JsonSchema;\r\n  @Input() layout: any[] = this.layout ? this.layout : this.DEFAULT_CASE_DATA_LAYOUT;\r\n\r\n  options;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // since this is the 'display' of case data we set to readonly and no validation\r\n    // legacy makes the labels appear above the data\r\n    this.options = {\r\n      defaultOptions: {\r\n        'readonly': true,\r\n        'appearance': 'legacy'\r\n      },\r\n      'validateOnRender': false\r\n    };\r\n    console.log(this.schema);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep button {\r\n  visibility: hidden;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-data-display.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<tcfrm-rendered-form *ngIf=\"schema && caseData && options\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"caseData\" [options]=\"options\"></tcfrm-rendered-form>\r\n"
        },
        {
            "name": "LiveAppsCaseListComponent",
            "id": "component-LiveAppsCaseListComponent-afc0ffef0a4ffb84c8bdd0b878a44612",
            "file": "src/lib/components/live-apps-case-list/live-apps-case-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-list",
            "styleUrls": [
                "./live-apps-case-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseRefs",
                    "line": 19,
                    "type": "string[]"
                },
                {
                    "name": "displayType",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "headerText",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "highlight",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "uiAppId",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickCase",
                    "defaultValue": "new EventEmitter<CaseRoute>()",
                    "line": 21,
                    "type": "EventEmitter<CaseRoute>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';\r\nimport {CaseRoute} from '../../models/liveappsdata';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-list',\r\n  templateUrl: './live-apps-case-list.component.html',\r\n  styleUrls: ['./live-apps-case-list.component.css']\r\n})\r\n\r\nexport class LiveAppsCaseListComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() headerText: string;\r\n  @Input() displayType: string;\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() caseRefs: string[];\r\n  @Input() highlight: string;\r\n  @Output() clickCase: EventEmitter<CaseRoute> = new EventEmitter<CaseRoute>();\r\n\r\n  public errorMessage: string;\r\n\r\n  public clickCaseAction = (caseRoute: CaseRoute) => {\r\n    this.clickCase.emit(caseRoute);\r\n  }\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-list-box {\r\n  width: 100%;\r\n  min-height: 366px;\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 8px 0 #dedede;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-list-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-list-header-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  text-align: left;\r\n  color: black;\r\n  margin-left: 10px;\r\n}\r\n\r\n.tcs-case-list-flow-list {\r\n  margin: 24px;\r\n  overflow-y: auto;\r\n  height: 278px;\r\n  max-height: 278px;\r\n}\r\n\r\n.tcs-case-list-item-box {\r\n  margin-top: 3px;\r\n  margin-bottom: 10px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  /* max-width: 297px; */\r\n}\r\n\r\n.tcs-icon.tcs-icon-active:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content {\r\n  fill: #0081cb;\r\n}\r\n\r\n.tcs-case-summary-line {\r\n  padding: 0px;\r\n  margin-top: 4px;\r\n  margin-bottom: 0px;\r\n  margin-left:5px;\r\n  margin-right: 5px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-case-list-box\" fxLayout=\"column\">\r\n  <div class=\"tcs-case-list-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div fxLayoutAlign=\"start center\">\r\n      <mat-icon class=\"tcs-icon tcs-caselist-icon\" svgIcon=\"tcs-caselist-icon\"></mat-icon>\r\n      <div class=\"tcs-case-list-header-text\">{{headerText}}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <!--div *ngIf=\"displayType != 'list'\" class=\"tcs-case-list-flow-list\" fxLayout=\"column\">\r\n    <div class=\"tcs-case-list-item-box\" *ngFor=\"let caseRef of caseRefs\">\r\n      <tcla-live-apps-case-summary style=\"max-width: 297px;\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseReference]=\"caseRef\" [highlight]=\"highlight\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-summary>\r\n      <div class=\"tcs-case-summary-line\"></div>\r\n    </div>\r\n  </div-->\r\n\r\n  <div *ngIf=\"displayType === 'list'\" fxFlex fxLayout=\"column\">\r\n    <cdk-virtual-scroll-viewport class=\"tcs-case-list-flow-list\" itemSize=\"56\">\r\n      <div class=\"tcs-case-list-item-box\" *cdkVirtualFor=\"let caseRef of caseRefs; templateCacheSize: 0; let index = index\">\r\n        <tcla-live-apps-case-summary style=\"max-width: 297px;\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseReference]=\"caseRef\" [highlight]=\"highlight\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-summary>\r\n        <div class=\"tcs-case-summary-line\"></div>\r\n      </div>\r\n    </cdk-virtual-scroll-viewport>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseOverviewReportComponent",
            "id": "component-LiveAppsCaseOverviewReportComponent-beb714be8e9f3f0b7cb475914a520589",
            "file": "src/lib/components/live-apps-case-overview-report/live-apps-case-overview-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-overview-report",
            "styleUrls": [
                "./live-apps-case-overview-report.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-overview-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 20,
                    "type": "string[]"
                },
                {
                    "name": "sandboxId",
                    "line": 19,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedCaseType",
                    "defaultValue": "new EventEmitter<CaseTypeReportRecord>()",
                    "line": 21,
                    "type": "EventEmitter<CaseTypeReportRecord>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "caseReportChart",
                    "type": "BaseChartDirective",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "BaseChartDirective"
                        }
                    ]
                },
                {
                    "name": "caseTypesReport",
                    "type": "CaseTypesReport",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartData",
                    "defaultValue": "[]",
                    "type": "MultiDataSet",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartOptions",
                    "defaultValue": "{\r\n    legendCallback: function(chart) {\r\n      console.log(chart.data);\r\n      const text = [];\r\n      text.push('<ul>');\r\n      for (let i = 0; i < chart.data.datasets[0].data.length; i++) {\r\n        text.push('<li>');\r\n        text.push('<span style=\"background-color:' + chart.data.datasets[0].backgroundColor[i] + '\">' + chart.data.datasets[0].data[i] + '</span>');\r\n        if (chart.data.labels[i]) {\r\n          text.push(chart.data.labels[i] + ' hello');\r\n        }\r\n        text.push('</li>');\r\n      }\r\n      text.push('</ul>');\r\n      // return text.join('');\r\n      return '<span>HELLO</span>';\r\n    },\r\n    responsive: true,\r\n    legend: {\r\n      position: 'top'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 10,\r\n        bottom: 10\r\n      }\r\n    },\r\n    plugins: {\r\n      labels: [\r\n        {\r\n          render: 'label',\r\n          arc: true,\r\n          position: 'outside',\r\n          textMargin: 10\r\n        }\r\n      ],\r\n      doughnutlabel: {\r\n        labels: [\r\n          {\r\n            text: this.getCaseCount,\r\n            font: {\r\n              size: '20'\r\n            },\r\n            color: 'grey'\r\n          }\r\n        ]\r\n      },\r\n      datalabels: {\r\n        anchor: 'end',\r\n        backgroundColor: function(context) {\r\n          return context.dataset.backgroundColor;\r\n        },\r\n        borderColor: 'white',\r\n        borderRadius: 25,\r\n        borderWidth: 2,\r\n        color: 'white',\r\n        display: function(context) {\r\n          const dataset = context.dataset;\r\n          const value = dataset.data[context.dataIndex];\r\n          return value > 0;\r\n        },\r\n        font: {\r\n          weight: 'bold'\r\n        },\r\n        formatter: (value, ctx) => {\r\n\r\n          const datasets = ctx.chart.data.datasets;\r\n\r\n          if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {\r\n            const sum = datasets[0].data.reduce((a, b) => a + b, 0);\r\n            const percentage = Math.round((value / sum) * 100) + '%';\r\n            return percentage;\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartType",
                    "defaultValue": "'doughnut'",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getCaseCount",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "initReportDataToChart",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "legendData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "renderChart",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectStatus",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 188,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "status",
                    "defaultValue": "'Active'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalActiveCaseCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTerminatedCaseCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "chartClicked",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chartHovered",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ChartLegendLabelOptions, ChartOptions, ChartPoint, ChartType} from 'chart.js';\r\nimport {BaseChartDirective, Label, MultiDataSet} from 'ng2-charts';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcLiveAppsReportingService} from '../../services/tc-live-apps-reporting.service';\r\nimport {CaseTypeReportRecord, CaseTypesReport} from '../../models/tc-live-apps-reporting';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {MatTabGroup} from '@angular/material';\r\nimport 'chartjs-plugin-labels';\r\nimport 'chartjs-plugin-datalabels';\r\nimport 'chartjs-plugin-doughnutlabel';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-overview-report',\r\n  templateUrl: './live-apps-case-overview-report.component.html',\r\n  styleUrls: ['./live-apps-case-overview-report.component.css']\r\n})\r\nexport class LiveAppsCaseOverviewReportComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() sandboxId: number;\r\n  @Input() appIds: string[];\r\n  @Output() selectedCaseType: EventEmitter<CaseTypeReportRecord> = new EventEmitter<CaseTypeReportRecord>();\r\n\r\n  @ViewChild(BaseChartDirective) caseReportChart: BaseChartDirective;\r\n\r\n  public errorMessage: string;\r\n  public caseTypesReport: CaseTypesReport;\r\n  public totalActiveCaseCount: number;\r\n  public totalTerminatedCaseCount: number;\r\n  public renderChart = false;\r\n  public status = 'Active';\r\n\r\n  public doughnutChartLabels: Label[];\r\n  public doughnutChartData: MultiDataSet = [];\r\n  public doughnutChartType: ChartType = 'doughnut';\r\n\r\n  public legendData: any;\r\n\r\n  private getCaseCount = () => {\r\n    return (this.status === 'Active') ? this.totalActiveCaseCount : this.totalTerminatedCaseCount;\r\n  }\r\n\r\n  public doughnutChartOptions: any = {\r\n    legendCallback: function(chart) {\r\n      console.log(chart.data);\r\n      const text = [];\r\n      text.push('<ul>');\r\n      for (let i = 0; i < chart.data.datasets[0].data.length; i++) {\r\n        text.push('<li>');\r\n        text.push('<span style=\"background-color:' + chart.data.datasets[0].backgroundColor[i] + '\">' + chart.data.datasets[0].data[i] + '</span>');\r\n        if (chart.data.labels[i]) {\r\n          text.push(chart.data.labels[i] + ' hello');\r\n        }\r\n        text.push('</li>');\r\n      }\r\n      text.push('</ul>');\r\n      // return text.join('');\r\n      return '<span>HELLO</span>';\r\n    },\r\n    responsive: true,\r\n    legend: {\r\n      position: 'top'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 10,\r\n        bottom: 10\r\n      }\r\n    },\r\n    plugins: {\r\n      labels: [\r\n        {\r\n          render: 'label',\r\n          arc: true,\r\n          position: 'outside',\r\n          textMargin: 10\r\n        }\r\n      ],\r\n      doughnutlabel: {\r\n        labels: [\r\n          {\r\n            text: this.getCaseCount,\r\n            font: {\r\n              size: '20'\r\n            },\r\n            color: 'grey'\r\n          }\r\n        ]\r\n      },\r\n      datalabels: {\r\n        anchor: 'end',\r\n        backgroundColor: function(context) {\r\n          return context.dataset.backgroundColor;\r\n        },\r\n        borderColor: 'white',\r\n        borderRadius: 25,\r\n        borderWidth: 2,\r\n        color: 'white',\r\n        display: function(context) {\r\n          const dataset = context.dataset;\r\n          const value = dataset.data[context.dataIndex];\r\n          return value > 0;\r\n        },\r\n        font: {\r\n          weight: 'bold'\r\n        },\r\n        formatter: (value, ctx) => {\r\n\r\n          const datasets = ctx.chart.data.datasets;\r\n\r\n          if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {\r\n            const sum = datasets[0].data.reduce((a, b) => a + b, 0);\r\n            const percentage = Math.round((value / sum) * 100) + '%';\r\n            return percentage;\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  };\r\n\r\n  constructor(private reportingService: TcLiveAppsReportingService) {\r\n    super();\r\n  }\r\n\r\n  private initReportDataToChart = (reportData: CaseTypesReport, status: string) => {\r\n    this.doughnutChartData = [];\r\n    this.totalActiveCaseCount = 0;\r\n    this.totalTerminatedCaseCount = 0;\r\n    const activeCasesArray: number[] = [];\r\n    const terminatedCasesArray: number[] = [];\r\n    const labels: string[] = [];\r\n    reportData.caseTypes.forEach(caseType => {\r\n      activeCasesArray.push(caseType.activeStateCaseCount);\r\n      this.totalActiveCaseCount = this.totalActiveCaseCount + caseType.activeStateCaseCount;\r\n      terminatedCasesArray.push(caseType.terminalStateCaseCount);\r\n      this.totalTerminatedCaseCount = this.totalTerminatedCaseCount + caseType.terminalStateCaseCount;\r\n      labels.push(caseType.caseTypeInfo.label);\r\n    });\r\n    if (status === 'Terminated') {\r\n      this.doughnutChartData.push(terminatedCasesArray);\r\n    } else {\r\n      this.doughnutChartData.push(activeCasesArray);\r\n    }\r\n    this.doughnutChartLabels = labels;\r\n    this.renderChart = true;\r\n  }\r\n\r\n  public refresh = (status) => {\r\n    this.reportingService.getCaseTypesReport(this.sandboxId, this.appIds).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(report => {\r\n        this.caseTypesReport = report;\r\n        this.initReportDataToChart(report, status);\r\n        return report;\r\n      }))\r\n      .subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }\r\n      );\r\n  }\r\n\r\n  // events\r\n  public chartClicked({ event, active }: { event: MouseEvent, active: any }): void {\r\n    if (active.length > 0) {\r\n      const chart = active[0]._chart;\r\n      const activePoints: any = chart.getElementAtEvent(event);\r\n      if ( activePoints.length > 0) {\r\n        // get the internal index of slice in pie chart\r\n        const clickedElementIndex = activePoints[0]._index;\r\n        const label = chart.data.labels[clickedElementIndex];\r\n        // get value by index\r\n        const value = chart.data.datasets[0].data[clickedElementIndex];\r\n        console.log(clickedElementIndex, label, value);\r\n        this.caseTypesReport.caseTypes[clickedElementIndex].incTerminal = (this.status === 'Terminated') ? true : false;\r\n        this.selectedCaseType.emit(this.caseTypesReport.caseTypes[clickedElementIndex]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public chartHovered({ event, active }: { event: MouseEvent, active: {}[] }): void {\r\n    // console.log(event, active);\r\n  }\r\n\r\n  public selectStatus = (status) => {\r\n    this.status = status;\r\n    this.refresh(status);\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.refresh(this.status);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-case-overview-report.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "reportingService",
                        "type": "TcLiveAppsReportingService"
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "reportingService",
                        "type": "TcLiveAppsReportingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start start\" style=\"height: 100%\">\r\n  <div>\r\n    <mat-form-field>\r\n      <mat-select #caseStatusSelector class=\"tcs-reporting-status-selector-option\" [disableOptionCentering]=\"true\"\r\n                  placeholder=\"Case Status\" [value]=\"status\" (selectionChange)=\"selectStatus($event.value)\">\r\n        <mat-option value=\"Active\"><span>Active</span></mat-option>\r\n        <mat-option value=\"Terminated\"><span>Terminated</span></mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <div *ngIf=\"renderChart\" style=\"position: relative; height:40%; width:80%; padding: 20px\" class=\"relative\">\r\n    <canvas #caseReportChart baseChart\r\n      [data]=\"doughnutChartData\"\r\n      [labels]=\"doughnutChartLabels\"\r\n      [chartType]=\"doughnutChartType\"\r\n      [options]=\"doughnutChartOptions\"\r\n      (chartHover)=\"chartHovered($event)\"\r\n      (chartClick)=\"chartClicked($event)\"\r\n    >\r\n    </canvas>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LiveAppsCaseSchemaListComponent",
            "id": "component-LiveAppsCaseSchemaListComponent-18c3cb0082f462e16fcf1497457ec5e4",
            "file": "src/lib/components/live-apps-case-schema-list/live-apps-case-schema-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-schema-list",
            "styleUrls": [
                "./live-apps-case-schema-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-schema-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "applicationId",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "caseReference",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "caseTypeId",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "mode",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 38,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter<LaProcessSelection>()",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "caseActionList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "caseCreatorList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "caseType",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "getCaseIDAttributeName",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectProcess",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {CaseType, CaseTypesList, JsonSchema, Process} from '../../models/liveappsdata';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-schema-list',\r\n  templateUrl: './live-apps-case-schema-list.component.html',\r\n  styleUrls: ['./live-apps-case-schema-list.component.css']\r\n})\r\nexport class LiveAppsCaseSchemaListComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() sandboxId: number;\r\n  @Input() applicationId: string;\r\n  @Input() caseTypeId: string;\r\n  @Input() mode: string;\r\n  @Input() caseReference: string;\r\n  @Output() selection = new EventEmitter<LaProcessSelection>();\r\n\r\n  caseCreatorList: Process[];\r\n  caseActionList: Process[];\r\n  appSchema: CaseTypesList;\r\n  caseType: CaseType;\r\n  // caseReference: string;\r\n  errorMessage: string;\r\n\r\n  // run when the user clicks on a process (action or case creator)\r\n  public selectProcess = (type, process) => {\r\n    this.selection.emit({\r\n      type: type,\r\n      appSchema: this.appSchema,\r\n      caseIdAttribute: this.getCaseIDAttributeName(),\r\n      process: process,\r\n      // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n      ref: this.caseType.applicationName + '.' + this.caseType.applicationInternalName + '.' + type + '.' + process.name,\r\n      caseReference: this.caseReference\r\n    });\r\n    this.caseReference = undefined;\r\n  }\r\n\r\n  public getCaseIDAttributeName = () => {\r\n    let caseIdAttrib: any;\r\n    this.caseType.attributes.forEach((attribute) => {\r\n      if (attribute.isIdentifier) {\r\n        caseIdAttrib = attribute;\r\n      }\r\n    });\r\n    return caseIdAttrib;\r\n  }\r\n\r\n  public refresh = () => {\r\n    // retrieve the schema for this case type so we can display case creators and case actions for this case type\r\n    this.liveapps.getCaseTypeSchema(this.sandboxId, this.applicationId, 50).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(schema => {\r\n          this.appSchema = schema;\r\n          schema.casetypes.forEach((casetype) => {\r\n              // the schema will contain definitions for both the 'case' and any defined types in that case.\r\n              // We want the schema for this 'case'.\r\n              if (casetype.applicationId === this.applicationId && casetype.id === this.caseTypeId) {\r\n                this.caseType = casetype;\r\n                this.caseCreatorList = casetype.creators ? casetype.creators : [];\r\n                this.caseActionList = casetype.actions ? casetype.actions : [];\r\n              }\r\n            }\r\n          );\r\n        }\r\n      )\r\n    ).subscribe(null, error => {\r\n      this.errorMessage = 'Error getting case app schema: ' + error.error.errorMsg;\r\n    });\r\n  }\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".la-process-div {\r\n  margin-top: 50px;\r\n}\r\n\r\n.la-process-card {\r\n  width: 500px;\r\n  /*  height: 300px; */\r\n}\r\n\r\n.la-available-process:hover {\r\n  box-shadow: 0 7px 14px 0 rgba(0,0,0,.3);\r\n  transition: all .2s ease-in-out;\r\n  cursor: pointer;\r\n}\r\n\r\n.la-available-process {\r\n  border: 1px solid #dedede;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px 0 rgba(0,0,0,.1);\r\n  padding: 20px 31px 31px;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.la-process-name {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n\r\n",
                    "styleUrl": "./live-apps-case-schema-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n<div *ngIf=\"mode==='creators'\" class=\"la-process-div\" fxLayoutAlign=\"space-around start\">\r\n  <div class=\"la-process-card\" fxLayout=\"column\">\r\n    <h3>Select Creator:</h3>\r\n    <div class=\"la-process-selection\">\r\n      <div class=\"la-available-process\" (click)=\"selectProcess('creator', creator)\" *ngFor=\"let creator of caseCreatorList\">\r\n        <div class=\"la-process-name\">{{creator.name}}</div>\r\n        <div fxLayout=\"column\" class=\"la-sandbox-selection-dtl\" fxLayoutAlign=\"start start\">\r\n          <div>Id: {{creator.id}}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"mode==='actions'\" class=\"la-process-div\" fxLayoutAlign=\"space-around start\">\r\n  <div class=\"la-process-card\" fxLayout=\"column\">\r\n    <h3>Enter a case reference to list actions</h3>\r\n    <mat-form-field fxFlex style=\"margin-left: 15px\">\r\n      <input matInput name=\"caseReference\" type=\"text\" placeholder=\"Enter a Case Reference\" [(ngModel)]=\"caseReference\" maxlength=\"50\">\r\n    </mat-form-field>\r\n    <div *ngIf=\"caseReference\">\r\n    <h3>Now click an action to run it:</h3>\r\n    <span style=\"margin-left: 30px; font-size: 14px\">Note - all actions are listed - some may not be runable</span>\r\n      <div class=\"la-process-selection\">\r\n        <div class=\"la-available-process\" (click)=\"selectProcess('action', action)\" *ngFor=\"let action of caseActionList\">\r\n          <div class=\"la-process-name\">{{action.name}}</div>\r\n          <div fxLayout=\"column\" class=\"la-process-selection-dtl\" fxLayoutAlign=\"start start\">\r\n            <div>Id: {{action.id}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseSearchComponent",
            "id": "component-LiveAppsCaseSearchComponent-0b5e00968a275aacc6c07b08d0cb12ad",
            "file": "src/lib/components/live-apps-case-search/live-apps-case-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-search",
            "styleUrls": [
                "./live-apps-case-search.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 18,
                    "type": "string[]"
                },
                {
                    "name": "sandboxId",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "foundRefs",
                    "defaultValue": "new EventEmitter<CaseSearchResults>()",
                    "line": 19,
                    "type": "EventEmitter<CaseSearchResults>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "applicationsComponent",
                    "type": "LiveAppsApplicationsComponent",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsApplicationsComponent"
                        }
                    ]
                },
                {
                    "name": "clearResults",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doSearch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "forcedSearch",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "forceSearch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleSearchAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchBox",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchBox'"
                        }
                    ]
                },
                {
                    "name": "searchString",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchTerm$",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "searchValue",
                    "type": "Observable<String>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedApp",
                    "defaultValue": "new CaseType()",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CaseInfoList, CaseSearchResults, CaseType} from '../../models/liveappsdata';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {LiveAppsApplicationsComponent} from '../live-apps-applications/live-apps-applications.component';\r\nimport {map, tap} from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-search',\r\n  templateUrl: './live-apps-case-search.component.html',\r\n  styleUrls: ['./live-apps-case-search.component.css']\r\n})\r\n\r\nexport class LiveAppsCaseSearchComponent extends LiveAppsComponent {\r\n  @ViewChild('searchBox') searchBox: ElementRef;\r\n  @Input() sandboxId: number;\r\n  @Input() appIds: string[];\r\n  @Output() foundRefs: EventEmitter<CaseSearchResults> = new EventEmitter<CaseSearchResults>();\r\n\r\n  @ViewChild(LiveAppsApplicationsComponent) applicationsComponent: LiveAppsApplicationsComponent;\r\n\r\n  searchTerm$: Subject<string>;\r\n  searchValue: Observable<String>;\r\n  searchString: string;\r\n  forcedSearch = false;\r\n\r\n  // case type selector\r\n  public selectedApp: CaseType = new CaseType();\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    if (this.applicationsComponent) {\r\n      this.applicationsComponent.refresh(true);\r\n    }\r\n  }\r\n\r\n  // handle search app selection\r\n  public handleSearchAppSelection = (application: CaseType) => {\r\n    this.selectedApp = application;\r\n    this.doSearch();\r\n  }\r\n\r\n  // clear search results\r\n  public clearResults = () => {\r\n    this.forcedSearch = false;\r\n    this.searchString = '';\r\n    this.searchBox.nativeElement.value = '';\r\n    const result = new CaseSearchResults().deserialize({ caserefs: [], searchString: '' });\r\n    this.foundRefs.emit(result);\r\n  }\r\n\r\n  public forceSearch = () => {\r\n    this.forcedSearch = true;\r\n    this.liveapps.caseSearchEntries(this.searchBox.nativeElement.value, this.sandboxId, this.selectedApp.applicationId, this.selectedApp.id, true, 0, 1000).subscribe(\r\n      results => {\r\n        this.foundRefs.emit(results);\r\n      }\r\n    );\r\n  }\r\n\r\n  private doSearch = () => {\r\n    this.forcedSearch = false;\r\n    this.searchBox.nativeElement.value = '';\r\n    const result = new CaseSearchResults().deserialize({ caserefs: [], searchString: '' });\r\n    this.foundRefs.emit(result);\r\n    this.searchTerm$ = new Subject<string>();\r\n    this.searchTerm$.subscribe(next => {\r\n      this.searchString = next;\r\n      return next;\r\n    })\r\n    this.searchValue = this.searchTerm$.asObservable();\r\n    if (this.selectedApp.applicationId && this.selectedApp.id && this.sandboxId) {\r\n      const skip = 0;\r\n      const top = 1000;\r\n      // Note: The API limits searches to 1000 items\r\n      // The service is configured to optimize performance by only returning case references at this stage\r\n      // The case details will only be loaded when the item is rendered (for example in the case-list component)\r\n      // Any case list component should use cdk virtual scroll to ensure 1000 case details are not loaded in one go\r\n      // (from the API or to the DOM)\r\n      this.liveapps.caseSearch(this.searchTerm$, this.sandboxId, this.selectedApp.applicationId, this.selectedApp.id, skip, top)\r\n        .subscribe(results => {\r\n          this.foundRefs.emit(results);\r\n        });\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-search-box {\r\n  min-width: 650px;\r\n  height: 44px;\r\n  box-shadow: inset 0 1px 3px 0 rgba(0, 0, 0, 0.5);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-search-input {\r\n  height: 24px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  text-align: left;\r\n  border: none;\r\n}\r\n\r\n.tcs-search-input:focus {\r\n  outline: none;\r\n}\r\n\r\n.tcs-search-input::placeholder{\r\n  opacity: 0.38;\r\n}\r\n\r\n.tcs-search-input-container {\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}\r\n\r\n.tcs-search-application-selector {\r\n  width: 200px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  height: 20px;\r\n  background-color: #eeeeee;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 4px;\r\n  height: 35px;\r\n}\r\n\r\n:host ::ng-deep .tcs-search-icon:hover .svg-content  {\r\n  fill: #0081cb;\r\n}\r\n\r\n:host ::ng-deep .tcs-close-icon:hover .svg-content  {\r\n  fill: #0081cb;\r\n}\r\n\r\n.tcs-search-icon:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-close-icon:hover {\r\n  cursor: pointer;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-search.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "templateData": "<div fxLayout=\"row\" fxFlex=\"75\" fxLayout=\"center center\">\r\n  <div class=\"tcs-search-box\" fxlayout=\"row\" fxLayoutAlign=\"space-around center\" fxFlex>\r\n    <tcla-live-apps-applications fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-search-application-selector\" [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [selectFirstApp]=\"true\" (selection)=\"handleSearchAppSelection($event)\"></tcla-live-apps-applications>\r\n    <div class=\"tcs-search-input-container\" fxFlex>\r\n      <input #searchBox class=\"tcs-search-input\" placeholder=\"{{ selectedApp.applicationName ? 'Search within ' + selectedApp.applicationName + ' cases' : 'Select a case type to search cases' }}\" (keyup)=\"searchTerm$.next($event.target.value)\" [disabled]=\"!selectedApp.applicationId\" fxFlex>\r\n      <div fxLayoutAlign=\"center end\">\r\n        <mat-icon *ngIf=\"forcedSearch || searchString\" class=\"tcs-icon tcs-close-icon\" svgIcon=\"tcs-close-icon\" (click)=\"clearResults()\"></mat-icon>\r\n        <mat-icon *ngIf=\"!forcedSearch && !searchString\" class=\"tcs-icon tcs-search-icon\" svgIcon=\"tcs-search-icon\" (click)=\"forceSearch()\"></mat-icon>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseStateAuditComponent",
            "id": "component-LiveAppsCaseStateAuditComponent-97b86fd7b200f0ce38becfc00ae6b649",
            "file": "src/lib/components/live-apps-case-state-audit/live-apps-case-state-audit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-state-audit",
            "styleUrls": [
                "./live-apps-case-state-audit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-state-audit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "caseRef",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "auditEvents",
                    "type": "StateAuditEvent[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {AuditEvent} from '../../models/tc-case-audit';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseStatesService} from '../../services/tc-case-states.service';\r\nimport {StateAuditEvent} from '../../models/tc-case-states';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-state-audit',\r\n  templateUrl: './live-apps-case-state-audit.component.html',\r\n  styleUrls: ['./live-apps-case-state-audit.component.css']\r\n})\r\nexport class LiveAppsCaseStateAuditComponent extends LiveAppsComponent implements OnInit {\r\n\r\n  @Input() caseRef: string;\r\n  @Input() sandboxId: number;\r\n  @Input() appId: string;\r\n\r\n  public auditEvents: StateAuditEvent[];\r\n  public errorMessage: string;\r\n\r\n\r\n  constructor(private caseStatesService: TcCaseStatesService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.caseStatesService.getCaseStateAuditWithTerminal(this.caseRef, this.sandboxId, this.appId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(auditeventlist => {\r\n          this.auditEvents = auditeventlist.auditEvents;\r\n          if (!this.auditEvents || this.auditEvents.length <= 0) {\r\n            console.error('Unable to create states audit view. Case Audit likely removed due to subscription retention period.');\r\n          }\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case audit: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-state-audit-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-mini-state-item-middle {\r\n  padding-top: 30px;\r\n  border-left: solid 3px #062e79;\r\n  margin-top: -10px;\r\n}\r\n\r\n.tcs-mini-state-item-first {\r\n  border-left: solid 3px #062e79;\r\n}\r\n\r\n.tcs-mini-state-item-last {\r\n  margin-top: -10px;\r\n  padding-top: 30px;\r\n  border-left: solid 3px #062e79;\r\n}\r\n\r\n.tcs-state-audit-container {\r\n  height: 100%;\r\n  overflow-x: auto;\r\n  padding: 11px;\r\n}\r\n\r\n.tc-no-audit-data {\r\n  padding: 20px;\r\n  min-width: 150px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: black;\r\n}\r\n\r\n/* to remove the train line after terminal state */\r\n.tcs-mini-state-item-last:after {\r\n  content: '';\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  position: relative;\r\n  left: -46px;\r\n  top: 0px;\r\n  background-color: red;\r\n  width: 10px;\r\n  height: 0px;\r\n  margin-top: -12px;\r\n}\r\n\r\n.tcs-mini-state-icon {\r\n  position: relative;\r\n  left: -13px;\r\n}\r\n\r\n.tcs-state-audit-details {\r\n  padding-top: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.tcs-mini-state-details {\r\n  margin-left: 10px;\r\n}\r\n\r\n.tcs-mini-state-primary-label {\r\n  font-family: Source Sans Pro;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: 0.2px;\r\n  color: #212121;\r\n}\r\n\r\n.tcs-mini-state-secondary-label {\r\n  font-family: Source Sans Pro;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: 0.2px;\r\n  color: #b6b6b6;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-state-audit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-state-audit-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\r\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'States'\" [icon]=\"'tcs-case-state-audit-icon'\"></tc-tibco-cloud-widget-header>\r\n  <div *ngIf=\"auditEvents && auditEvents.length > 0\" class=\"tcs-state-audit-container\">\r\n    <div class=\"tcs-state-audit-details\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n      <div *ngFor=\"let state of auditEvents; first as isFirst; last as isLast\"\r\n           [ngClass]=\"isFirst ? 'tcs-mini-state-item-first' : (isLast ? 'tcs-mini-state-item-last' : 'tcs-mini-state-item-middle')\">\r\n        <div fxLayout=\"row\">\r\n          <mat-icon class=\"tcs-mini-state-icon\"\r\n                    [svgIcon]=\"isLast ? (state.isTerminal ? 'tcs-mini-state-terminal-completed' : 'tcs-mini-state-current') : 'tcs-mini-state-completed'\"></mat-icon>\r\n          <li class=\"tcs-mini-state-details\" fxLayout=\"column\" fxLayoutAlign=\"start start\"\r\n              ng-class=\"{'underline':smallContainer}\">\r\n            <div class=\"tcs-mini-state-primary-label\"><span>{{state.caseState.value}}</span></div>\r\n            <div class=\"tcs-mini-state-secondary-label\">\r\n              <span *ngIf=\"state.principalName\">By {{state.principalName.value}}</span>\r\n              <span class=\"tcs-mini-state-spanPadding\"> on {{state.creationTime.value | date: \"medium\"}}</span>\r\n            </div>\r\n          </li>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"!auditEvents || auditEvents.length <= 0\">\r\n    <span class=\"tc-no-audit-data\">Audit data not available</span>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCaseStatesComponent",
            "id": "component-LiveAppsCaseStatesComponent-f371b97a207bcea9fc9b29c044fc621b",
            "file": "src/lib/components/live-apps-case-states/live-apps-case-states.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-states",
            "styleUrls": [
                "./live-apps-case-states.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-states.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "caseRef",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 18,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getToolTipText",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "states",
                    "type": "CaseTypeState[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tracker",
                    "type": "StateTracker",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {CaseTypeState, CaseTypeStatesList, Metadata} from '../../models/liveappsdata';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {StateTracker, TrackerState} from '../../models/tc-case-states';\r\nimport {TcCaseStatesService} from '../../services/tc-case-states.service';\r\nimport {DurationSincePipe} from '@tibco-tcstk/tc-core-lib';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-states',\r\n  templateUrl: './live-apps-case-states.component.html',\r\n  styleUrls: ['./live-apps-case-states.component.css']\r\n})\r\nexport class LiveAppsCaseStatesComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() appId: string;\r\n  @Input() sandboxId: number;\r\n  @Input() caseRef: string;\r\n\r\n  public states: CaseTypeState[];\r\n  public tracker: StateTracker;\r\n  public errorMessage: string;\r\n\r\n  public getToolTipText = (trackerState: TrackerState): string => {\r\n    let toolTipText = '';\r\n    if (trackerState.status != 'pending') {\r\n      toolTipText = toolTipText + trackerState.user + ' ' + this.durationSince.transform(trackerState.changed);\r\n    }\r\n    return toolTipText;\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.caseStatesService.getTracker(this.caseRef, this.sandboxId, this.appId).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(tracker => {\r\n        this.tracker = tracker;\r\n        if (!tracker.valid) {\r\n          console.error('Unable to create milestone trailer. Case Audit likely removed due to subscription retention period.');\r\n        }\r\n        return tracker;\r\n      }\r\n        )\r\n    ).subscribe(\r\n      null, error => { this.errorMessage = 'Error constructing state tracker: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  constructor(private caseStatesService: TcCaseStatesService, private durationSince: DurationSincePipe) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tc-milestone-title {\r\n  min-width: 150px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: black;\r\n}\r\n\r\n:host ::ng-deep tcla-live-apps-milestone .tc-ms-pending-bg {\r\n  fill: #DEDEDE;\r\n}\r\n\r\n:host ::ng-deep tcla-live-apps-milestone .tc-ms-inprogress-bg {\r\n  fill: #0081CB;\r\n}\r\n\r\n:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-bg {\r\n  fill: #062E79;\r\n}\r\n\r\n:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-terminal-bg {\r\n  fill: #04BE5B;\r\n}\r\n\r\n:host ::ng-deep tcla-live-apps-milestone .tc-ms-label {\r\n  color: black;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-states.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService"
                    },
                    {
                        "name": "durationSince",
                        "type": "DurationSincePipe"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "durationSince",
                        "type": "DurationSincePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFlex class=\"starters-case-states-container\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n  <div *ngIf=\"tracker && tracker.valid\">\r\n    <span class=\"tc-milestone-title\" fxLayoutAlign=\"start center\">Milestones</span>\r\n    <div fxFlex class=\"starters-milestone-trailer\" fxLayout=\"row wrap\">\r\n      <div class=\"starters-ms-wrapper\" *ngFor=\"let trackerState of tracker.states; first as isFirst; last as isLast\" ngclass=\"{'starters-milestone-first-section': isFirst, 'starters-milestone-mid-section': (!isFirst && !isLast), 'starters-milestone-end-section': isLast}\">\r\n        <tcla-live-apps-milestone [isFirst]=\"isFirst\" [isLast]=\"isLast\" [isTerminal]=\"trackerState.isTerminal\" [label]=\"trackerState.label\" [phase]=\"trackerState.phase\" [previousPhase]=\"trackerState.previousPhase\" [status]=\"trackerState.status\" [matTooltip]=\"getToolTipText(trackerState)\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></tcla-live-apps-milestone>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"tracker && !tracker.valid\">\r\n    <span class=\"tc-milestone-title\">Milestone data not available</span>\r\n  </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "LiveAppsCaseSummaryComponent",
            "id": "component-LiveAppsCaseSummaryComponent-b16143bebb8938a058d6183c8b9d89a0",
            "file": "src/lib/components/live-apps-case-summary/live-apps-case-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-summary",
            "styleUrls": [
                "./live-apps-case-summary.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderCard",
                    "line": 42,
                    "type": "boolean"
                },
                {
                    "name": "caseReference",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "configMode",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "configModeAppTypeLabel",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "configModeCaseTypeColor",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "configModeCaseTypeIcon",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "configModeColor",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "configModeIcon",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "displayType",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "highlight",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 40,
                    "type": "number"
                },
                {
                    "name": "typeBar",
                    "line": 43,
                    "type": "boolean"
                },
                {
                    "name": "uiAppId",
                    "line": 44,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickCase",
                    "defaultValue": "new EventEmitter<CaseRoute>()",
                    "line": 46,
                    "type": "EventEmitter<CaseRoute>"
                },
                {
                    "name": "deleted",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 47,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "appStateConfig",
                    "type": "CardConfig",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "casedata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "caseTypeIconComponent",
                    "type": "LiveAppsStateIconComponent",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'caseTypeIcon'"
                        }
                    ]
                },
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "errorMessage",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "metadata",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "restylePreview",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "restylePreviewCaseType",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateIconComponent",
                    "type": "LiveAppsStateIconComponent",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'caseStateIcon'"
                        }
                    ]
                },
                {
                    "name": "summary",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "summaryKeys",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "summaryValues",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input, OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList, SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CardConfig, CaseInfo, CaseRoute, Metadata} from '../../models/liveappsdata';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {DomSanitizer, Meta, SafeHtml} from '@angular/platform-browser';\r\nimport {LiveAppsStateIconComponent} from '../live-apps-state-icon/live-apps-state-icon.component';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCaseCardConfigService} from '../../services/tc-case-card-config.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-summary',\r\n  templateUrl: './live-apps-case-summary.component.html',\r\n  styleUrls: ['./live-apps-case-summary.component.css']\r\n})\r\n\r\nexport class LiveAppsCaseSummaryComponent extends LiveAppsComponent implements OnInit, OnChanges {\r\n  // The ViewChild declarations give access to components marked on the template so that I can call public functions like refresh\r\n  @ViewChild('caseStateIcon') stateIconComponent: LiveAppsStateIconComponent;\r\n  @ViewChild('caseTypeIcon') caseTypeIconComponent: LiveAppsStateIconComponent;\r\n\r\n  @Input() configMode: boolean;\r\n  @Input() configModeColor: string;\r\n  @Input() configModeIcon: string;\r\n  @Input() configModeCaseTypeColor: string;\r\n  @Input() configModeCaseTypeIcon: string;\r\n  @Input() configModeAppTypeLabel: string;\r\n  @Input() caseReference: string;\r\n  @Input() sandboxId: number;\r\n  @Input() displayType: string; // miniCard, card, list\r\n  @Input() borderCard: boolean;\r\n  @Input() typeBar: boolean;\r\n  @Input() uiAppId: string;\r\n  @Input() highlight: string;\r\n  @Output() clickCase: EventEmitter<CaseRoute> = new EventEmitter<CaseRoute>();\r\n  @Output() deleted: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  public casedata: any;\r\n  public summary: any;\r\n  public summaryKeys: string[];\r\n  public summaryValues: string[];\r\n  public metadata: Metadata;\r\n  public appStateConfig: CardConfig;\r\n  public errorMessage;\r\n  public appId: string;\r\n  public typeId: string;\r\n  color: string;\r\n\r\n  public clickCaseAction = () => {\r\n    const caseRoute = new CaseRoute().deserialize({ caseRef: this.caseReference, appId: this.appId, typeId: this.typeId});\r\n    this.clickCase.emit(caseRoute);\r\n  }\r\n\r\n  public restylePreview = (icon, fill) => {\r\n    this.metadata.stateIcon = icon;\r\n    this.metadata.stateColor = fill;\r\n    this.stateIconComponent.refresh(icon, fill);\r\n  }\r\n\r\n  public restylePreviewCaseType = (icon, fill) => {\r\n    this.metadata.caseTypeIcon = icon;\r\n    this.metadata.caseTypeColor = fill;\r\n    this.caseTypeIconComponent.refresh(icon, fill);\r\n  }\r\n\r\n  public refresh = () => {\r\n    if (!this.configMode) {\r\n      this.caseCardConfigService.getCaseWithSummary(this.caseReference, this.sandboxId, this.uiAppId)\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(caseinfo => {\r\n            if (!caseinfo.deleted) {\r\n              this.appId = caseinfo.metadata.applicationId;\r\n              this.typeId = caseinfo.metadata.typeId;\r\n              this.casedata = caseinfo.untaggedCasedataObj;\r\n              this.metadata = caseinfo.metadata;\r\n              this.summary = caseinfo.summaryObj;\r\n              this.summaryKeys = Object.keys(this.summary);\r\n              this.summaryValues = Object.values(this.summary);\r\n            } else {\r\n              // notify parent case has been deleted\r\n              this.deleted.emit(this.caseReference);\r\n            }\r\n          })\r\n        ).subscribe(\r\n        null, error => {\r\n          this.errorMessage = 'Error retrieving case data: ' + error.error.errorMsg;\r\n        });\r\n    } else {\r\n      const sampleCaseInfoJSON = '{\\n' +\r\n        '  \"untaggedCasedata\": \"\",\\n' +\r\n        '  \"summary\": \"{\\\\\"state\\\\\":\\\\\"Current State\\\\\",\\\\\"Summary1\\\\\":\\\\\"000001\\\\\",\\\\\"Summary2\\\\\":\\\\\"summary data\\\\\",\\\\\"Summary3\\\\\":\\\\\"summary data\\\\\"}\",\\n' +\r\n        '  \"metadata\": {\\n' +\r\n        '    \"createdBy\": \"-1\",\\n' +\r\n        '    \"creationTimestamp\": \"2018-11-27T08:40:03.404Z\",\\n' +\r\n        '    \"createdByDetails\": {\\n' +\r\n        '      \"username\": \"creator@mycompany.com\"\\n' +\r\n        '    },\\n' +\r\n        '    \"modifiedBy\": \"-1\",\\n' +\r\n        '    \"modificationTimestamp\": \"2018-11-27T08:40:22.010Z\",\\n' +\r\n        '    \"lockType\": \"1\",\\n' +\r\n        '    \"msLockExpiry\": \"1543308022271\",\\n' +\r\n        '    \"msSystemTime\": \"1545127800839\",\\n' +\r\n        '    \"applicationId\": \"934\",\\n' +\r\n        '    \"typeId\": \"1\"\\n' +\r\n        '  },\\n' +\r\n        '  \"summaryObj\": {\\n' +\r\n        '    \"state\": \"Current State\",\\n' +\r\n        '    \"Summary 1\": \"000001\",\\n' +\r\n        '    \"Summary 2\": \"The case name\",\\n' +\r\n        '    \"Summary 3\": \"The case description\"\\n' +\r\n        '  },\\n' +\r\n        '  \"untaggedCasedataObj\": {\\n' +\r\n        '  }\\n' +\r\n        '}'\r\n      const caseinfo = new CaseInfo().deserialize(JSON.parse(sampleCaseInfoJSON));\r\n      this.casedata = caseinfo.untaggedCasedataObj;\r\n      this.metadata = caseinfo.metadata;\r\n      this.summary = caseinfo.summaryObj;\r\n      this.summaryKeys = Object.keys(this.summary);\r\n      this.summaryValues = Object.values(this.summary);\r\n      this.metadata.stateIcon = this.configModeIcon;\r\n      this.metadata.stateColor = this.configModeColor;\r\n      this.metadata.caseTypeColor = this.configModeCaseTypeColor;\r\n      this.metadata.caseTypeIcon = this.configModeCaseTypeIcon;\r\n      this.metadata.applicationLabel = this.configModeAppTypeLabel;\r\n    }\r\n  }\r\n\r\n  constructor(private liveapps: LiveAppsService, private caseCardConfigService: TcCaseCardConfigService, private sanitizer: DomSanitizer) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.configModeAppTypeLabel && !changes.configModeAppTypeLabel.isFirstChange() && (changes.configModeAppTypeLabel.currentValue !== changes.configModeAppTypeLabel.previousValue)) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-summary-list {\r\n  width: 100%;\r\n  height: 190px;\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n  padding: 0px;\r\n}\r\n\r\n.tcs-case-summary-card {\r\n  width: 285px;\r\n  height: 190px;\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n  padding: 0px;\r\n}\r\n\r\n.tcs-case-summary-mini-card {\r\n  padding: 0px;\r\n  height: 91px;\r\n  min-width: 285px;\r\n  max-width: 297px;\r\n  min-height: 91px;\r\n  background-color: #ffffff;\r\n  /*padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 7px;\r\n  padding-bottom: 7px;*/\r\n  box-shadow: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-case-summary-list-card {\r\n  padding: 0px;\r\n  height: 50px;\r\n  min-height: 50px;\r\n  background-color: #ffffff;\r\n  /*padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 7px;\r\n  padding-bottom: 7px;*/\r\n  box-shadow: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-case-summary-static-list-card {\r\n  padding: 0px;\r\n  height: 50px;\r\n  min-height: 50px;\r\n  background-color: #ffffff;\r\n  /*padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 7px;\r\n  padding-bottom: 7px;*/\r\n  box-shadow: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n\r\n\r\n.tcs-case-summary-mini-card-right-content {\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n  padding-top: 7px;\r\n  padding-bottom: 7px\r\n}\r\n\r\n.tcs-case-summary-mini-card.border {\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-case-summary-mini-card:hover {\r\n  box-shadow: 0px 3px 8px 4px rgba(0, 0, 0, 0.33);\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-case-summary-card:hover {\r\n  box-shadow: 0px 3px 8px 4px rgba(0, 0, 0, 0.33);\r\n}\r\n\r\n.tcs-case-summary-list-card:hover {\r\n  box-shadow: 0px 3px 8px 4px rgba(0, 0, 0, 0.33);\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-case-summary-static-list-card:hover {\r\n  /* box-shadow: 0px 3px 8px 4px rgba(0, 0, 0, 0.33);\r\n  border-radius: 3px; */\r\n}\r\n\r\n.tcs-case-summary-header {\r\n  width: 100%;\r\n  height: 20px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  /* background-color: #0285a1;*/\r\n}\r\n\r\n.tcs-case-summary-mini-card-side-bar {\r\n  border-radius: 3px 0px 0px 3px;\r\n  /* background-color: #0285a1; */\r\n  width: 20px;\r\n  height: 100%;\r\n}\r\n\r\n.tcs-case-summary-card-contents {\r\n  padding-left: 12px;\r\n  padding-right: 12px;\r\n  padding-bottom: 4px;\r\n  padding-top: 4px;\r\n}\r\n\r\n.tcs-case-summary-case-footer {\r\n  width: 100%;\r\n  height: 36px;\r\n  border-radius: 0px 0px 3px 3px;\r\n  background-color: #ffffff;\r\n  padding-left: 12px;\r\n  padding-right: 12px;\r\n}\r\n\r\n.tcs-case-summary-case-type-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #727272;\r\n}\r\n\r\n.tcs-case-summary-summary1-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #212121;\r\n  margin-top: 12px;\r\n  height: 18px;\r\n  min-height: 18px;\r\n}\r\n\r\n.tcs-case-summary-list-summary1-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #212121;\r\n  height: 18px;\r\n  min-height: 18px;\r\n}\r\n\r\n.tcs-case-summary-summary1-text.mini {\r\n  margin-top: 0px;\r\n}\r\n\r\n.tcs-case-summary-creation-text {\r\n  /* height: 15px; */\r\n  min-height: 15px;\r\n}\r\n\r\n.tcs-case-summary-creation-text div {\r\n  font-family: Source Sans Pro;\r\n  font-size: 10px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #727272;\r\n}\r\n\r\n.tcs-case-summary-line {\r\n  margin-left: 20px;\r\n  padding: 0px;\r\n  margin-top: 12px;\r\n  margin-right: 20px;\r\n  margin-bottom: 0px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n  width: 100%;\r\n}\r\n\r\n.tcs-case-summary-summary2-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: center;\r\n  color: #000000;\r\n  margin-top: 8px;\r\n}\r\n\r\n.tcs-case-summary-list-summary2-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #000000;\r\n}\r\n\r\n.tcs-case-summary-list-summary3-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #000000;\r\n}\r\n\r\n.tcs-case-summary-summary2-text.mini {\r\n  margin-top: 0px;\r\n}\r\n\r\n.tcs-case-summary-mini-card-right:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-case-summary-case-footer:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-case-summary-view-details-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: right;\r\n  color:#0081cb;\r\n}\r\n\r\n.tcs-case-summary-state-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #727272;\r\n}\r\n\r\n.tcs-case-summary-details-icon {\r\n  height: 14px;\r\n  width: 14px;\r\n  margin-left: 5px;\r\n}\r\n\r\n.tcs-case-summary-mini-card-state-box {\r\n  width: 100%;\r\n}\r\n\r\n.tcs-case-summary-state-icon {\r\n  margin-right: 5px;\r\n}\r\n\r\n.tcs-case-summary-list-card-left {\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}\r\n\r\n.tcs-case-summary-list-details-box {\r\n  min-width: 130px;\r\n}\r\n\r\n.tcs-case-summary-list-summary1-text {\r\n  width: 150px;\r\n  min-width: 150px;\r\n}\r\n\r\n.tcs-case-summary-list-large-details-box {\r\n  max-width: 500px;\r\n}\r\n\r\n:host ::ng-deep .tcs-case-summary-highlight {\r\n  color: black;\r\n  font-weight: 900;\r\n}\r\n",
                    "styleUrl": "./live-apps-case-summary.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 140,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "  <div *ngIf=\"displayType === 'miniCard'\">\r\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-mini-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\r\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\r\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\r\n        <div class=\"tcs-case-summary-mini-card-left\" fxLayout=\"column\" fxLayoutAlign=\"space-between start\" fxFlex>\r\n          <div *ngIf=\"summaryValues[1]\" class=\"tcs-case-summary-summary1-text mini\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{summaryValues[1]  | ellipsis: 45}}</div>\r\n          <div class=\"tcs-case-summary-creation-text\">\r\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username: 'system'}}</div>\r\n          </div>\r\n          <div *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-summary2-text mini\" matTooltip=\"{{summaryValues[2]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{summaryValues[2] | ellipsis: 45}}</div>\r\n          <div class=\"tcs-case-summary-mini-card-state-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\r\n            <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel}}</div>\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxFlex>\r\n              <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\r\n              <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"tcs-case-summary-mini-card-right\" (click)=\"clickCaseAction()\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\r\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div *ngIf=\"displayType === 'card'\">\r\n  <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-card\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\r\n    <div *ngIf=\"typeBar\" class=\"tcs-case-summary-header\" [style.background-color]=\"metadata.stateColor\"></div>\r\n    <div class=\"tcs-case-summary-card-contents\" fxFlex fxFill fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n      <div class=\"tcs-case-summary-case-type-text\">{{metadata.applicationLabel}}</div>\r\n      <div *ngIf=\"summaryValues[1]\" class=\"tcs-case-summary-summary1-text\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{summaryValues[1] | ellipsis: 45}}</div>\r\n      <div class=\"tcs-case-summary-creation-text\">\r\n        <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\r\n      </div>\r\n      <div class=\"tcs-case-summary-line\"></div>\r\n      <div *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-summary2-text\">{{summaryValues[2]}}</div>\r\n    </div>\r\n    <div class=\"tcs-case-summary-case-footer\" (click)=\"clickCaseAction()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\r\n        <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\r\n        <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\r\n      </div>\r\n      <div class=\"tcs-case-summary-view-details\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"above\" matTooltip=\"Open Case\" matTooltipShowDelay=\"1000\">\r\n        <div class=\"tcs-case-summary-view-details-text\">View Details</div>\r\n        <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\r\n      </div>\r\n    </div>\r\n  </mat-card>\r\n  </div>\r\n\r\n  <div *ngIf=\"displayType === 'list'\" style=\"min-height: 50px; background-color: white\">\r\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-list-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\r\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.stateColor\"></div>\r\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\r\n        <div class=\"tcs-case-summary-list-card-left\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\r\n          <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[1]\" class=\"tcs-case-summary-list-summary1-text tcs-case-summary-list-details-box\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\" [innerHTML]=\"summaryValues[1] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex=\"shrink\" *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\" [innerHTML]=\"summaryValues[2] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex *ngIf=\"summaryValues[3]\" class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\" [innerHTML]=\"summaryValues[3] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\r\n            <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\r\n            <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\r\n          </div>\r\n          <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\r\n            <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\r\n            <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\r\n          </div>\r\n          <div fxFlex class=\"tcs-case-summary-list-details-box tcs-case-summary-creation-text\">\r\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"tcs-case-summary-mini-card-right\" (click)=\"clickCaseAction()\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\r\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div *ngIf=\"displayType === 'staticlist'\" style=\"min-height: 50px; background-color: white\">\r\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-static-list-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\r\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.stateColor\"></div>\r\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\r\n        <div class=\"tcs-case-summary-list-card-left\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\r\n          <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[1]\" class=\"tcs-case-summary-list-summary1-text tcs-case-summary-list-details-box\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\" [innerHTML]=\"summaryValues[1] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex=\"shrink\" *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\" [innerHTML]=\"summaryValues[2] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex *ngIf=\"summaryValues[3]\" class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\" [innerHTML]=\"summaryValues[3] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\"></div>\r\n          <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\r\n            <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\r\n            <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\r\n          </div>\r\n          <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\r\n            <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\r\n            <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\r\n          </div>\r\n          <div fxFlex class=\"tcs-case-summary-list-details-box tcs-case-summary-creation-text\">\r\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n"
        },
        {
            "name": "LiveAppsCaseTypeOverviewReportComponent",
            "id": "component-LiveAppsCaseTypeOverviewReportComponent-cbcbda76117e3634950e01ea04b151f8",
            "file": "src/lib/components/live-apps-case-type-overview-report/live-apps-case-type-overview-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-case-type-overview-report",
            "styleUrls": [
                "./live-apps-case-type-overview-report.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-case-type-overview-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "incTerminal",
                    "defaultValue": "this.incTerminal ? this.incTerminal : true",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "sandboxId",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "caseTypeStateReport",
                    "type": "CaseTypeStateReport",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartData",
                    "defaultValue": "[]",
                    "type": "MultiDataSet",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartLabels",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartOptions",
                    "defaultValue": "{\r\n    legendCallback: function(chart) {\r\n      console.log(chart.data);\r\n      const text = [];\r\n      text.push('<ul>');\r\n      for (let i = 0; i < chart.data.datasets[0].data.length; i++) {\r\n        text.push('<li>');\r\n        text.push('<span style=\"background-color:' + chart.data.datasets[0].backgroundColor[i] + '\">' + chart.data.datasets[0].data[i] + '</span>');\r\n        if (chart.data.labels[i]) {\r\n          text.push(chart.data.labels[i] + ' hello');\r\n        }\r\n        text.push('</li>');\r\n      }\r\n      text.push('</ul>');\r\n      // return text.join('');\r\n      return '<span>HELLO</span>';\r\n    },\r\n    responsive: true,\r\n    legend: {\r\n      position: 'top'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 10,\r\n        bottom: 10\r\n      }\r\n    },\r\n    plugins: {\r\n      labels: [\r\n        {\r\n          render: 'label',\r\n          arc: false,\r\n          position: 'outside',\r\n          textMargin: 10\r\n        }\r\n      ],\r\n      datalabels: {\r\n        anchor: 'end',\r\n        backgroundColor: function(context) {\r\n          return context.dataset.backgroundColor;\r\n        },\r\n        borderColor: 'white',\r\n        borderRadius: 25,\r\n        borderWidth: 2,\r\n        color: 'white',\r\n        display: function(context) {\r\n          const dataset = context.dataset;\r\n          const value = dataset.data[context.dataIndex];\r\n          return value > 0;\r\n        },\r\n        font: {\r\n          weight: 'bold'\r\n        },\r\n        formatter: (value, ctx) => {\r\n\r\n          const datasets = ctx.chart.data.datasets;\r\n\r\n          if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {\r\n            const sum = datasets[0].data.reduce((a, b) => a + b, 0);\r\n            const percentage = Math.round((value / sum) * 100) + '%';\r\n            return percentage;\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doughnutChartType",
                    "defaultValue": "'doughnut'",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initReportDataToChart",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "legendData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "renderChart",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "chartClicked",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chartHovered",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {ChartLegendLabelOptions, ChartOptions, ChartPoint, ChartType} from 'chart.js';\r\nimport {BaseChartDirective, Label, MultiDataSet} from 'ng2-charts';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcLiveAppsReportingService} from '../../services/tc-live-apps-reporting.service';\r\nimport {CaseTypeStateReport} from '../../models/tc-live-apps-reporting';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {MatTabGroup} from '@angular/material';\r\nimport 'chartjs-plugin-labels';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-case-type-overview-report',\r\n  templateUrl: './live-apps-case-type-overview-report.component.html',\r\n  styleUrls: ['./live-apps-case-type-overview-report.component.css']\r\n})\r\nexport class LiveAppsCaseTypeOverviewReportComponent extends LiveAppsComponent implements OnInit, OnChanges {\r\n  @Input() sandboxId: number;\r\n  @Input() appId: string;\r\n  @Input() incTerminal: boolean = this.incTerminal ? this.incTerminal : true;\r\n  @Input() typeId: string;\r\n\r\n  // @ViewChild(BaseChartDirective) caseTypeStateReportChart: BaseChartDirective;\r\n\r\n  public errorMessage: string;\r\n  public caseTypeStateReport: CaseTypeStateReport;\r\n  public renderChart = false;\r\n\r\n  public doughnutChartLabels: Label[];\r\n  public doughnutChartData: MultiDataSet = [];\r\n  public doughnutChartType: ChartType = 'doughnut';\r\n\r\n  public legendData: any;\r\n\r\n  public doughnutChartOptions: any = {\r\n    legendCallback: function(chart) {\r\n      console.log(chart.data);\r\n      const text = [];\r\n      text.push('<ul>');\r\n      for (let i = 0; i < chart.data.datasets[0].data.length; i++) {\r\n        text.push('<li>');\r\n        text.push('<span style=\"background-color:' + chart.data.datasets[0].backgroundColor[i] + '\">' + chart.data.datasets[0].data[i] + '</span>');\r\n        if (chart.data.labels[i]) {\r\n          text.push(chart.data.labels[i] + ' hello');\r\n        }\r\n        text.push('</li>');\r\n      }\r\n      text.push('</ul>');\r\n      // return text.join('');\r\n      return '<span>HELLO</span>';\r\n    },\r\n    responsive: true,\r\n    legend: {\r\n      position: 'top'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 10,\r\n        bottom: 10\r\n      }\r\n    },\r\n    plugins: {\r\n      labels: [\r\n        {\r\n          render: 'label',\r\n          arc: false,\r\n          position: 'outside',\r\n          textMargin: 10\r\n        }\r\n      ],\r\n      datalabels: {\r\n        anchor: 'end',\r\n        backgroundColor: function(context) {\r\n          return context.dataset.backgroundColor;\r\n        },\r\n        borderColor: 'white',\r\n        borderRadius: 25,\r\n        borderWidth: 2,\r\n        color: 'white',\r\n        display: function(context) {\r\n          const dataset = context.dataset;\r\n          const value = dataset.data[context.dataIndex];\r\n          return value > 0;\r\n        },\r\n        font: {\r\n          weight: 'bold'\r\n        },\r\n        formatter: (value, ctx) => {\r\n\r\n          const datasets = ctx.chart.data.datasets;\r\n\r\n          if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {\r\n            const sum = datasets[0].data.reduce((a, b) => a + b, 0);\r\n            const percentage = Math.round((value / sum) * 100) + '%';\r\n            return percentage;\r\n          } else {\r\n            return 0;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  };\r\n\r\n  constructor(private reportingService: TcLiveAppsReportingService) {\r\n    super();\r\n  }\r\n\r\n  private initReportDataToChart = (reportData: CaseTypeStateReport, status: string) => {\r\n    this.doughnutChartData = [];\r\n    const casesByStateArray: number[] = [];\r\n    const labels: string[] = [];\r\n    reportData.caseStates.forEach(caseState => {\r\n      if (!this.incTerminal || (this.incTerminal && caseState.stateInfo.isTerminal)) {\r\n        casesByStateArray.push(caseState.caseCount);\r\n        labels.push(caseState.stateInfo.label);\r\n      }\r\n    });\r\n    this.doughnutChartData.push(casesByStateArray);\r\n    this.doughnutChartLabels = labels;\r\n    this.renderChart = true;\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.reportingService.getCaseTypeStateReport(this.sandboxId, this.appId, this.typeId, this.incTerminal).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(report => {\r\n        this.caseTypeStateReport = report;\r\n        this.initReportDataToChart(report, status);\r\n        return report;\r\n      }))\r\n      .subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }\r\n      );\r\n  }\r\n\r\n  // events\r\n  public chartClicked({ event, active }: { event: MouseEvent, active: {}[] }): void {\r\n    console.log(event, active);\r\n  }\r\n\r\n  public chartHovered({ event, active }: { event: MouseEvent, active: {}[] }): void {\r\n    // console.log(event, active);\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.appId && (changes.firstChange || (changes.appId.currentValue !== changes.appId.previousValue))) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-case-type-overview-report.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "reportingService",
                        "type": "TcLiveAppsReportingService"
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "reportingService",
                        "type": "TcLiveAppsReportingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutAlign=\"start start\" style=\"height: 100%\">\r\n  <div>\r\n    <!--mat-form-field>\r\n      <mat-select #caseStatusSelector class=\"tcs-reporting-status-selector-option\" [disableOptionCentering]=\"true\"\r\n                  placeholder=\"Case Status\" [value]=\"state\" (selectionChange)=\"selectState($event.value)\">\r\n        <mat-option value=\"Active\"><span>Active</span></mat-option>\r\n        <mat-option value=\"Terminated\"><span>Terminated</span></mat-option>\r\n      </mat-select>\r\n    </mat-form-field-->\r\n  </div>\r\n  <div *ngIf=\"renderChart\" style=\"position: relative; height:40%; width:80%; padding: 20px\" class=\"relative\">\r\n    <canvas #caseReportChart baseChart\r\n      [data]=\"doughnutChartData\"\r\n      [labels]=\"doughnutChartLabels\"\r\n      [chartType]=\"doughnutChartType\"\r\n      [options]=\"doughnutChartOptions\"\r\n      (chartHover)=\"chartHovered($event)\"\r\n      (chartClick)=\"chartClicked($event)\"\r\n    >\r\n    </canvas>\r\n    <div #myLegend></div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LiveAppsComponent",
            "id": "component-LiveAppsComponent-1b926091e32312af5beed7df58ff0474",
            "file": "src/lib/components/live-apps-component/live-apps-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-component",
            "styleUrls": [
                "./live-apps-component.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>&lt;%= name %&gt;\nDescribe your live apps component here</p>\n",
            "rawdescription": "<%= name %>\r\nDescribe your live apps component here",
            "type": "component",
            "sourceCode": "import {Component, OnDestroy } from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/**\r\n * <%= name %>\r\n * Describe your live apps component here\r\n *\r\n */\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-component',\r\n  templateUrl: './live-apps-component.component.html',\r\n  styleUrls: ['./live-apps-component.component.css']\r\n})\r\n\r\n/**\r\n * Class Description of the Component\r\n */\r\nexport class LiveAppsComponent implements OnDestroy {\r\n\r\n  // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received\r\n  protected _destroyed$ = new Subject();\r\n\r\n  constructor() { }\r\n\r\n  ngOnDestroy() {\r\n    // on destroy\r\n    this._destroyed$.next();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-component.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<p>\r\n  New Live Apps Component\r\n</p>\r\n"
        },
        {
            "name": "LiveAppsCreatorDialogComponent",
            "id": "component-LiveAppsCreatorDialogComponent-9a77f1e382c3ef682ddc693aecf11fa2",
            "file": "src/lib/components/live-apps-creator-dialog/live-apps-creator-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-creator-dialog",
            "styleUrls": [
                "live-apps-creator-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "live-apps-creator-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "application",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "closeDialog",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "createdCase",
                    "type": "ProcessId",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "CaseCreatorSelectionContext",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<LiveAppsCreatorDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleCaseCreated",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "initialData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openCase",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport {CaseCreatorSelectionContext} from '../../models/tc-case-creator';\r\nimport {CaseRoute, CaseType, ProcessId} from '../../models/liveappsdata';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-creator-dialog',\r\n  templateUrl: 'live-apps-creator-dialog.component.html',\r\n  styleUrls: ['live-apps-creator-dialog.component.css']\r\n})\r\nexport class LiveAppsCreatorDialogComponent {\r\n\r\n  public application: CaseType;\r\n  public sandboxId: number;\r\n  public initialData: any;\r\n  public createdCase: ProcessId;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsCreatorDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: CaseCreatorSelectionContext) {\r\n    this.application = data.application;\r\n    this.sandboxId = data.sandboxId;\r\n    this.initialData = data.initialData;\r\n  }\r\n\r\n  public handleCaseCreated = (createdCase: ProcessId) => {\r\n    this.createdCase = createdCase;\r\n  }\r\n\r\n  openCase = () => {\r\n    const caseRoute = new CaseRoute().deserialize(\r\n      { caseRef: this.createdCase.caseReference, appId: this.application.applicationId, typeId: this.application.id });\r\n    this.dialogRef.close(caseRoute);\r\n  }\r\n\r\n  closeDialog = () => {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-dialog-outer-div {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.tcs-spacer {\r\n  flex-grow: 1;\r\n}\r\n\r\n.tcs-case-creation-dialog-toolbar {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  background-color: #ffffff;\r\n  border-bottom: 1px solid #dcdcdc;\r\n}\r\n\r\n.tcs-case-creation-dialog-toolbar-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.tcs-case-creation-dialog-details {\r\n  padding: 20px;\r\n}\r\n\r\n.tcs-case-created-confirmation-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #b6b6b6;\r\n}\r\n\r\n.tcs-case-creation-dialog-actions {\r\n  padding: 20px;\r\n}\r\n\r\n:host ::ng-deep .tcs-dialog-actions.mat-dialog-actions {\r\n  margin-bottom: 0px;\r\n  padding: 20px;\r\n}\r\n\r\n.tcs-case-creation-dialog.mat-dialog-content {\r\n  padding: 0px;\r\n  margin: 0px;\r\n}\r\n\r\n.tcs-case-created-confirmation-details {\r\n  margin-top: 20px;\r\n}\r\n\r\n.tcs-case-creation-dialog-icons {\r\n  height: 16px;\r\n  width: 16px;\r\n}\r\n\r\n.tcs-case-creation-dialog-icons:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-case-creation-dialog-icons:hover .svg-content {\r\n  fill: #0081cb;\r\n}\r\n",
                    "styleUrl": "live-apps-creator-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsCreatorDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "CaseCreatorSelectionContext"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsCreatorDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "CaseCreatorSelectionContext",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"tcs-dialog-outer-div\">\r\n  <mat-toolbar class=\"tcs-case-creation-dialog-toolbar\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex>\r\n      <span class=\"tcs-case-creation-dialog-toolbar-text\">Create New {{application.applicationName}}</span>\r\n    </div>\r\n    <mat-icon fxLayout=\"column\" fxLayoutAlign=\"start end\" class=\"tcs-case-creation-dialog-icons\" [svgIcon]=\"'tcs-close-icon'\" (click)=\"closeDialog()\"></mat-icon>\r\n  </mat-toolbar>\r\n  <div mat-dialog-content class=\"tcs-case-creation-dialog\" fxLayout=\"column\">\r\n    <div *ngIf=\"!createdCase\" class=\"tcs-case-creation-dialog-details\">      <tcla-live-apps-creators [sandboxId]=\"sandboxId\" [applicationId]=\"application.applicationId\"\r\n                               [typeId]=\"application.id\" [dataOverride]=\"initialData\"\r\n                               (caseCreated)=\"handleCaseCreated($event)\"></tcla-live-apps-creators>\r\n    </div>\r\n    <div *ngIf=\"createdCase\" class=\"tcs-case-created-confirmation-details\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\r\n      <span class=\"tcs-case-created-confirmation-text\">New {{application.applicationName}}\r\n        case successfully submitted</span>\r\n      </div>\r\n  </div>\r\n  <div class=\"tcs-spacer\"></div>\r\n  <mat-dialog-actions *ngIf=\"createdCase\" class=\"tcs-dialog-actions\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button mat-flat-button color=\"primary\" (click)=\"openCase()\">Open Case</button>\r\n    <button mat-button (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCreatorsComponent",
            "id": "component-LiveAppsCreatorsComponent-02f0a89108397b209648cd5186c1f81c",
            "file": "src/lib/components/live-apps-creators/live-apps-creators.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-creators",
            "styleUrls": [
                "./live-apps-creators.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-creators.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "applicationId",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "dataOverride",
                    "line": 17,
                    "type": "any"
                },
                {
                    "name": "sandboxId",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "caseCreated",
                    "defaultValue": "new EventEmitter<ProcessId>()",
                    "line": 18,
                    "type": "EventEmitter<ProcessId>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "creatorSelector",
                    "type": "LiveAppsCreatorSelectorComponent",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'creatorSelector'"
                        }
                    ]
                },
                {
                    "name": "handleCreatorSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "handleSubmit",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedProcess",
                    "type": "LaProcessSelection",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {ProcessId} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {LiveAppsCreatorSelectorComponent} from '../live-apps-creator-selector/live-apps-creator-selector.component';\r\n\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-creators',\r\n  templateUrl: './live-apps-creators.component.html',\r\n  styleUrls: ['./live-apps-creators.component.css']\r\n})\r\nexport class LiveAppsCreatorsComponent implements OnInit {\r\n  @ViewChild('creatorSelector') creatorSelector: LiveAppsCreatorSelectorComponent;\r\n  @Input() sandboxId: number;\r\n  @Input() applicationId: string;\r\n  @Input() typeId: string;\r\n  @Input() dataOverride: any;\r\n  @Output() caseCreated: EventEmitter<ProcessId> = new EventEmitter<ProcessId>();\r\n\r\n  selectedProcess: LaProcessSelection;\r\n\r\n  // handle form submit\r\n  handleSubmit = (data: ProcessId) => {\r\n    this.caseCreated.emit(data)\r\n    this.creatorSelector.reset();\r\n  }\r\n\r\n  // handle case creator selection\r\n  handleCreatorSelection = (process: LaProcessSelection) => {\r\n    this.selectedProcess = process;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    console.log(this.applicationId);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-creators.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxFlexFill>\r\n  <!--tcla-live-apps-creator-selector #creatorSelector style=\"\" [sandboxId]=\"sandboxId\" [appId]=\"applicationId\" [typeId]=\"typeId\" (creatorSelection)=\"handleCreatorSelection($event)\"></tcla-live-apps-creator-selector-->\r\n  <tcla-live-apps-case-creators #creatorSelector style=\"\" [sandboxId]=\"sandboxId\" [appId]=\"applicationId\" [typeId]=\"typeId\" (creatorClicked)=\"handleCreatorSelection($event)\"></tcla-live-apps-case-creators>\r\n  <tcla-live-apps-case-creator style=\"min-height:500px; overflow: auto;\" [sandboxId]=\"sandboxId\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" [process]=\"selectedProcess\" [dataOverride]=\"dataOverride\" (caseChanged)=\"handleSubmit($event)\"></tcla-live-apps-case-creator>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsCreatorSelectorComponent",
            "id": "component-LiveAppsCreatorSelectorComponent-7334bfa9cb05c479f92258a633f3ea1b",
            "file": "src/lib/components/live-apps-creator-selector/live-apps-creator-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-creator-selector",
            "styleUrls": [
                "./live-apps-creator-selector.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-creator-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "typeId",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "creatorSelection",
                    "defaultValue": "new EventEmitter<LaProcessSelection>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appSchema",
                    "type": "CaseTypesList",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "caseCreatorList",
                    "type": "Process[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "caseType",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "creatorSelector",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'creatorSelector'"
                        }
                    ]
                },
                {
                    "name": "getCaseIDAttributeName",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "reset",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectProcess",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {CaseType, CaseTypesList, Process} from '../../models/liveappsdata';\r\nimport {LaProcessSelection} from '../../models/tc-case-processes';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map} from 'rxjs/operators';\r\nimport {LiveAppsStateIconComponent} from '../live-apps-state-icon/live-apps-state-icon.component';\r\nimport {MatSelect} from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-creator-selector',\r\n  templateUrl: './live-apps-creator-selector.component.html',\r\n  styleUrls: ['./live-apps-creator-selector.component.css']\r\n})\r\nexport class LiveAppsCreatorSelectorComponent extends LiveAppsComponent implements OnChanges {\r\n  @ViewChild('creatorSelector') creatorSelector: MatSelect;\r\n  @Input() sandboxId: number;\r\n  @Input() appId: string;\r\n  @Input() typeId: string;\r\n  @Output() creatorSelection = new EventEmitter<LaProcessSelection>();\r\n\r\n  appSchema: CaseTypesList;\r\n  caseType: CaseType;\r\n  caseCreatorList: Process[];\r\n\r\n  // run when the user clicks on a case creator\r\n  public selectProcess = (process) => {\r\n    this.creatorSelection.emit(new LaProcessSelection('creator', this.appSchema, this.getCaseIDAttributeName(), process,\r\n      // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>\r\n      (this.caseType.applicationName + '.' + this.caseType.applicationInternalName + '.' + 'creator' + '.' + process.name),\r\n      undefined\r\n    ));\r\n  }\r\n\r\n  public reset = () => {\r\n    this.creatorSelector.value = undefined;\r\n  }\r\n\r\n  private getCaseIDAttributeName = () => {\r\n    let caseIdAttrib: any;\r\n    this.caseType.attributes.forEach((attribute) => {\r\n      if (attribute.isIdentifier) {\r\n        caseIdAttrib = attribute;\r\n      }\r\n    });\r\n    return caseIdAttrib;\r\n  }\r\n\r\n  public refresh = () => {\r\n    // retrieve the schema for this case type so we can display case creators and case actions for this case type\r\n    this.liveapps.getCaseTypeSchema(this.sandboxId, this.appId, 100).pipe(\r\n      map(schema => {\r\n          this.appSchema = schema;\r\n          schema.casetypes.forEach((casetype) => {\r\n              // the schema will contain definitions for both the 'case' and any defined types in that case.\r\n              // We want the schema for this 'case'.\r\n              if (casetype.applicationId === this.appId && casetype.id === this.typeId) {\r\n                if (casetype.jsonSchema !== undefined) {\r\n                  this.caseType = casetype;\r\n                  this.caseCreatorList = casetype.creators ? casetype.creators : [];\r\n                  if (this.caseCreatorList.length === 1) {\r\n                      this.selectProcess(this.caseCreatorList[0]);\r\n                  }\r\n                } else {\r\n                  console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');\r\n                }\r\n              }\r\n            }\r\n          );\r\n        }\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {\r\n        this.caseCreatorList= [];\r\n      this.refresh();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep  .tcs-creator-selector-option .mat-select-value span {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep  .tcs-creator-selector-option .mat-select-arrow-wrapper div {\r\n  color: #0081cb;\r\n}\r\n\r\n:host ::ng-deep .mat-select-value {\r\n  min-width: 100px;\r\n  max-width: 100%;\r\n  width: auto;\r\n}\r\n\r\n.tcs-creators-box {\r\n  width: 200px;\r\n  height: 44px;\r\n  box-shadow: inset 0 1px 3px 0 rgba(0, 0, 0, 0.5);\r\n  background-color: #ffffff;\r\n}\r\n\r\ntcs-creator-selector-option {\r\n  width: 170px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  height: 20px;\r\n  background-color: #eeeeee;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  height: 35px;\r\n}\r\n\r\n.tcs-case-creation-dialog-instruction {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color:#727272;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./live-apps-creator-selector.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"caseCreatorList && caseCreatorList.length > 1\" fxFlex style=\"margin-left: 10px;\">\r\n    <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\r\n    <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\r\n                placeholder=\"Case Creators\" (selectionChange)=\"selectProcess($event.value)\">\r\n      <mat-option *ngFor=\"let creator of caseCreatorList\" [value]=\"creator\">\r\n        <span>{{creator.name}}</span>\r\n      </mat-option>\r\n    </mat-select>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsDocumentsComponent",
            "id": "component-LiveAppsDocumentsComponent-ca342d022927a06ed2f7d672d656bc28",
            "file": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-documents",
            "styleUrls": [
                "./live-apps-documents.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-documents.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filter",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "folderDescription",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "folderId",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "folderType",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "showHeader",
                    "defaultValue": "this.showHeader ? this.showHeader : true",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "documents",
                    "type": "Document[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "downloadDocument",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileToUpload",
                    "defaultValue": "undefined",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listDocuments",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "removeDocument",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadDocument",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "viewDocument",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "attachFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "setFileDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "fileToUpload",
                            "type": ""
                        },
                        {
                            "name": "description",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "fileToUpload",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport { DocumentList, Document } from '../../models/tc-document';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-documents',\r\n  templateUrl: './live-apps-documents.component.html',\r\n  styleUrls: ['./live-apps-documents.component.css']\r\n})\r\nexport class LiveAppsDocumentsComponent extends LiveAppsComponent implements OnInit {\r\n\r\n  constructor(private liveapps: LiveAppsService, private documentsService: TcDocumentService, public dialog: MatDialog) {\r\n    super();\r\n  }\r\n  @Input() sandboxId: number;\r\n  @Input() folderType: string; // 'orgFolders' or 'caseFolders'\r\n  @Input() folderId: string;   // caseRef for caseFolder\r\n  @Input() filter: string;\r\n  @Input() folderDescription: string;\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n\r\n  public errorMessage: string;\r\n  public documents: Document[];\r\n  public fileToUpload: File = undefined;\r\n  public fileDescription: string;\r\n  uploadMessage: string;\r\n\r\n  public refresh = () => {\r\n    this.listDocuments();\r\n  }\r\n\r\n  public listDocuments = () => {\r\n    this.documentsService.listDocuments(this.folderType, this.folderId, this.sandboxId, this.filter)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(documentslist => {\r\n          this.documents = documentslist.documents;\r\n        })\r\n      ).subscribe(null, error => { this.errorMessage = 'Error retrieving case states: ' + error.error.errorMsg; });\r\n    }\r\n\r\n  public uploadDocument = (doc) => {\r\n  }\r\n\r\n  public removeDocument = (doc) => {\r\n    this.documentsService.deleteDocument(this.folderType, this.folderId, doc.name, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(val => {\r\n          console.log(val);\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error removing document: ' + error.errorMsg; });\r\n  }\r\n\r\n  public viewDocument = (doc) => {\r\n    const viewDocDialogRef = this.dialog.open(LiveAppsDocumentViewerDialogComponent, {\r\n      width: '75%',\r\n      height: '75%',\r\n      data: {\r\n        doc: doc,\r\n        folderType: this.folderType,\r\n        folderId: this.folderId,\r\n        sandboxId: this.sandboxId\r\n      }\r\n    });\r\n\r\n    viewDocDialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  public downloadDocument = (doc) => {\r\n    this.documentsService.downloadDocument(this.folderType, this.folderId, doc.name, doc.artifactVersion, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(data => {\r\n          // todo: check if this works on all browsers\r\n          const downloadURL = window.URL.createObjectURL(data);\r\n          const link = document.createElement('a');\r\n          link.href = downloadURL;\r\n          link.download = doc.name;\r\n          link.click();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error downloading document: ' + error.errorMsg; });\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.fileDescription = description;\r\n  }\r\n\r\n  uploadFile(fileToUpload, description) {\r\n    this.fileToUpload = fileToUpload;\r\n    this.fileDescription = description;\r\n    if (this.fileToUpload) {\r\n      this.documentsService.uploadDocument(this.folderType, this.folderId, this.sandboxId,\r\n        this.fileToUpload, this.fileToUpload.name, this.fileDescription)\r\n        .pipe(\r\n          map(val => {\r\n            console.log(val);\r\n            this.refresh();\r\n          })\r\n        )\r\n        .subscribe(\r\n          result => {\r\n            this.fileToUpload = undefined;\r\n            this.uploadMessage = 'File uploaded';\r\n          },\r\n          error => { console.log('error'); this.errorMessage = 'Error uploading document: ' + error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(LiveAppsDocumentUploadDialogComponent, {\r\n      width: '500px',\r\n      data: {}\r\n    });\r\n\r\n    dialogRef.componentInstance.fileevent.subscribe(($e) => {\r\n      this.uploadFile($e.file, $e.description);\r\n    })\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-upload-dialog',\r\n  templateUrl: 'app-live-apps-document-upload-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-upload-dialog.css']\r\n})\r\nexport class LiveAppsDocumentUploadDialogComponent {\r\n  @Output() fileevent = new EventEmitter<any>();\r\n  public fileToUpload: File = undefined;\r\n  public description: string = undefined;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>) {}\r\n\r\n\r\n  public uploadFile = () => {\r\n    if (this.fileToUpload) {\r\n      this.fileevent.emit({ file: this.fileToUpload, description: this.description });\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.description = description;\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    // this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-viewer-dialog',\r\n  templateUrl: 'app-live-apps-document-viewer-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-viewer-dialog.css']\r\n})\r\nexport class LiveAppsDocumentViewerDialogComponent {\r\n  public doc: Document;\r\n  public folderType: string;\r\n  public folderId: string;\r\n  public sandboxId: number;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.doc = this.data.doc;\r\n    this.folderType = this.data.folderType;\r\n    this.folderId = this.data.folderId;\r\n    this.sandboxId = this.data.sandboxId;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-hidden-input {\r\n  display: none;\r\n}\r\n\r\n.tcs-small-pane {\r\n  width: 400px;\r\n  max-width: 400px;\r\n  height: 386px;\r\n  max-height: 400px;\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.tcs-documents-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-documents-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-documents-header-text {\r\n  margin-left: 10px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.tcs-document-name-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #0081cb;\r\n}\r\n\r\n.tcs-document-comment-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 12px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #727272;\r\n}\r\n\r\n.tcs-document-modified-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n}\r\n\r\n.tcs-document-filesize-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n}\r\n\r\n\r\n.tcs-document-details-text-box {\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  padding-top: 2px;\r\n  padding-bottom: 2px;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-document-edit-buttons:hover path.svg-content {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-document-edit-icon:hover path.svg-content {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-document-detail-box {\r\n  min-height: 85px;\r\n  flex-shrink: 0;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-document-detail-box:hover {\r\n  background-color: #EEF0F7;\r\n  transition: background-color 0.5s;\r\n}\r\n\r\n.tcs-document-line {\r\n  margin-left: 20px;\r\n  padding: 0px;\r\n  margin-top: 0px;\r\n  margin-right: 20px;\r\n  margin-bottom: 0px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n\r\n.tcs-document-list {\r\n  overflow-y: auto;\r\n}\r\n\r\n",
                    "styleUrl": "./live-apps-documents.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-documents-pane\" fxFill fxLayout=\"column\">\r\n  <div *ngIf=\"showHeader\" class=\"tcs-documents-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div fxLayoutAlign=\"start center\">\r\n      <mat-icon class=\"tcs-icon tcs-icon-active tcs-collaboration-feed\" svgIcon=\"tcs-document-library\"></mat-icon>\r\n      <div class=\"tcs-documents-header-text\">{{folderDescription ? folderDescription : 'Documents'}}</div>\r\n    </div>\r\n    <mat-icon (click)=\"openDialog()\" class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\" matTooltip=\"Upload Document\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\r\n  </div>\r\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <mat-icon style=\"margin: 5px\" (click)=\"openDialog()\" class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\" matTooltip=\"Upload Document\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\r\n  </div>\r\n  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\r\n    <div class=\"tcs-document-list\" fxLayout=\"column\">\r\n      <div *ngIf=\"documents && documents.length > 0\">\r\n        <div class=\"tcs-document-detail-box tcs-document\" *ngFor=\"let document of documents | orderByDate: 'lastModifiedDate'\" fxLayout=\"column\">\r\n          <div class=\"tcs-document-box\" fxLayoutAlign=\"space-between center\" fxLayout=\"row\" fxFlex>\r\n            <div fxLayoutAlign=\"start center\">\r\n              <mat-icon class=\"tcs-icon tcs-icon-active tcs-document-type-icon\" svgIcon=\"tcs-document-{{document.fileIcon}}\"></mat-icon>\r\n            </div>\r\n            <div class=\"tcs-document-details-text-box\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\r\n                  <div class=\"tcs-document-name-text\" matTooltip=\"{{document.name}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{document.name | ellipsis: 30}}</div>\r\n                  <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxFlex>\r\n                    <div class=\"tcs-document-filesize-text\">&nbsp;({{document.fileSize}})</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"tcs-document-comment-text\" matTooltip=\"{{document.description}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{document.description | ellipsis: 50}}</div>\r\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <div class=\"tcs-document-modified-text\">{{document.lastModifiedDate | durationSince}}</div>\r\n                <div *ngIf=\"document.lastModifiedByDetails\" class=\"tcs-document-modified-text\" matTooltip=\"{{document.lastModifiedByDetails.username}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">&nbsp;by {{document.lastModifiedByDetails.username | ellipsis: 40}}</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div fxLayoutAlign=\"end center\">\r\n              <mat-icon [matMenuTriggerFor]=\"docActionMenu\" class=\"tcs-icon tcs-icon-active tcs-document-action-icon\" svgIcon=\"tcs-document-action\"></mat-icon>\r\n              <mat-menu #docActionMenu=\"matMenu\" class=\"tcs-icon tcs-icon-active tcs-document-action-icon\">\r\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"viewDocument(document)\">View</button>\r\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"downloadDocument(document)\">Download</button>\r\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"removeDocument(document)\">Delete</button>\r\n              </mat-menu>\r\n\r\n\r\n            </div>\r\n          </div>\r\n          <div class=\"tcs-document-line\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!--pre>Documents: {{documents | json }}</pre-->\r\n\r\n<!--div fxLayout=\"column\">\r\n  <div>\r\n    <h3>Upload Document</h3>\r\n    <div *ngIf=\"uploadMessage\">{{uploadMessage}}</div>\r\n    <div>\r\n      <form #fileUploadForm=\"ngForm\" (submit)=\"uploadFile()\" fxFlex fxLayout=\"column\">\r\n        <div fxLayout=\"row\">\r\n          <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\r\n          <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\r\n          <!-- below input is hidden and enabled by above button -->\r\n          <!--input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" #fileInput type=\"file\" id=\"file\">\r\n        </div>\r\n        <mat-form-field fxFlex>\r\n          <input matInput name=\"inputdata.description\" type=\"text\" placeholder=\"Comments\" [(ngModel)]=\"inputdata.description\"/>\r\n        </mat-form-field>\r\n        <button mat-raised-button style=\"max-width: 100px\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div-->\r\n\r\n"
        },
        {
            "name": "LiveAppsDocumentUploadDialogComponent",
            "id": "component-LiveAppsDocumentUploadDialogComponent-ca342d022927a06ed2f7d672d656bc28",
            "file": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-document-upload-dialog",
            "styleUrls": [
                "app-live-apps-document-upload-dialog.css"
            ],
            "styles": [],
            "templateUrl": [
                "app-live-apps-document-upload-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileevent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 154,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "description",
                    "defaultValue": "undefined",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileToUpload",
                    "defaultValue": "undefined",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadFile",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attachFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178
                },
                {
                    "name": "setFileDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport { DocumentList, Document } from '../../models/tc-document';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-documents',\r\n  templateUrl: './live-apps-documents.component.html',\r\n  styleUrls: ['./live-apps-documents.component.css']\r\n})\r\nexport class LiveAppsDocumentsComponent extends LiveAppsComponent implements OnInit {\r\n\r\n  constructor(private liveapps: LiveAppsService, private documentsService: TcDocumentService, public dialog: MatDialog) {\r\n    super();\r\n  }\r\n  @Input() sandboxId: number;\r\n  @Input() folderType: string; // 'orgFolders' or 'caseFolders'\r\n  @Input() folderId: string;   // caseRef for caseFolder\r\n  @Input() filter: string;\r\n  @Input() folderDescription: string;\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n\r\n  public errorMessage: string;\r\n  public documents: Document[];\r\n  public fileToUpload: File = undefined;\r\n  public fileDescription: string;\r\n  uploadMessage: string;\r\n\r\n  public refresh = () => {\r\n    this.listDocuments();\r\n  }\r\n\r\n  public listDocuments = () => {\r\n    this.documentsService.listDocuments(this.folderType, this.folderId, this.sandboxId, this.filter)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(documentslist => {\r\n          this.documents = documentslist.documents;\r\n        })\r\n      ).subscribe(null, error => { this.errorMessage = 'Error retrieving case states: ' + error.error.errorMsg; });\r\n    }\r\n\r\n  public uploadDocument = (doc) => {\r\n  }\r\n\r\n  public removeDocument = (doc) => {\r\n    this.documentsService.deleteDocument(this.folderType, this.folderId, doc.name, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(val => {\r\n          console.log(val);\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error removing document: ' + error.errorMsg; });\r\n  }\r\n\r\n  public viewDocument = (doc) => {\r\n    const viewDocDialogRef = this.dialog.open(LiveAppsDocumentViewerDialogComponent, {\r\n      width: '75%',\r\n      height: '75%',\r\n      data: {\r\n        doc: doc,\r\n        folderType: this.folderType,\r\n        folderId: this.folderId,\r\n        sandboxId: this.sandboxId\r\n      }\r\n    });\r\n\r\n    viewDocDialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  public downloadDocument = (doc) => {\r\n    this.documentsService.downloadDocument(this.folderType, this.folderId, doc.name, doc.artifactVersion, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(data => {\r\n          // todo: check if this works on all browsers\r\n          const downloadURL = window.URL.createObjectURL(data);\r\n          const link = document.createElement('a');\r\n          link.href = downloadURL;\r\n          link.download = doc.name;\r\n          link.click();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error downloading document: ' + error.errorMsg; });\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.fileDescription = description;\r\n  }\r\n\r\n  uploadFile(fileToUpload, description) {\r\n    this.fileToUpload = fileToUpload;\r\n    this.fileDescription = description;\r\n    if (this.fileToUpload) {\r\n      this.documentsService.uploadDocument(this.folderType, this.folderId, this.sandboxId,\r\n        this.fileToUpload, this.fileToUpload.name, this.fileDescription)\r\n        .pipe(\r\n          map(val => {\r\n            console.log(val);\r\n            this.refresh();\r\n          })\r\n        )\r\n        .subscribe(\r\n          result => {\r\n            this.fileToUpload = undefined;\r\n            this.uploadMessage = 'File uploaded';\r\n          },\r\n          error => { console.log('error'); this.errorMessage = 'Error uploading document: ' + error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(LiveAppsDocumentUploadDialogComponent, {\r\n      width: '500px',\r\n      data: {}\r\n    });\r\n\r\n    dialogRef.componentInstance.fileevent.subscribe(($e) => {\r\n      this.uploadFile($e.file, $e.description);\r\n    })\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-upload-dialog',\r\n  templateUrl: 'app-live-apps-document-upload-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-upload-dialog.css']\r\n})\r\nexport class LiveAppsDocumentUploadDialogComponent {\r\n  @Output() fileevent = new EventEmitter<any>();\r\n  public fileToUpload: File = undefined;\r\n  public description: string = undefined;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>) {}\r\n\r\n\r\n  public uploadFile = () => {\r\n    if (this.fileToUpload) {\r\n      this.fileevent.emit({ file: this.fileToUpload, description: this.description });\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.description = description;\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    // this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-viewer-dialog',\r\n  templateUrl: 'app-live-apps-document-viewer-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-viewer-dialog.css']\r\n})\r\nexport class LiveAppsDocumentViewerDialogComponent {\r\n  public doc: Document;\r\n  public folderType: string;\r\n  public folderId: string;\r\n  public sandboxId: number;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.doc = this.data.doc;\r\n    this.folderType = this.data.folderType;\r\n    this.folderId = this.data.folderId;\r\n    this.sandboxId = this.data.sandboxId;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-hidden-input {\r\n  display: none;\r\n}\r\n",
                    "styleUrl": "app-live-apps-document-upload-dialog.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>"
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>Upload New File</h1>\r\n<div mat-dialog-content>\r\n  <form #fileUploadForm=\"ngForm\" fxFlex fxLayout=\"column\">\r\n    <div fxLayout=\"row\">\r\n      <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\r\n      <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\r\n      <!-- below input is hidden and enabled by above button -->\r\n      <input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" #fileInput type=\"file\" id=\"file\">\r\n    </div>\r\n    <mat-form-field fxFlex>\r\n      <input matInput name=\"description\" type=\"text\" placeholder=\"Comments\" [(ngModel)]=\"description\"/>\r\n    </mat-form-field>\r\n\r\n  </form>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"uploadFile()\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\r\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsDocumentViewerComponent",
            "id": "component-LiveAppsDocumentViewerComponent-75645c5ae852f4c62d5df3377be3d96f",
            "file": "src/lib/components/live-apps-document-viewer/live-apps-document-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-document-viewer",
            "styleUrls": [
                "./live-apps-document-viewer.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-document-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "document",
                    "line": 14,
                    "type": "Document"
                },
                {
                    "name": "folderId",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "folderType",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sanitizedResourceUrl",
                    "type": "SafeResourceUrl",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\r\nimport {Document} from '../../models/tc-document';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\nimport {TcCoreCommonFunctions} from '@tibco-tcstk/tc-core-lib';\r\nimport {Location} from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-viewer',\r\n  templateUrl: './live-apps-document-viewer.component.html',\r\n  styleUrls: ['./live-apps-document-viewer.component.css']\r\n})\r\nexport class LiveAppsDocumentViewerComponent implements OnInit {\r\n  @Input() document: Document;\r\n  @Input() folderType: string;\r\n  @Input() folderId: string;\r\n  @Input() sandboxId: number;\r\n\r\n  public sanitizedResourceUrl: SafeResourceUrl;\r\n\r\n  constructor(private sanitizer: DomSanitizer, private documentsService: TcDocumentService, private location: Location) { }\r\n\r\n  ngOnInit() {\r\n    const preparedUrl = TcCoreCommonFunctions.prepareUrlForNonStaticResource(this.location, this.documentsService.getUrlForDocument(this.folderType, this.folderId, this.document.name, this.document.artifactVersion, this.sandboxId));\r\n    this.sanitizedResourceUrl = this.sanitizer.bypassSecurityTrustResourceUrl(preparedUrl);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-document-viewer.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "documentsService",
                        "type": "TcDocumentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFill>\r\n  <iframe name=\"DocViewerFrame\" class=\"md-dialog-content\" fxFill [src]=\"sanitizedResourceUrl\">\r\n  </iframe>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsDocumentViewerDialogComponent",
            "id": "component-LiveAppsDocumentViewerDialogComponent-ca342d022927a06ed2f7d672d656bc28",
            "file": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-document-viewer-dialog",
            "styleUrls": [
                "app-live-apps-document-viewer-dialog.css"
            ],
            "styles": [],
            "templateUrl": [
                "app-live-apps-document-viewer-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 197,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 196,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doc",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 190,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "folderId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 192,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "folderType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 191,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 193,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport { DocumentList, Document } from '../../models/tc-document';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-documents',\r\n  templateUrl: './live-apps-documents.component.html',\r\n  styleUrls: ['./live-apps-documents.component.css']\r\n})\r\nexport class LiveAppsDocumentsComponent extends LiveAppsComponent implements OnInit {\r\n\r\n  constructor(private liveapps: LiveAppsService, private documentsService: TcDocumentService, public dialog: MatDialog) {\r\n    super();\r\n  }\r\n  @Input() sandboxId: number;\r\n  @Input() folderType: string; // 'orgFolders' or 'caseFolders'\r\n  @Input() folderId: string;   // caseRef for caseFolder\r\n  @Input() filter: string;\r\n  @Input() folderDescription: string;\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n\r\n  public errorMessage: string;\r\n  public documents: Document[];\r\n  public fileToUpload: File = undefined;\r\n  public fileDescription: string;\r\n  uploadMessage: string;\r\n\r\n  public refresh = () => {\r\n    this.listDocuments();\r\n  }\r\n\r\n  public listDocuments = () => {\r\n    this.documentsService.listDocuments(this.folderType, this.folderId, this.sandboxId, this.filter)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(documentslist => {\r\n          this.documents = documentslist.documents;\r\n        })\r\n      ).subscribe(null, error => { this.errorMessage = 'Error retrieving case states: ' + error.error.errorMsg; });\r\n    }\r\n\r\n  public uploadDocument = (doc) => {\r\n  }\r\n\r\n  public removeDocument = (doc) => {\r\n    this.documentsService.deleteDocument(this.folderType, this.folderId, doc.name, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(val => {\r\n          console.log(val);\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error removing document: ' + error.errorMsg; });\r\n  }\r\n\r\n  public viewDocument = (doc) => {\r\n    const viewDocDialogRef = this.dialog.open(LiveAppsDocumentViewerDialogComponent, {\r\n      width: '75%',\r\n      height: '75%',\r\n      data: {\r\n        doc: doc,\r\n        folderType: this.folderType,\r\n        folderId: this.folderId,\r\n        sandboxId: this.sandboxId\r\n      }\r\n    });\r\n\r\n    viewDocDialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  public downloadDocument = (doc) => {\r\n    this.documentsService.downloadDocument(this.folderType, this.folderId, doc.name, doc.artifactVersion, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(data => {\r\n          // todo: check if this works on all browsers\r\n          const downloadURL = window.URL.createObjectURL(data);\r\n          const link = document.createElement('a');\r\n          link.href = downloadURL;\r\n          link.download = doc.name;\r\n          link.click();\r\n        })\r\n      )\r\n      .subscribe(\r\n        null, error => { this.errorMessage = 'Error downloading document: ' + error.errorMsg; });\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.fileDescription = description;\r\n  }\r\n\r\n  uploadFile(fileToUpload, description) {\r\n    this.fileToUpload = fileToUpload;\r\n    this.fileDescription = description;\r\n    if (this.fileToUpload) {\r\n      this.documentsService.uploadDocument(this.folderType, this.folderId, this.sandboxId,\r\n        this.fileToUpload, this.fileToUpload.name, this.fileDescription)\r\n        .pipe(\r\n          map(val => {\r\n            console.log(val);\r\n            this.refresh();\r\n          })\r\n        )\r\n        .subscribe(\r\n          result => {\r\n            this.fileToUpload = undefined;\r\n            this.uploadMessage = 'File uploaded';\r\n          },\r\n          error => { console.log('error'); this.errorMessage = 'Error uploading document: ' + error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(LiveAppsDocumentUploadDialogComponent, {\r\n      width: '500px',\r\n      data: {}\r\n    });\r\n\r\n    dialogRef.componentInstance.fileevent.subscribe(($e) => {\r\n      this.uploadFile($e.file, $e.description);\r\n    })\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-upload-dialog',\r\n  templateUrl: 'app-live-apps-document-upload-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-upload-dialog.css']\r\n})\r\nexport class LiveAppsDocumentUploadDialogComponent {\r\n  @Output() fileevent = new EventEmitter<any>();\r\n  public fileToUpload: File = undefined;\r\n  public description: string = undefined;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>) {}\r\n\r\n\r\n  public uploadFile = () => {\r\n    if (this.fileToUpload) {\r\n      this.fileevent.emit({ file: this.fileToUpload, description: this.description });\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.description = description;\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    // this.uploadMessage = '';\r\n    this.fileToUpload = files.item(0);\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-document-viewer-dialog',\r\n  templateUrl: 'app-live-apps-document-viewer-dialog.html',\r\n  styleUrls: [ 'app-live-apps-document-viewer-dialog.css']\r\n})\r\nexport class LiveAppsDocumentViewerDialogComponent {\r\n  public doc: Document;\r\n  public folderType: string;\r\n  public folderId: string;\r\n  public sandboxId: number;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.doc = this.data.doc;\r\n    this.folderType = this.data.folderType;\r\n    this.folderId = this.data.folderId;\r\n    this.sandboxId = this.data.sandboxId;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-hidden-input {\r\n  display: none;\r\n}\r\n",
                    "styleUrl": "app-live-apps-document-viewer-dialog.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "any"
                    }
                ],
                "line": 193,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsDocumentUploadDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div fxFill fxLayout=\"column\">\r\n<h1 mat-dialog-title>View Document</h1>\r\n<div mat-dialog-content fxFlex=\"grow\" style=\"overflow: hidden\">\r\n  <tcla-live-apps-document-viewer [document]=\"doc\" [folderId]=\"folderId\" [folderType]=\"folderType\" [sandboxId]=\"sandboxId\"></tcla-live-apps-document-viewer>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Close</button>\r\n</div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsFavoriteCasesComponent",
            "id": "component-LiveAppsFavoriteCasesComponent-646c5ecc82cd4ce521767fbaa24d34fc",
            "file": "src/lib/components/live-apps-favorite-cases/live-apps-favorite-cases.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-favorite-cases",
            "styleUrls": [
                "./live-apps-favorite-cases.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-favorite-cases.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayType",
                    "defaultValue": "this.displayType ? this.displayType : 'miniCard'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "showHeader",
                    "defaultValue": "this.showHeader ? this.showHeader : true",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "uiAppId",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickCase",
                    "defaultValue": "new EventEmitter<CaseRoute>()",
                    "line": 18,
                    "type": "EventEmitter<CaseRoute>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clearFavoriteCases",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "favoriteCases",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleDeleted",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {CaseRoute} from '../../models/liveappsdata';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-favorite-cases',\r\n  templateUrl: './live-apps-favorite-cases.component.html',\r\n  styleUrls: ['./live-apps-favorite-cases.component.css']\r\n})\r\nexport class LiveAppsFavoriteCasesComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() displayType: string = this.displayType ? this.displayType : 'miniCard'; // miniCard, card, list\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n  @Output() clickCase: EventEmitter<CaseRoute> = new EventEmitter<CaseRoute>();\r\n\r\n  public favoriteCases: string[];\r\n  public errorMessage: string;\r\n\r\n  public clickCaseAction = (caseRoute: CaseRoute) => {\r\n    this.clickCase.emit(caseRoute);\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.favoriteCases = [];\r\n    this.liveapps.getFavoriteCases(this.uiAppId, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(favoriteCases => {\r\n          this.favoriteCases = favoriteCases.caseRefs || [];\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving favorite cases: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  public clearFavoriteCases = () => {\r\n    this.liveapps.setFavoriteCase('-1', this.uiAppId, this.sandboxId);\r\n    this.favoriteCases = [];\r\n  }\r\n\r\n  public handleDeleted = (caseRef: string) => {\r\n    this.favoriteCases.splice(this.favoriteCases.indexOf(caseRef), 1);\r\n    this.liveapps.setFavoriteCase(caseRef, this.uiAppId, this.sandboxId);\r\n  }\r\n\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-favorites-box {\r\n  /*width: 661px;*/\r\n  /*height: 366px;*/\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 8px 0 #dedede;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-favorites-header {\r\n  min-height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-favorites-header-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  text-align: left;\r\n  color: black;\r\n  margin-left: 10px;\r\n}\r\n\r\n.tcs-case-favorites-flow-list {\r\n  margin: 24px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.tcs-case-favorite-item-box {\r\n  margin-top: 3px;\r\n  margin-bottom: 10px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  max-width: 297px;\r\n}\r\n\r\n.tcs-icon.tcs-icon-active:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content {\r\n  fill: #0081cb;\r\n}\r\n\r\n.tcs-case-summary-line {\r\n  padding: 0px;\r\n  margin-top: 4px;\r\n  margin-bottom: 0px;\r\n  margin-left:5px;\r\n  margin-right: 5px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n",
                    "styleUrl": "./live-apps-favorite-cases.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-case-favorites-box\" fxLayout=\"column\" fxFill>\r\n    <div *ngIf=\"showHeader\" class=\"tcs-case-favorites-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <div fxLayoutAlign=\"start center\">\r\n        <mat-icon class=\"tcs-icon tcs-favorites-icon\" svgIcon=\"tcs-favorites-icon\"></mat-icon>\r\n        <div class=\"tcs-case-favorites-header-text\">Favorites</div>\r\n      </div>\r\n      <mat-icon (click)=\"clearFavoriteCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-favorite-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Favorites\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\r\n    </div>\r\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <mat-icon style=\"margin: 5px\" (click)=\"clearFavoriteCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-favorite-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Favorites\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\r\n  </div>\r\n    <div class=\"tcs-case-favorites-flow-list\" fxLayout=\"column\" fxLayout=\"row wrap\">\r\n      <div class=\"tcs-case-favorite-item-box\" *ngFor=\"let case of favoriteCases\" fxFlex>\r\n        <tcla-live-apps-case-summary [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseReference]=\"case\" (clickCase)=\"clickCaseAction($event)\" (deleted)=\"handleDeleted($event)\"></tcla-live-apps-case-summary>\r\n        <div class=\"tcs-case-summary-line\"></div>\r\n      </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsHomeCockpitComponent",
            "id": "component-LiveAppsHomeCockpitComponent-6f5d4843dca31843ef274a50c59812b1",
            "file": "src/lib/components/live-apps-home-cockpit/live-apps-home-cockpit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-home-cockpit",
            "styleUrls": [
                "./live-apps-home-cockpit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-home-cockpit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 22
                },
                {
                    "name": "email",
                    "line": 26
                },
                {
                    "name": "roles",
                    "line": 28,
                    "type": "Roles"
                },
                {
                    "name": "sandboxId",
                    "line": 23
                },
                {
                    "name": "title",
                    "line": 27
                },
                {
                    "name": "uiAppId",
                    "line": 21
                },
                {
                    "name": "userId",
                    "line": 25
                },
                {
                    "name": "userName",
                    "line": 24
                }
            ],
            "outputsClass": [
                {
                    "name": "routeAction",
                    "defaultValue": "new EventEmitter<RouteAction>()",
                    "line": 29,
                    "type": "EventEmitter<RouteAction>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "collaborationComponent",
                    "type": "LiveAppsNotesComponent",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsNotesComponent"
                        }
                    ]
                },
                {
                    "name": "createToolbarButtons",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "documentsComponent",
                    "type": "LiveAppsDocumentsComponent",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsDocumentsComponent"
                        }
                    ]
                },
                {
                    "name": "favoritesComponent",
                    "type": "LiveAppsFavoriteCasesComponent",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsFavoriteCasesComponent"
                        }
                    ]
                },
                {
                    "name": "handleCreatorAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleToolbarButtonEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openCreatorDialog",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "recentsComponent",
                    "type": "LiveAppsRecentCasesComponent",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsRecentCasesComponent"
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchComponent",
                    "type": "LiveAppsSearchWidgetComponent",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsSearchWidgetComponent"
                        }
                    ]
                },
                {
                    "name": "toolbarButtons",
                    "type": "ToolbarButton[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Inject, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {CaseRoute, CaseType} from '../../models/liveappsdata';\r\nimport {ToolbarButton, TcButtonsHelperService, RouteAction} from '@tibco-tcstk/tc-core-lib';\r\nimport {LiveAppsFavoriteCasesComponent} from '../live-apps-favorite-cases/live-apps-favorite-cases.component';\r\nimport {LiveAppsRecentCasesComponent} from '../live-apps-recent-cases/live-apps-recent-cases.component';\r\nimport {LiveAppsSearchWidgetComponent} from '../live-apps-search-widget/live-apps-search-widget.component';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsCreatorDialogComponent} from '../live-apps-creator-dialog/live-apps-creator-dialog.component';\r\nimport {CaseCreatorSelectionContext} from '../../models/tc-case-creator';\r\nimport {LiveAppsNotesComponent} from '../live-apps-notes/live-apps-notes.component';\r\nimport {LiveAppsDocumentsComponent} from '../live-apps-documents/live-apps-documents.component';\r\nimport {TcRolesService} from '../../services/tc-roles-service.ts.service';\r\nimport {Roles} from '../../models/tc-groups-data';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-home-cockpit',\r\n  templateUrl: './live-apps-home-cockpit.component.html',\r\n  styleUrls: ['./live-apps-home-cockpit.component.css']\r\n})\r\nexport class LiveAppsHomeCockpitComponent implements OnInit {\r\n  @Input() uiAppId;\r\n  @Input() appIds;\r\n  @Input() sandboxId;\r\n  @Input() userName;\r\n  @Input() userId;\r\n  @Input() email;\r\n  @Input() title;\r\n  @Input() roles: Roles;\r\n  @Output() routeAction: EventEmitter<RouteAction> = new EventEmitter<RouteAction>();\r\n\r\n  @ViewChild(LiveAppsFavoriteCasesComponent) favoritesComponent: LiveAppsFavoriteCasesComponent;\r\n  @ViewChild(LiveAppsRecentCasesComponent) recentsComponent: LiveAppsRecentCasesComponent;\r\n  @ViewChild(LiveAppsSearchWidgetComponent) searchComponent: LiveAppsSearchWidgetComponent;\r\n  @ViewChild(LiveAppsNotesComponent) collaborationComponent: LiveAppsNotesComponent;\r\n  @ViewChild(LiveAppsDocumentsComponent) documentsComponent: LiveAppsDocumentsComponent;\r\n\r\n  public toolbarButtons: ToolbarButton[];\r\n\r\n  public clickCaseAction = (caseRoute: CaseRoute) => {\r\n    // case clicked - tell parent (will pass caseRef and appId)\r\n    this.routeAction.emit(new RouteAction('caseClicked', caseRoute));\r\n  }\r\n\r\n  constructor(protected buttonsHelper: TcButtonsHelperService, public dialog: MatDialog, protected rolesService: TcRolesService) { }\r\n\r\n  protected createToolbarButtons = (): ToolbarButton[] => {\r\n    // you can use the rolesService to either disable or hide the button as required - it returns true if the user has the roleId specified\r\n    // const configButton = this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', true, this.rolesService.checkRole('Partner Portal Configurator', this.roles));\r\n    const configButton = this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', this.rolesService.checkRole('Partner Portal Configurator', this.roles), true);\r\n    const refreshButton = this.buttonsHelper.createButton('refresh', 'tcs-refresh-icon', true, 'Refresh', true, true);\r\n    const buttons = [ configButton, refreshButton ];\r\n    return buttons;\r\n  }\r\n\r\n  public handleToolbarButtonEvent = (buttonId: string) => {\r\n    if (buttonId === 'config') {\r\n      this.routeAction.emit(new RouteAction('configClicked', null));\r\n    }\r\n    if (buttonId === 'refresh') {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  public handleCreatorAppSelection = (application: CaseType) => {\r\n    const EXAMPLE_INITIAL_DATA = {\r\n      PartnerRequest: {\r\n        Customer_v1: {\r\n          CustomerReference_v1: 'CST-1111',\r\n          Name_v1: 'Roger Willis',\r\n        },\r\n        RequestDescription_v1: 'Where is my order?',\r\n        RequestDetails_v1: {\r\n          OrderReference_v1: 'ORD-55333',\r\n          PartReference_v1: 'PRT-102020',\r\n        },\r\n        RequestType_v1: 'Packaging Supplies'\r\n      }\r\n    }\r\n    // this.openCreatorDialog(application, EXAMPLE_INITIAL_DATA, this.sandboxId);\r\n    this.openCreatorDialog(application, undefined, this.sandboxId);\r\n  }\r\n\r\n  openCreatorDialog = (application: CaseType, initialData, sandboxId) => {\r\n    const dialogRef = this.dialog.open(LiveAppsCreatorDialogComponent, {\r\n      width: '60%',\r\n      height: '80%',\r\n      maxWidth: '100vw',\r\n      maxHeight: '100vh',\r\n      panelClass: 'tcs-style-dialog',\r\n      data: new CaseCreatorSelectionContext(application, initialData, sandboxId)\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.routeAction.emit(new RouteAction('caseClicked', result));\r\n      }\r\n    });\r\n  }\r\n\r\n  public refresh = () => {\r\n    if (this.favoritesComponent) {\r\n      this.favoritesComponent.refresh();\r\n    }\r\n    if (this.recentsComponent) {\r\n      this.recentsComponent.refresh();\r\n    }\r\n    if (this.searchComponent) {\r\n      this.searchComponent.refresh();\r\n    }\r\n    if (this.collaborationComponent) {\r\n      this.collaborationComponent.refresh();\r\n    }\r\n    if (this.documentsComponent) {\r\n      this.documentsComponent.refresh();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.toolbarButtons = this.createToolbarButtons();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tc-home-welcome-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 30px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  color: #212121;\r\n}\r\n\r\n.tcs-home-content {\r\n  overflow: auto;\r\n}\r\n\r\n",
                    "styleUrl": "./live-apps-home-cockpit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxFlex>\r\n  <div>\r\n    <tc-tibco-cloud-menu-bar [toolbarButtons]=\"toolbarButtons\" [headerText]=\"title\" (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\">\r\n        <tcla-live-apps-application-create-button style=\"margin-right: 20px; margin-left: 20px\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (selection)=\"handleCreatorAppSelection($event)\"></tcla-live-apps-application-create-button>\r\n    </tc-tibco-cloud-menu-bar>\r\n  </div>\r\n\r\n  <div class=\"tcs-home-content\" fxLayout=\"column\" fxFlex=\"grow\" fxLayoutAlign=\"start stretch\" style=\"padding-left: 20px; padding-right: 20px; margin-top: 10px;\">\r\n\r\n    <div class=\"searchCasesWidget\">\r\n      <tcla-live-apps-search-widget [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" (caseSelected)=\"clickCaseAction($event)\"></tcla-live-apps-search-widget>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutGap=\"20px\" style=\"margin-bottom: 20px; min-height: 367px\">\r\n      <div class=\"favoriteCasesWidget\" fxFlex>\r\n        <tcla-live-apps-favorite-cases class=\"padded-widget\" [showHeader]=\"true\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-favorite-cases>\r\n      </div>\r\n\r\n      <div class=\"recentCasesWidget\" fxFlex>\r\n        <tcla-live-apps-recent-cases class=\"padded-widget\" [showHeader]=\"true\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-recent-cases>\r\n      </div>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutGap=\"20px\" style=\"margin-bottom: 20px; min-height: 367px\">\r\n      <div fxFlex class=\"collaborationWidget\">\r\n        <tcla-live-apps-notes [userId]=\"userId\" [showHeader]=\"true\" [relatedItemId]=\"uiAppId\" [relatedItemType]=\"'CASE_APP'\"></tcla-live-apps-notes>\r\n      </div>\r\n\r\n      <div fxFlex class=\"documentWidget\">\r\n        <tcla-live-apps-documents [showHeader]=\"true\" [sandboxId]=\"sandboxId\" [folderId]=\"uiAppId + '_Docs'\" [folderType]=\"'orgFolders'\" [folderDescription]=\"'Document Library'\"></tcla-live-apps-documents>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "LiveAppsLandingPageComponent",
            "id": "component-LiveAppsLandingPageComponent-ebc61752d9c22c1dd8f06b8e73f7c631",
            "file": "src/lib/components/live-apps-landing-page/live-apps-landing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-landing-page",
            "styleUrls": [
                "./live-apps-landing-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-landing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "highlights",
                    "type": "LandingPageItemConfig[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "moveHome",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "navigateURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { TcCoreCommonFunctions, TcGeneralLandingPageConfigService, LandingPageItemConfig } from '@tibco-tcstk/tc-core-lib';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { TcRolesService } from '../../services/tc-roles-service.ts.service';\r\n\r\n@Component({\r\n    selector: 'tcla-live-apps-landing-page',\r\n    templateUrl: './live-apps-landing-page.component.html',\r\n    styleUrls: ['./live-apps-landing-page.component.css']\r\n})\r\nexport class LiveAppsLandingPageComponent implements OnInit {\r\n\r\n    public title: string;\r\n    public subtitle: string;\r\n    public backgroundImage: string;\r\n    public highlights: LandingPageItemConfig[];\r\n    \r\n    private navigateURL: string;\r\n\r\n    constructor(\r\n        private location: Location,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private landingPageService: TcGeneralLandingPageConfigService,\r\n        private rolesService: TcRolesService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        const uiAppId = this.route.snapshot.data.generalConfigHolder.uiAppId;\r\n        const rolesIds = this.route.snapshot.data.rolesHolder.roles.filter(element => !element.configuration).map(a => a.id);\r\n\r\n        this.landingPageService.getLandingPageForRoles(rolesIds, uiAppId).pipe(\r\n            map(result => {\r\n                this.title = result.title;\r\n                this.subtitle = result.subtitle;\r\n                this.backgroundImage = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, result.backgroundURL);\r\n\r\n                this.highlights = new Array();\r\n                this.highlights.push(new LandingPageItemConfig().deserialize({\r\n                    title: result.highlights[0].title,\r\n                    content: result.highlights[0].content,\r\n                    iconURL: TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, result.highlights[0].iconURL)\r\n                }));\r\n\r\n                this.highlights.push(new LandingPageItemConfig().deserialize({\r\n                    title: result.highlights[1].title,\r\n                    content: result.highlights[1].content,\r\n                    iconURL: TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, result.highlights[1].iconURL)\r\n                }));\r\n\r\n                this.highlights.push(new LandingPageItemConfig().deserialize({\r\n                    title: result.highlights[2].title,\r\n                    content: result.highlights[2].content,\r\n                    iconURL: TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, result.highlights[2].iconURL)\r\n                }));\r\n\r\n                this.navigateURL = result.homeRoute;\r\n\r\n                // Set the role\r\n                const workingRoleId = result.roles.filter(element => rolesIds.some(r => element.indexOf(r) >= 0));\r\n                const workingRole = this.route.snapshot.data.generalConfigHolder.roles.filter(element => element.id === workingRoleId[0])[0];\r\n                this.rolesService.setCurrentRole(workingRole);\r\n\r\n            })\r\n        ).subscribe();\r\n\r\n    }\r\n\r\n    public moveHome = (): void => {\r\n        this.router.navigate([this.navigateURL]);\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-landing-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "landingPageService",
                        "type": "TcGeneralLandingPageConfigService"
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "landingPageService",
                        "type": "TcGeneralLandingPageConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rolesService",
                        "type": "TcRolesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<tc-tibco-cloud-splash-screen fxFill\r\n    [title]=\"title\" \r\n    [subTitle]=\"subtitle\" \r\n    [backGroundImage]=\"backgroundImage\"\r\n    [highlights]=\"highlights\"\r\n    (getStartedEvent)=\"moveHome()\">\r\n</tc-tibco-cloud-splash-screen>"
        },
        {
            "name": "LiveAppsLoginComponent",
            "id": "component-LiveAppsLoginComponent-dd93d7b2254ea004b16bb037875a163e",
            "file": "src/lib/components/live-apps-login/live-apps-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-login",
            "styleUrls": [
                "./live-apps-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loginPrefill",
                    "line": 20,
                    "type": "LoginPrefill"
                }
            ],
            "outputsClass": [
                {
                    "name": "loginContext",
                    "defaultValue": "new EventEmitter<LoginContext>()",
                    "line": 19,
                    "type": "EventEmitter<LoginContext>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accessToken",
                    "type": "AccessToken",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "authinfo",
                    "type": "AuthInfo",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "handleLoggedIn",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loggedIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "subRequired",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subscriptions",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {LoginContext, UserInfo} from '../../models/liveappsdata';\r\nimport {AccessToken, AuthInfo, LoginPrefill, UiAppConfig} from '@tibco-tcstk/tc-core-lib';\r\nimport {Log} from '@angular/core/testing/src/logger';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-login',\r\n  templateUrl: './live-apps-login.component.html',\r\n  styleUrls: ['./live-apps-login.component.css']\r\n})\r\nexport class LiveAppsLoginComponent extends LiveAppsComponent {\r\n\r\n  @Output() loginContext: EventEmitter<LoginContext> = new EventEmitter<LoginContext>();\r\n  @Input() loginPrefill: LoginPrefill;\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  authinfo: AuthInfo;\r\n  loggedIn = false;\r\n  subRequired = false;\r\n  subscriptions: any;\r\n  accessToken: AccessToken;\r\n  errorMessage: string;\r\n\r\n  // run when logged in\r\n  handleLoggedIn = (loginInfo) => {\r\n    this.authinfo = loginInfo.authInfo;\r\n    this.accessToken = loginInfo.accessToken;\r\n    this.subRequired = false;\r\n    this.loggedIn = true;\r\n    sessionStorage.setItem('loggedIn', Date.now().toString());\r\n\r\n    // emit useful details about the login and session/claims\r\n    this.loginContext.emit(new LoginContext().deserialize(\r\n        {\r\n          authInfo: this.authinfo,\r\n          accessToken: this.accessToken\r\n        }));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "templateData": "<!-- If the user is not logged in we just show the login components -->\r\n<tc-tibco-cloud-login  *ngIf=\"!loggedIn && !subRequired\" (loggedIn)=\"handleLoggedIn($event)\"  [loginPrefill]=\"loginPrefill\"></tc-tibco-cloud-login>\r\n\r\n\r\n\r\n<!-- NOT USED - deprecated by using v3 of api - clientId used to identify subscription -->\r\n<!-- This component is required if user is in multiple subscriptions - they must select a subscription to complete login -->\r\n<!--tc-tibco-cloud-multiple-subscription *ngIf=\"subRequired && !loggedIn\" [subscriptions]=\"subscriptions\" [token]=\"accessToken\" (subscriptionSelection)=\"handleLoggedIn($event)\"></tc-tibco-cloud-multiple-subscription-->\r\n"
        },
        {
            "name": "LiveAppsMilestoneComponent",
            "id": "component-LiveAppsMilestoneComponent-5f739428bd9613de7785ae10d02a332a",
            "file": "src/lib/components/live-apps-milestone/live-apps-milestone.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-milestone",
            "styleUrls": [
                "./live-apps-milestone.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-milestone.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isFirst",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "isLast",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "isTerminal",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "phase",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "previousPhase",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "status",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "milestoneSvg",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sectionSVG",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {SafeHtml} from '@angular/platform-browser';\r\nimport {TcCaseStatesService} from '../../services/tc-case-states.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-milestone',\r\n  templateUrl: './live-apps-milestone.component.html',\r\n  styleUrls: ['./live-apps-milestone.component.css']\r\n})\r\nexport class LiveAppsMilestoneComponent implements OnInit {\r\n  @Input() isFirst: boolean;\r\n  @Input() isLast: boolean;\r\n  @Input() status: string;\r\n  @Input() label: string;\r\n  @Input() isTerminal: boolean;\r\n  @Input() phase: string;\r\n  @Input() previousPhase: string;\r\n\r\n  public sectionSVG: SafeHtml;\r\n  public milestoneSvg: string;\r\n\r\n  constructor(private caseStatesService: TcCaseStatesService) { }\r\n\r\n  ngOnInit() {\r\n    // work out which section the MS trailer is (first/middle/end)\r\n    const section = this.isFirst ? 'first' : (this.isLast ? 'end' : 'middle');\r\n    // construct the icon filename\r\n    const svgFileName = section + '-section-' + this.status + '.svg';\r\n    // work out correct class\r\n    let bgClass;\r\n    if (this.status === 'completed' && this.isTerminal) {\r\n      bgClass = 'tc-ms-' + 'completed-terminal' + '-bg';\r\n    } else {\r\n      bgClass = 'tc-ms-' + this.status + '-bg';\r\n    }\r\n    this.milestoneSvg = 'tcs-milestone-' + this.status + (this.isTerminal ? '-terminal' : '');\r\n\r\n    this.sectionSVG = this.caseStatesService.getMilestoneSectionSvg(this.label, 'tc-ms-label', bgClass, svgFileName);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tc-ms-circle-icon {\r\n  height: 36px;\r\n  width: 36px;\r\n  margin-right: -8px;\r\n  margin-left: -8px;\r\n}\r\n\r\n.tcs-milestone-block {\r\n  margin-bottom: 1px;\r\n  margin-top: 1px;\r\n}\r\n",
                    "styleUrl": "./live-apps-milestone.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "caseStatesService",
                        "type": "TcCaseStatesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-milestone-block\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\r\n  <mat-icon class=\"tc-ms-circle-icon\" [svgIcon]=\"milestoneSvg\"></mat-icon>\r\n  <div [innerHtml]=\"sectionSVG\" fxLayoutAlign=\"start center\"></div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsNotesComponent",
            "id": "component-LiveAppsNotesComponent-e7c6aade0c529863fb76722954de1b3d",
            "file": "src/lib/components/live-apps-notes/live-apps-notes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-notes",
            "styleUrls": [
                "./live-apps-notes.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-notes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "relatedItemId",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "relatedItemType",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "showHeader",
                    "defaultValue": "this.showHeader ? this.showHeader : true",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "userId",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createReply",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createThread",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "createToolbarButtons",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "deleteNote",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 222,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "delNoteId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "editNote",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 203,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "end",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getBatch",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getNotifications",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleToolbarButtonEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newNote",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "newNoteId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notes",
                    "type": "Note[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "recreateButtonsForNotifications",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setupNotificationButtons",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "skip",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscribe",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 175,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscribed",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "threads",
                    "type": "ThreadList",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggleNewReply",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggleReplies",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toolbarButtons",
                    "defaultValue": "[]",
                    "type": "ToolbarButton[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "top",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 190,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateButtonDef",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateNote",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Note, NoteThread, NotificationList, ThreadList} from '../../models/liveappsdata';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {ToolbarButton} from '@tibco-tcstk/tc-core-lib';\r\nimport {TcButtonsHelperService} from '@tibco-tcstk/tc-core-lib';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-notes',\r\n  templateUrl: './live-apps-notes.component.html',\r\n  styleUrls: ['./live-apps-notes.component.css']\r\n})\r\n\r\nexport class LiveAppsNotesComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() relatedItemType: string; // use 'CASE_APP' to share notes with case manager\r\n  @Input() relatedItemId: string; // 'caseRef' for case related\r\n  @Input() userId: string;\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n\r\n  public notes: Note[];\r\n  public errorMessage: string;\r\n  public newNote: any = {};\r\n  public newNoteId: number;\r\n  public delNoteId: number;\r\n  public threads: ThreadList;\r\n  public subscribed: Boolean;\r\n  public skip = 0;\r\n  public top = 5;\r\n  public end = false;\r\n  public toolbarButtons: ToolbarButton[] = [];\r\n\r\n  constructor(private liveapps: LiveAppsService, private buttonsHelper: TcButtonsHelperService) {\r\n    super();\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.skip = 0;\r\n    this.top = 5;\r\n    this.end = false;\r\n    this.threads.threads.length = 0;\r\n    this.getBatch();\r\n    this.getNotifications();\r\n  }\r\n\r\n  public getBatch = () => {\r\n    if (!this.end) {\r\n      this.liveapps.getThreads(this.relatedItemType, this.relatedItemId, this.skip, this.top)\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(threadList => {\r\n            if (!this.threads) {\r\n              this.threads = threadList;\r\n            } else {\r\n              // this will strip any duplicates that may have been retrieved due to fast scrolling\r\n              const filteredEvents = threadList.threads.filter(x => this.threads.threads.every(y => y.note.id !== x.note.id));\r\n              this.threads.threads = this.threads.threads.concat(filteredEvents);\r\n            }\r\n            if (threadList.threads.length < this.top) {\r\n              this.end = true;\r\n            } else {\r\n              this.skip = this.skip + threadList.threads.length - 1;\r\n            }\r\n          })\r\n        ).subscribe(null, error => {\r\n        this.errorMessage = 'Error retrieving notes: ' + error.error.errorMsg;\r\n      });\r\n    }\r\n  }\r\n\r\n  public toggleReplies = (thread) => {\r\n    thread.showReplies = !thread.showReplies;\r\n  }\r\n\r\n  public toggleNewReply = (thread) => {\r\n    if (!thread.newReply) {\r\n      thread.newReply = {};\r\n    }\r\n    if (thread.showReplies && !thread.showNewReply) {\r\n      thread.newReply = {};\r\n      thread.showNewReply = true;\r\n    } else {\r\n      thread.showNewReply = !thread.showNewReply;\r\n      thread.showReplies = !thread.showReplies;\r\n    }\r\n\r\n  }\r\n\r\n  public createReply = (thread, replyText) => {\r\n    this.liveapps.createReplyNote(thread.note, replyText, thread.note.id)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          this.newNoteId = result;\r\n          thread.newReply.text = undefined;\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  public createThread = (noteText) => {\r\n    if (noteText !== undefined) {\r\n      this.liveapps.createNote(this.relatedItemType, 'RT_CASE', this.relatedItemId, 'comments update', '', '', noteText)\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(result => {\r\n            this.newNoteId = result;\r\n            this.newNote.text = undefined;\r\n            this.refresh();\r\n          })\r\n        )\r\n        .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n    }\r\n  }\r\n\r\n\r\n  protected createToolbarButtons = (subscribed): ToolbarButton[] => {\r\n    const subscribeButton: ToolbarButton = this.buttonsHelper.createButton(\r\n      'subscribe', 'tcs-collaboration-unsubscribed', true, 'Enable Notifications', !subscribed, !subscribed);\r\n    const unSubscribeButton: ToolbarButton = this.buttonsHelper.createButton(\r\n      'unsubscribe', 'tcs-collaboration-subscribed', true, 'Disable Notifications', subscribed, subscribed);\r\n    const buttons = [ subscribeButton, unSubscribeButton ];\r\n    return buttons;\r\n  }\r\n\r\n  public setupNotificationButtons = (subscribed: boolean) => {\r\n    const buttons: ToolbarButton[] = this.createToolbarButtons(subscribed);\r\n    this.buttonsHelper.updateButtons(buttons, this.toolbarButtons);\r\n  }\r\n\r\n  public updateButtonDef = (updatedToolbarButtons: ToolbarButton[]) => {\r\n    updatedToolbarButtons.forEach( updatedButton => {\r\n      const idx = this.toolbarButtons.findIndex(item => item.id === updatedButton.id);\r\n      this.toolbarButtons[idx] = updatedButton;\r\n    });\r\n  }\r\n\r\n  public handleToolbarButtonEvent = (id) => {\r\n    if (id === 'subscribe') {\r\n      this.subscribe();\r\n    } else if (id === 'unsubscribe') {\r\n      this.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public recreateButtonsForNotifications = (subscribed) => {\r\n      const buttons: ToolbarButton[] = this.createToolbarButtons(subscribed);\r\n      this.buttonsHelper.updateButtons(buttons, this.toolbarButtons);\r\n  }\r\n\r\n  public getNotifications = () => {\r\n    this.liveapps.getNotifications(this.relatedItemType, this.relatedItemId, this.userId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          const notificationList: NotificationList = result;\r\n          if (notificationList.notifications.length > 0) {\r\n            this.subscribed = true;\r\n            this.setupNotificationButtons(true);\r\n          } else {\r\n            this.subscribed = false;\r\n            this.setupNotificationButtons(false);\r\n          }\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  public subscribe = () => {\r\n    this.liveapps.subscribeToNotes(this.relatedItemType, this.relatedItemId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          if (result) {\r\n            this.subscribed = true;\r\n            this.recreateButtonsForNotifications(true);\r\n          }\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  public unsubscribe = () => {\r\n    this.liveapps.unsubscribeToNotes(this.relatedItemType, this.relatedItemId, this.userId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          this.subscribed = false;\r\n          this.recreateButtonsForNotifications(false);\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  public editNote = (thread) => {\r\n    thread.editMode = !thread.editMode;\r\n  }\r\n\r\n  public updateNote = (note, updatedText) => {\r\n    console.log('Updating note');\r\n    note.text = updatedText;\r\n    this.liveapps.updateNote(note, note.id)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          console.log('Note updated');\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error updating note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  public deleteNote = (id) => {\r\n    console.log('Deleting note');\r\n    this.liveapps.deleteNote(id)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(result => {\r\n          console.log('Note deleted: ' + result);\r\n          this.refresh();\r\n        })\r\n      )\r\n      .subscribe(null, error => this.errorMessage = 'Error creating new note: ' + error.error.errorMessage);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getNotifications();\r\n    this.newNote.text = '';\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-notes-pane {\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.33);\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-collaboration-pane {\r\n  padding-top: 10px;\r\n}\r\n\r\n.tcs-collaboration-header {\r\n  height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-collaboration-header-text {\r\n  margin-left: 10px;\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n}\r\n\r\n.tcs-collaboration-thread-icon-left {\r\n  height: 24px;\r\n  width: 50px;\r\n}\r\n\r\n.tcs-collaboration-existing-threads {\r\n  overflow-y: auto;\r\n  /*height: 70%;*/\r\n}\r\n\r\n.tcs-collaboration-detail-box {\r\n  min-height: 85px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tcs-collaboration-detail-box.editing {\r\n  min-height: 109px;\r\n}\r\n\r\n.tcs-collaboration-detail-box.editing > .tcs-thread-box {\r\n  height: 110px;\r\n  background-color: #EEF0F7;\r\n}\r\n\r\n.tcs-collaboration-new-reply-box {\r\n  transition: background-color 0.5s;\r\n  background-color: #EEF0F7;\r\n  margin-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-collaboration-detail-box.tcs-collaboration-reply.editing {\r\n  min-height: 100px;\r\n}\r\n\r\n.tcs-collaboration-reply {\r\n  padding-left: 20px;\r\n}\r\n\r\n.tcs-thread-box {\r\n  height: 86px;\r\n}\r\n\r\n.tcs-thread-box:hover {\r\n  background-color: #EEF0F7;\r\n  transition: background-color 0.5s;\r\n}\r\n\r\n\r\n\r\n.tcs-thread-box:hover .tcs-icon.tcs-icon-active {\r\n  display: inline-block;\r\n}\r\n\r\n.tcs-thread-box .tcs-icon.tcs-icon-active {\r\n  display: none;\r\n}\r\n\r\n.tcs-collaboration-entry {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.tcs-icon-row {\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.tcs-collaboration-thread-author {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n}\r\n\r\n.tcs-collaboration-thread-text {\r\n  font-size: 11px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n}\r\n\r\n.tcs-collaboration-thread-date {\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n}\r\n\r\n.tcs-collaboration-edited {\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #EF5350;\r\n  padding-right: 4px;\r\n}\r\n\r\n.tcs-collaboration-reply-icon {\r\n  transform: scale(-1,1);\r\n}\r\n\r\n.tcs-collaboration-reply-item-icon {\r\n  transform: scale(1,-1);\r\n  margin-top: 10px;\r\n}\r\n\r\n.tcs-collaboration-reply-box {\r\n  /*margin-left: 20px;*/\r\n}\r\n\r\n.tcs-collaboration-reply-details {\r\n  width: 100%;\r\n}\r\n\r\n.tcs-collaboration-thread-replies {\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #0081cb;\r\n}\r\n\r\n.tcs-icon {\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover path.svg-content {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover g.svg-content {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-icon.tcs-collaboration-edit-icon {\r\n  margin-left: 5px;\r\n}\r\n\r\n.tcs-icon.tcs-collaboration-send-icon {\r\n  height: 24px;\r\n  width: 24px;\r\n  margin-left: 12px;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-collaboration-send-icon:hover path.svg-content {\r\n  fill: #0081cb;\r\n}\r\n\r\n.tcs-collaboration-line {\r\n  margin-left: 20px;\r\n  padding: 0px;\r\n  margin-top: 0px;\r\n  margin-right: 20px;\r\n  margin-bottom: 0px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n\r\n.tcs-collaboration-reply-line {\r\n  padding: 0px;\r\n  margin-top: 0px;\r\n  margin-right: 20px;\r\n  margin-bottom: 0px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n\r\n.tcs-collaboration-new-thread {\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n  /*margin-top: 10px;*/\r\n  max-height: 85px;\r\n  height: 85px;\r\n  min-height: 85px;\r\n}\r\n\r\n.tcs-collaboration-edit-thread {\r\n  margin-top: 10px;\r\n}\r\n\r\n.tcs-collaboration-new-reply {\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tcs-collaboration-input  {\r\n   height: 55px;\r\n   max-width: 100%;\r\n   border-color: #d5e6ff;\r\n   font-size: 11px;\r\n   font-weight: normal;\r\n   font-style: normal;\r\n   font-stretch: normal;\r\n   line-height: normal;\r\n   letter-spacing: -0.1px;\r\n   color: #b6b6b6;\r\n   resize: none;\r\n   border-radius: 3px;\r\n }\r\n\r\n.tcs-collaboration-reply-textbox {\r\n  height: 55px;\r\n  max-width: 100%;\r\n  border-color: #d5e6ff;\r\n  font-size: 11px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n  resize: none;\r\n  border-radius: 3px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tcs-collaboration-edit  {\r\n  height: 55px;\r\n  max-width: 100%;\r\n  border-color: #d5e6ff;\r\n  font-size: 11px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n  resize: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-collaboration-new-thread-form {\r\n  max-width: 90%;\r\n  max-height: 100%;\r\n}\r\n\r\n.tcs-collaboration-new-note-component {\r\n  height: 85px;\r\n  min-height: 85px;\r\n  max-height: 85px;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}\r\n\r\n.tcs-collaboration-new-reply-component {\r\n  height: 85px;\r\n  min-height: 85px;\r\n  max-height: 85px;\r\n  margin-left: 20px;\r\n  margin-right: 20px;\r\n}\r\n",
                    "styleUrl": "./live-apps-notes.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-notes-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\r\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'Notes'\" [icon]=\"'tcs-collaboration-feed'\" [toolbarButtons]=\"toolbarButtons\" [showHeader]=\"showHeader\" (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\"></tc-tibco-cloud-widget-header>\r\n    <div class=\"tcs-collaboration-pane\" fxLayout=\"column\"  fxFlex=\"grow\" style=\"height: 100%;\">\r\n      <div class=\"tcs-collaboration-existing-threads\" fxLayout=\"column\" fxFlex>\r\n        <!--div *ngIf=\"threads && threads.threads.length > 0\"-->\r\n        <div style=\"height: 100%;\">\r\n          <cdk-virtual-scroll-viewport style=\"height: 100%\" itemSize=\"50\" (scrolledIndexChange)=\"getBatch()\">\r\n\r\n            <!--div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\" *ngFor=\"let thread of threads.threads | reverse\" fxLayout=\"column\"-->\r\n            <div *ngIf=\"threads\">\r\n            <div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\" *cdkVirtualFor=\"let thread of threads.threads\" fxLayout=\"column\">\r\n              <div class=\"tcs-thread-box\">\r\n                <!-- collaboration threads -->\r\n                <div class=\"tcs-collaboration-entry\">\r\n                  <div *ngIf=\"!thread.editMode\">\r\n                    <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n                      <span class=\"tcs-collaboration-thread-author\">{{thread.note.createdByName}}</span>\r\n                      <div fxLayoutAlign=\"row\">\r\n                      <span *ngIf=\"thread.note.modifiedDate > thread.note.createdDate\" class=\"tcs-collaboration-edited\">Edited\r\n                      </span>\r\n                        <span class=\"tcs-collaboration-thread-date\">{{thread.note.modifiedDate | durationSince}}</span>\r\n                      </div>\r\n                    </div>\r\n                    <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{thread.note.text}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{thread.note.text | ellipsis: 70}}</span>\r\n                  </div>\r\n                  <tcla-live-apps-notes-editor *ngIf=\"thread.editMode\" [noteText]=\"thread.note.text\" (noteSubmitted)=\"updateNote(thread.note, $event)\"></tcla-live-apps-notes-editor>\r\n                </div>\r\n                <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                  <div class=\"tcs-collaboration-thread-icon-left\">\r\n                    <mat-icon (click)=\"deleteNote(thread.note.id)\" class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\" svgIcon=\"tcs-collaboration-delete\"></mat-icon>\r\n                    <mat-icon (click)=\"editNote(thread)\" class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\" svgIcon=\"tcs-collaboration-edit\"></mat-icon>\r\n                  </div>\r\n                  <div class=\"tcs-collaboration-thread-icon-right\" fxLayoutAlign=\"end center\" fxLayoutGap=\"8px\">\r\n                    <span *ngIf=\"thread.note.thread.totalCount > 1\" class=\"tcs-collaboration-thread-replies\" (click)=\"toggleReplies(thread)\">{{thread.note.thread.totalCount-1}} replies</span>\r\n                    <mat-icon (click)=\"toggleNewReply(thread)\" class=\"tcs-icon tcs-collaboration-reply-icon\" svgIcon=\"tcs-collaboration-reply\"></mat-icon>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            <div class=\"tcs-collaboration-line\"></div>\r\n            <!-- replies -->\r\n            <div class=\"tcs-collaboration-reply-box\" *ngIf=\"thread.showReplies\">\r\n              <div fxLayout=\"column\">\r\n                <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-reply-component\" *ngIf=\"thread.showNewReply\" [isReply]=\"true\" [noteText]=\"thread.newReply.text\" (noteSubmitted)=\"createReply(thread, $event)\"></tcla-live-apps-notes-editor>\r\n                <div class=\"tcs-collaboration-line\"></div>\r\n              </div>\r\n              <div class=\"tcs-collaboration-detail-box tcs-collaboration-reply\" [ngClass]=\"{ editing: reply.editMode }\" *ngFor=\"let reply of thread.thread | reverse\" fxLayout=\"column\">\r\n                <div class=\"tcs-thread-box\" fxLayout=\"row\">\r\n                  <mat-icon class=\"tcs-icon tcs-collaboration-reply-item-icon\" svgIcon=\"tcs-collaboration-reply\"></mat-icon>\r\n                  <div fxLayout=\"column\" class=\"tcs-collaboration-reply-details\">\r\n                    <div class=\"tcs-collaboration-entry\">\r\n                      <div *ngIf=\"!reply.editMode\">\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n                          <span class=\"tcs-collaboration-thread-author\">{{reply.createdByName}}</span>\r\n                          <span class=\"tcs-collaboration-thread-date\">{{reply.modifiedDate | durationSince}}</span>\r\n                        </div>\r\n                        <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{reply.text}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{reply.text | ellipsis: 60}}</span>\r\n                      </div>\r\n                      <tcla-live-apps-notes-editor *ngIf=\"reply.editMode\" [noteText]=\"reply.text\" (noteSubmitted)=\"updateNote(reply, $event)\"></tcla-live-apps-notes-editor>\r\n                    </div>\r\n                    <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                      <div class=\"tcs-collaboration-thread-icon-left\">\r\n                        <mat-icon (click)=\"deleteNote(reply.id)\" class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\" svgIcon=\"tcs-collaboration-delete\"></mat-icon>\r\n                        <mat-icon (click)=\"editNote(reply)\" class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\" svgIcon=\"tcs-collaboration-edit\"></mat-icon>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"tcs-collaboration-reply-line\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n            </div>\r\n          </cdk-virtual-scroll-viewport>\r\n        </div>\r\n      </div>\r\n      <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-note-component\" [noteText]=\"newNote.text\" (noteSubmitted)=\"createThread($event)\"></tcla-live-apps-notes-editor>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsNotesEditorComponent",
            "id": "component-LiveAppsNotesEditorComponent-fc763f5bbceb716064ce73420524e9f5",
            "file": "src/lib/components/live-apps-notes-editor/live-apps-notes-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-notes-editor",
            "styleUrls": [
                "./live-apps-notes-editor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-notes-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isReply",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "noteText",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "noteSubmitted",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "submitNote",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-notes-editor',\r\n  templateUrl: './live-apps-notes-editor.component.html',\r\n  styleUrls: ['./live-apps-notes-editor.component.css']\r\n})\r\nexport class LiveAppsNotesEditorComponent extends LiveAppsComponent {\r\n  @Input() noteText: string; // use 'CASE_APP' to share notes with case manager\r\n  @Input() isReply = false;\r\n  @Output() noteSubmitted = new EventEmitter(); // notify text submitted\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public submitNote = (noteText) => {\r\n    this.noteSubmitted.emit(noteText);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-collaboration-new-thread {\r\n  /*margin-left: 20px;\r\n  margin-right: 20px;*/\r\n  /*max-height: 55px;\r\n  height: 55px;\r\n  min-height: 55px;*/\r\n}\r\n\r\n.tcs-collaboration-new-thread-form {\r\n  max-width: 90%;\r\n  max-height: 100%;\r\n}\r\n\r\n.tcs-collaboration-input  {\r\n  height: 55px;\r\n  max-width: 100%;\r\n  border-color: #d5e6ff;\r\n  font-size: 11px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: normal;\r\n  letter-spacing: -0.1px;\r\n  color: #b6b6b6;\r\n  resize: none;\r\n  border-radius: 3px;\r\n}\r\n\r\n.tcs-icon.tcs-collaboration-send-icon {\r\n  height: 24px;\r\n  width: 24px;\r\n  margin-left: 12px;\r\n}\r\n\r\n.tcs-icon {\r\n  height: 20px;\r\n  width: 20px;\r\n}\r\n\r\n.tcs-collaboration-reply-item-icon {\r\n  transform: scale(1,-1);\r\n  margin-top: 10px;\r\n}\r\n",
                    "styleUrl": "./live-apps-notes-editor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "LiveAppsComponent",
            "templateData": "<div class=\"tcs-collaboration-new-thread\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex>\r\n  <mat-icon *ngIf=\"isReply\" class=\"tcs-icon tcs-collaboration-reply-item-icon\" svgIcon=\"tcs-collaboration-reply\"></mat-icon>\r\n  <form class=\"tcs-collaboration-new-thread-form\" #newThreadForm=\"ngForm\" fxFlex>\r\n    <textarea fxFlex class=\"tcs-collaboration-input\" [(ngModel)]=\"noteText\" name=\"noteText\" md-maxlength=\"10000\" placeholder=\"New Note... \" rows=\"2\"></textarea>\r\n  </form>\r\n  <mat-icon class=\"tcs-icon tcs-collaboration-send-icon\" svgIcon=\"tcs-collaboration-send\" (click)=\"submitNote(noteText)\"></mat-icon>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsPieComponent",
            "id": "component-LiveAppsPieComponent-9f3b207fa97542217a69c578578a70a7",
            "file": "src/lib/components/live-apps-pie/live-apps-pie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-pie",
            "styleUrls": [
                "./live-apps-pie.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-pie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pieChartData",
                    "defaultValue": "[300, 500, 100]",
                    "type": "SingleDataSet",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartLabels",
                    "defaultValue": "['Download Sales', 'In-Store Sales', 'Mail Sales']",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartLegend",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartOptions",
                    "defaultValue": "{\r\n    responsive: true,\r\n  }",
                    "type": "ChartOptions",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartPlugins",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pieChartType",
                    "defaultValue": "'pie'",
                    "type": "ChartType",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ChartOptions, ChartType } from 'chart.js';\r\nimport { Label, SingleDataSet } from 'ng2-charts';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-pie',\r\n  templateUrl: './live-apps-pie.component.html',\r\n  styleUrls: ['./live-apps-pie.component.css']\r\n})\r\nexport class LiveAppsPieComponent implements OnInit {\r\n\r\n  public pieChartOptions: ChartOptions = {\r\n    responsive: true,\r\n  };\r\n  public pieChartLabels: Label[] = ['Download Sales', 'In-Store Sales', 'Mail Sales'];\r\n  public pieChartData: SingleDataSet = [300, 500, 100];\r\n  public pieChartType: ChartType = 'pie';\r\n  public pieChartLegend = true;\r\n  public pieChartPlugins = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-pie.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"display: block;\">\r\n  <canvas baseChart\r\n    [data]=\"pieChartData\"\r\n    [labels]=\"pieChartLabels\"\r\n    [chartType]=\"pieChartType\"\r\n    [options]=\"pieChartOptions\"\r\n    [plugins]=\"pieChartPlugins\"\r\n    [legend]=\"pieChartLegend\">\r\n  </canvas>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsRecentCasesComponent",
            "id": "component-LiveAppsRecentCasesComponent-1c328dfdca7f0b8f77ae1e3e1c21ff2d",
            "file": "src/lib/components/live-apps-recent-cases/live-apps-recent-cases.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-recent-cases",
            "styleUrls": [
                "./live-apps-recent-cases.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-recent-cases.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayType",
                    "defaultValue": "this.displayType ? this.displayType : 'miniCard'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "sandboxId",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "showHeader",
                    "defaultValue": "this.showHeader ? this.showHeader : true",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "uiAppId",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickCase",
                    "defaultValue": "new EventEmitter<CaseRoute>()",
                    "line": 18,
                    "type": "EventEmitter<CaseRoute>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "clearRecentCases",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleDeleted",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "recentCases",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {Subject} from 'rxjs';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {CaseList, CaseRoute} from '../../models/liveappsdata';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-recent-cases',\r\n  templateUrl: './live-apps-recent-cases.component.html',\r\n  styleUrls: ['./live-apps-recent-cases.component.css']\r\n})\r\nexport class LiveAppsRecentCasesComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() displayType: string = this.displayType ? this.displayType : 'miniCard'; // miniCard, card, list\r\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\r\n  @Output() clickCase: EventEmitter<CaseRoute> = new EventEmitter<CaseRoute>();\r\n\r\n  public recentCases: string[];\r\n  public errorMessage: string;\r\n\r\n  public clickCaseAction = (caseRoute: CaseRoute) => {\r\n    this.clickCase.emit(caseRoute);\r\n  }\r\n\r\n  public refresh = () => {\r\n    this.recentCases = [];\r\n    this.liveapps.getRecentCases(this.uiAppId, this.sandboxId)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(recentCases => {\r\n          this.recentCases = recentCases.caseRefs || [];\r\n        })\r\n      ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving recent cases: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  public clearRecentCases = () => {\r\n    // -1 will clear recent cases\r\n    this.liveapps.setRecentCase('-1', this.uiAppId, this.sandboxId);\r\n    this.recentCases = [];\r\n  }\r\n\r\n  public handleDeleted = (caseRef: string) => {\r\n    this.recentCases.splice(this.recentCases.indexOf(caseRef), 1);\r\n    this.liveapps.unsetRecentCase(caseRef, this.uiAppId, this.sandboxId);\r\n  }\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-case-recent-box {\r\n  /*width: 661px;*/\r\n  /*height: 366px;*/\r\n  border-radius: 3px;\r\n  box-shadow: 0 2px 8px 0 #dedede;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.tcs-case-recent-header {\r\n  min-height: 40px;\r\n  border-radius: 3px 3px 0px 0px;\r\n  box-shadow: 0 1px 2px 0 #dedede;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n\r\n.tcs-case-recent-header-text {\r\n  font-family: Source Sans Pro;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-stretch: normal;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.3px;\r\n  text-align: left;\r\n  color: black;\r\n  margin-left: 10px;\r\n}\r\n\r\n.tcs-case-recent-flow-list {\r\n  margin: 24px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.tcs-case-recent-item-box {\r\n  margin-top: 3px;\r\n  margin-bottom: 10px;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  max-width: 297px;\r\n}\r\n\r\n.tcs-icon.tcs-icon-active:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content {\r\n  fill: #0081cb;\r\n}\r\n\r\n.tcs-case-recent-line {\r\n  padding: 0px;\r\n  margin-top: 4px;\r\n  margin-bottom: 0px;\r\n  margin-left:5px;\r\n  margin-right: 5px;\r\n  border-bottom-color: #f4f4f4;\r\n  border-bottom-width: 1.1px;\r\n  border-bottom-style: solid;\r\n}\r\n",
                    "styleUrl": "./live-apps-recent-cases.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tcs-case-recent-box\" fxLayout=\"column\" fxFill>\r\n  <div *ngIf=\"showHeader\" class=\"tcs-case-recent-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <div fxLayoutAlign=\"start center\">\r\n      <mat-icon class=\"tcs-icon tcs-recent-icon\" svgIcon=\"tcs-recent-icon\"></mat-icon>\r\n      <div class=\"tcs-case-recent-header-text\">Recent</div>\r\n    </div>\r\n    <mat-icon (click)=\"clearRecentCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-recent-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Recent Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\r\n  </div>\r\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <mat-icon style=\"margin: 5px\" (click)=\"clearRecentCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-recent-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Recent Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\r\n  </div>\r\n  <div class=\"tcs-case-recent-flow-list\" fxLayout=\"column\" fxLayout=\"row wrap\">\r\n    <div class=\"tcs-case-recent-item-box\" *ngFor=\"let case of recentCases\" fxFlex>\r\n      <tcla-live-apps-case-summary [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseReference]=\"case\" (clickCase)=\"clickCaseAction($event)\" (deleted)=\"handleDeleted($event)\"></tcla-live-apps-case-summary>\r\n      <div class=\"tcs-case-recent-line\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsReportingCockpitComponent",
            "id": "component-LiveAppsReportingCockpitComponent-30de571dfb480805c876d551c9eb2f22",
            "file": "src/lib/components/live-apps-reporting-cockpit/live-apps-reporting-cockpit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-reporting-cockpit",
            "styleUrls": [
                "./live-apps-reporting-cockpit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-reporting-cockpit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 14
                },
                {
                    "name": "sandboxId",
                    "line": 15
                },
                {
                    "name": "uiAppId",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "routeAction",
                    "defaultValue": "new EventEmitter<RouteAction>()",
                    "line": 16,
                    "type": "EventEmitter<RouteAction>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "createToolbarButtons",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "handleToolbarButtonEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedCaseType",
                    "type": "CaseTypeReportRecord",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setSelectedCaseType",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toolbarButtons",
                    "type": "ToolbarButton[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {RouteAction, TcButtonsHelperService, ToolbarButton} from '@tibco-tcstk/tc-core-lib';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {Router} from '@angular/router';\r\nimport {CaseTypeReportRecord} from '../../models/tc-live-apps-reporting';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-reporting-cockpit',\r\n  templateUrl: './live-apps-reporting-cockpit.component.html',\r\n  styleUrls: ['./live-apps-reporting-cockpit.component.css']\r\n})\r\nexport class LiveAppsReportingCockpitComponent implements OnInit {\r\n  @Input() uiAppId;\r\n  @Input() appIds;\r\n  @Input() sandboxId;\r\n  @Output() routeAction: EventEmitter<RouteAction> = new EventEmitter<RouteAction>();\r\n\r\n  toolbarButtons: ToolbarButton[];\r\n\r\n  public selectedCaseType: CaseTypeReportRecord;\r\n\r\n  constructor(protected liveapps: LiveAppsService, protected buttonsHelper: TcButtonsHelperService, private router: Router) { }\r\n\r\n  protected createToolbarButtons = (): ToolbarButton[] => {\r\n    const configButton = this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', true, true);\r\n    const refreshButton = this.buttonsHelper.createButton('refresh', 'tcs-refresh-icon', true, 'Refresh', true, true);\r\n    const homeButton = this.buttonsHelper.createButton('close', 'tcs-close-icon', true, 'Close', true, true);\r\n    const buttons = [ configButton, refreshButton, homeButton ];\r\n    return buttons;\r\n  }\r\n\r\n  public handleToolbarButtonEvent = (buttonId: string) => {\r\n    if (buttonId === 'config') {\r\n      this.routeAction.emit(new RouteAction('configClicked', null));\r\n    }\r\n    if (buttonId === 'refresh') {\r\n      this.refresh();\r\n    }\r\n    if (buttonId === 'close') {\r\n      this.routeAction.emit(new RouteAction('backClicked', null));\r\n    }\r\n  }\r\n\r\n  public refresh = () => {\r\n  }\r\n\r\n  public setSelectedCaseType = (event) => {\r\n    this.selectedCaseType = event;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.toolbarButtons = this.createToolbarButtons();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-reporting-content {\r\n  overflow: auto;\r\n}\r\n",
                    "styleUrl": "./live-apps-reporting-cockpit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "buttonsHelper",
                        "type": "TcButtonsHelperService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxFill fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\" style=\"overflow: hidden\">\r\n  <tc-tibco-cloud-menu-bar [toolbarButtons]=\"toolbarButtons\" [headerText]=\"'Reporting'\" (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\">\r\n  </tc-tibco-cloud-menu-bar>\r\n  <div class=\"tcs-reporting-content\" fxLayout=\"row\" fxFlex=\"grow\" fxLayoutAlign=\"start stretch\" style=\"padding-left: 20px; padding-right: 20px; margin-top: 10px;\">\r\n    <!--div flex class=\"report1Widget\">\r\n      <tcla-live-apps-case-overview-report [sandboxId]=\"sandboxId\" [appIds]=\"appIds\"></tcla-live-apps-case-overview-report>\r\n    </div>\r\n    <div flex class=\"report1Widget\">\r\n      <tcla-live-apps-case-overview-report [sandboxId]=\"sandboxId\" [appIds]=\"appIds\"></tcla-live-apps-case-overview-report>\r\n    </div-->\r\n        <div fxFlex style=\"border: solid 1px black\">\r\n          <tcla-live-apps-case-overview-report [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (selectedCaseType)=\"setSelectedCaseType($event)\"></tcla-live-apps-case-overview-report>\r\n        </div>\r\n        <div *ngIf=\"selectedCaseType\" fxFlex style=\"border: solid 1px black\">\r\n          <tcla-live-apps-case-type-overview-report [sandboxId]=\"sandboxId\" [appId]=\"selectedCaseType.applicationId\" [typeId]=\"selectedCaseType.caseTypeInfo.id\" [incTerminal]=\"selectedCaseType.incTerminal\"></tcla-live-apps-case-type-overview-report>\r\n        </div>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LiveAppsRoleSwitcherComponent",
            "id": "component-LiveAppsRoleSwitcherComponent-f89702427b85f90bbdd8cd459f9a4749",
            "file": "src/lib/components/live-apps-role-switcher/live-apps-role-switcher.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-role-switcher",
            "styleUrls": [
                "./live-apps-role-switcher.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-role-switcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "roles",
                    "line": 11,
                    "type": "RoleAttribute[]"
                },
                {
                    "name": "selectedRole",
                    "line": 12,
                    "type": "RoleAttribute"
                }
            ],
            "outputsClass": [
                {
                    "name": "changeRoleEvent",
                    "defaultValue": "new EventEmitter<RoleAttribute>()",
                    "line": 13,
                    "type": "EventEmitter<RoleAttribute>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "compareObjects",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectRole",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { RoleAttribute } from '@tibco-tcstk/tc-core-lib';\r\n\r\n@Component({\r\n    selector: 'tcla-live-apps-role-switcher',\r\n    templateUrl: './live-apps-role-switcher.component.html',\r\n    styleUrls: ['./live-apps-role-switcher.component.css']\r\n})\r\nexport class LiveAppsRoleSwitcherComponent implements OnInit {\r\n\r\n    @Input() roles: RoleAttribute[];\r\n    @Input() selectedRole: RoleAttribute;\r\n    @Output() changeRoleEvent: EventEmitter<RoleAttribute> = new EventEmitter<RoleAttribute>();\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    public selectRole = (role: RoleAttribute) => {\r\n        this.changeRoleEvent.emit(role);\r\n    }\r\n\r\n    compareObjects = (o1: RoleAttribute, o2: RoleAttribute): boolean => {\r\n        return o1.id === o2.id;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-role-switcher.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n    <mat-form-field>\r\n        <mat-label>Viewing as</mat-label>\r\n        <mat-select [(ngModel)]=\"selectedRole\" (selectionChange)=\"selectRole(selectedRole)\" [compareWith]=\"compareObjects\"> \r\n            <mat-option *ngFor=\"let role of roles\" [value]=\"role\">{{role.display}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n</div>"
        },
        {
            "name": "LiveAppsSandboxComponent",
            "id": "component-LiveAppsSandboxComponent-b333f4f0a0ff17ab477d386f10e0b7ce",
            "file": "src/lib/components/live-apps-sandbox/live-apps-sandbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-sandbox",
            "styleUrls": [
                "./live-apps-sandbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-sandbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allSandboxes",
                    "line": 42,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter()",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sandboxes",
                    "type": "SandboxList",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "selectSandbox",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {SandboxList} from '@tibco-tcstk/tc-core-lib';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-sandbox',\r\n  templateUrl: './live-apps-sandbox.component.html',\r\n  styleUrls: ['./live-apps-sandbox.component.css']\r\n})\r\n\r\nexport class LiveAppsSandboxComponent extends LiveAppsComponent implements OnInit {\r\n  @Input() allSandboxes: boolean;\r\n  @Output() selection = new EventEmitter();\r\n\r\n  sandboxes: SandboxList;\r\n  errorMessage: string;\r\n\r\n  public refresh = () => {\r\n    if (this.allSandboxes) {\r\n      this.liveapps.getSandboxes()\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(sandboxList => {\r\n            this.sandboxes = sandboxList;\r\n          })\r\n        )\r\n        .subscribe(null, error => { this.errorMessage = 'Error retrieving sandboxes: ' + error.error.errorMsg; });\r\n    } else {\r\n      this.liveapps.getClaims()\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(claims => {\r\n            // this.sandboxes = new SandboxList().deserialize(claims.sandboxes);\r\n            this.sandboxes = new SandboxList().deserialize(claims.sandboxes);\r\n          })\r\n        )\r\n        .subscribe(null, error => { this.errorMessage = 'Error retrieving sandboxes: ' + error.error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  constructor(private liveapps: LiveAppsService) {\r\n    super();\r\n  }\r\n\r\n  selectSandbox = (sandbox) => {\r\n    this.selection.emit(sandbox);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.refresh();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".la-sandbox-div {\r\n  margin-top: 50px;\r\n}\r\n\r\n.la-sandboxes-card {\r\n  width: 500px;\r\n  /*  height: 300px; */\r\n}\r\n\r\n.la-available-sub:hover {\r\n  box-shadow: 0 7px 14px 0 rgba(0,0,0,.3);\r\n  transition: all .2s ease-in-out;\r\n  cursor: pointer;\r\n}\r\n\r\n.la-available-sub {\r\n  border: 1px solid #dedede;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px 0 rgba(0,0,0,.1);\r\n  padding: 20px 31px 31px;\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.la-sandbox-name {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n}\r\n\r\n",
                    "styleUrl": "./live-apps-sandbox.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"errorMessage\">{{errorMessage}}</div>\r\n<div *ngIf=\"sandboxes\" class=\"la-sandbox-div\" fxLayoutAlign=\"space-around start\">\r\n  <div class=\"la-sandboxes-card\" fxLayout=\"column\">\r\n    <h3>Select sandbox:</h3>\r\n    <div class=\"la-sandbox-selection\">\r\n      <div class=\"la-available-sub\" (click)=\"selectSandbox(sandbox)\" *ngFor=\"let sandbox of sandboxes.sandboxes\">\r\n        <div *ngIf=\"sandbox.name\" class=\"la-sandbox-name\">{{sandbox.name}}</div>\r\n        <div *ngIf=\"!sandbox.name\" class=\"la-sandbox-name\">{{sandbox.type}}</div>\r\n        <div fxLayout=\"column\" class=\"la-sandbox-selection-dtl\" fxLayoutAlign=\"start start\">\r\n          <div>Id: {{sandbox.id}}</div>\r\n          <div>Type: {{sandbox.type}}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsSearchWidgetComponent",
            "id": "component-LiveAppsSearchWidgetComponent-593a7e0a3f86252718dfd63e49993416",
            "file": "src/lib/components/live-apps-search-widget/live-apps-search-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-search-widget",
            "styleUrls": [
                "./live-apps-search-widget.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-search-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appIds",
                    "line": 14,
                    "type": "string[]"
                },
                {
                    "name": "sandboxId",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "uiAppId",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "caseSelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "caseSearchComponent",
                    "type": "LiveAppsCaseSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "LiveAppsCaseSearchComponent"
                        }
                    ]
                },
                {
                    "name": "clickCaseAction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleSearchResults",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matchedRefs",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchString",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {CaseSearchResults} from '../../models/liveappsdata';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {LiveAppsCaseSearchComponent} from '../live-apps-case-search/live-apps-case-search.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-search-widget',\r\n  templateUrl: './live-apps-search-widget.component.html',\r\n  styleUrls: ['./live-apps-search-widget.component.css']\r\n})\r\nexport class LiveAppsSearchWidgetComponent extends LiveAppsComponent {\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() appIds: string[];\r\n  @Output() caseSelected: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  @ViewChild(LiveAppsCaseSearchComponent) caseSearchComponent: LiveAppsCaseSearchComponent;\r\n  // case search\r\n  matchedRefs: string[] = [];\r\n  searchString: string;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // handle case search results\r\n  public handleSearchResults = (data: CaseSearchResults) => {\r\n    this.matchedRefs = data.caserefs;\r\n    this.searchString = data.searchString;\r\n  }\r\n\r\n  // case clicked\r\n  public clickCaseAction = (caseReference) => {\r\n    this.caseSelected.emit(caseReference);\r\n  }\r\n\r\n  public refresh = () => {\r\n    if (this.caseSearchComponent) {\r\n      this.caseSearchComponent.refresh();\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-search-widget.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "extends": "LiveAppsComponent",
            "templateData": "<div>\r\n  <div fxLayout=\"row\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px;\">\r\n    <tcla-live-apps-case-search fxFlex fxLayoutAlign=\"center center\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (foundRefs)=\"handleSearchResults($event)\"></tcla-live-apps-case-search>\r\n  </div>\r\n  <div *ngIf=\"matchedRefs.length>0\" fxLayout=\"row\" fxLayoutAlign=\"space-around start\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px\">\r\n      <tcla-live-apps-case-list fxFlex [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [caseRefs]=\"matchedRefs\" [displayType]=\"'list'\" [headerText]=\"'Matching Cases'\" [highlight]=\"searchString\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsSettingsComponent",
            "id": "component-LiveAppsSettingsComponent-fbc8ea4ea669b3e29cc93afa58e7e524",
            "file": "src/lib/components/live-apps-settings/live-apps-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-settings",
            "styleUrls": [
                "./live-apps-settings.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "claims",
                    "type": "Claim",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "generalConfig",
                    "type": "GeneralConfig",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleEditLiveAppClick",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "LIVE_APPS_URL",
                    "defaultValue": "'/apps/dt-app/index.html#/application-content/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "liveAppsConfig",
                    "type": "LiveAppsConfig",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "runSaveFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedAppIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLiveAppsConfigService",
                    "args": [],
                    "optional": false,
                    "returnType": "TcLiveAppsConfigService",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "handleAppIdSelection",
                    "args": [
                        {
                            "name": "appIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {LiveAppsConfig} from '../../models/tc-liveapps-config';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {GeneralConfig, Claim, Sandbox} from '@tibco-tcstk/tc-core-lib';\r\nimport {TcLiveAppsConfigService} from '../../services/tc-live-apps-config.service';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-settings',\r\n  templateUrl: './live-apps-settings.component.html',\r\n  styleUrls: ['./live-apps-settings.component.css']\r\n})\r\nexport class LiveAppsSettingsComponent extends LiveAppsComponent implements OnInit {\r\n\r\n  LIVE_APPS_URL = '/apps/dt-app/index.html#/application-content/';\r\n\r\n  public sandboxId: number;\r\n  public selectedAppIds: string[];\r\n  public liveAppsConfig: LiveAppsConfig;\r\n  public generalConfig: GeneralConfig;\r\n  public claims: Claim;\r\n\r\n  constructor(protected route: ActivatedRoute, protected liveAppsConfigService: TcLiveAppsConfigService, protected snackBar: MatSnackBar) {\r\n    super();\r\n  }\r\n\r\n  protected getLiveAppsConfigService(): TcLiveAppsConfigService {\r\n    return this.liveAppsConfigService;\r\n  }\r\n\r\n  public handleAppIdSelection(appIds: string[]) {\r\n    console.log('Selected: ', appIds);\r\n    this.selectedAppIds = appIds;\r\n  }\r\n\r\n  public handleEditLiveAppClick = () => {\r\n    // window.open(this.LIVE_APPS_URL + applicationId);\r\n    // currently no public API to get the appId version for design time to populate the URL\r\n    window.open(this.LIVE_APPS_URL);\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.generalConfig = this.route.snapshot.data.laConfigHolder.generalConfig;\r\n    this.liveAppsConfig = this.route.snapshot.data.laConfigHolder.liveAppsConfig;\r\n    this.claims = this.route.snapshot.data.claims;\r\n    this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();\r\n    this.selectedAppIds = this.liveAppsConfig.applicationIds;\r\n  }\r\n\r\n  public runSaveFunction = (): void => {\r\n    const liveAppsConfig = new LiveAppsConfig().deserialize({\r\n      applicationIds: this.selectedAppIds,\r\n      caseIconsFolderId: this.liveAppsConfig.caseIconsFolderId,\r\n      documentAppId: this.liveAppsConfig.documentAppId,\r\n      collaborationAppId: this.liveAppsConfig.documentAppId\r\n    });\r\n    this.liveAppsConfigService.updateLiveAppsConfig(this.sandboxId, this.generalConfig.uiAppId, liveAppsConfig, this.liveAppsConfig.id).subscribe(\r\n        result => {\r\n            this.snackBar.open('Live Apps App Selection Configuration settings saved', 'OK', {\r\n                duration: 3000\r\n            });\r\n        },\r\n        error => {\r\n            this.snackBar.open('Error saving Live Apps App Selection Configuration', 'OK', {\r\n                duration: 3000\r\n            });\r\n        }\r\n    );\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-designer-link {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tcs-designer-link:hover {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-live-apps-settings-pane {\r\n  overflow: hidden;\r\n}\r\n\r\n.tcs-app-selection-list-widget {\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./live-apps-settings.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "liveAppsConfigService",
                        "type": "TcLiveAppsConfigService"
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsConfigService",
                        "type": "TcLiveAppsConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" class=\"tcs-live-apps-settings-pane\" fxFill>\r\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps App Selection Configuration'\">\r\n</tc-tibco-cloud-widget-header>\r\n  <div fxFlex style=\"padding: 20px;\" fxLayout=\"column\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\r\n      <p>Choose the TIBCO Cloud Live Apps Applications to be used within this application:</p>\r\n      <mat-icon class=\"tcs-designer-link\" [svgIcon]=\"'tcs-application-edit'\" (click)=\"handleEditLiveAppClick()\" matTooltip=\"Open Live Apps Designer\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></mat-icon>\r\n    </div>\r\n    <tcla-live-apps-application-list class=\"tcs-app-selection-list-widget\" fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [selectedAppIds]=\"selectedAppIds\" (appIdsSelected)=\"handleAppIdSelection($event)\"></tcla-live-apps-application-list>\r\n    <div fxFlex class=\"tcs-filler-panel\"></div>\r\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsSettingsRecentCasesComponent",
            "id": "component-LiveAppsSettingsRecentCasesComponent-13af0a6ff6761e0ee62363b4843b62ed",
            "file": "src/lib/components/live-apps-settings-recent-cases/live-apps-settings-recent-cases.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-settings-recent-cases",
            "styleUrls": [
                "./live-apps-settings-recent-cases.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-settings-recent-cases.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "excludeRecentIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "LIVE_APPS_URL",
                    "defaultValue": "'/apps/dt-app/index.html#/application-content/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "runSaveFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "claims",
                    "type": "Claim",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "generalConfig",
                    "type": "GeneralConfig",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "handleEditLiveAppClick",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "LIVE_APPS_URL",
                    "defaultValue": "'/apps/dt-app/index.html#/application-content/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "liveAppsConfig",
                    "type": "LiveAppsConfig",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "runSaveFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "selectedAppIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "handleExcludeRecentAppIdSelection",
                    "args": [
                        {
                            "name": "appIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getLiveAppsConfigService",
                    "args": [],
                    "optional": false,
                    "returnType": "TcLiveAppsConfigService",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "handleAppIdSelection",
                    "args": [
                        {
                            "name": "appIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\r\nimport {LiveAppsConfig} from '../../models/tc-liveapps-config';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {GeneralConfig, Claim, Sandbox} from '@tibco-tcstk/tc-core-lib';\r\nimport {TcLiveAppsConfigService} from '../../services/tc-live-apps-config.service';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {LiveAppsSettingsComponent} from '../live-apps-settings/live-apps-settings.component';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-settings-recent-cases',\r\n  templateUrl: './live-apps-settings-recent-cases.component.html',\r\n  styleUrls: ['./live-apps-settings-recent-cases.component.css']\r\n})\r\nexport class LiveAppsSettingsRecentCasesComponent extends LiveAppsSettingsComponent implements OnInit {\r\n\r\n  LIVE_APPS_URL = '/apps/dt-app/index.html#/application-content/';\r\n    \r\n  public excludeRecentIds: string[];\r\n\r\n  public handleExcludeRecentAppIdSelection(appIds: string[]) {\r\n    this.excludeRecentIds = appIds;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    super.ngOnInit();\r\n    this.excludeRecentIds = this.liveAppsConfig.recentExcludedAppIds;\r\n  }\r\n\r\n  public runSaveFunction = (): void => {\r\n    const liveAppsConfig = new LiveAppsConfig().deserialize({\r\n      applicationIds: this.selectedAppIds,\r\n      recentExcludedAppIds: this.excludeRecentIds,\r\n      caseIconsFolderId: this.liveAppsConfig.caseIconsFolderId,\r\n      documentAppId: this.liveAppsConfig.documentAppId,\r\n      collaborationAppId: this.liveAppsConfig.documentAppId\r\n    });\r\n    // unable to use super.liveAppsConfigService\r\n    super.getLiveAppsConfigService().updateLiveAppsConfig(this.sandboxId, this.generalConfig.uiAppId, liveAppsConfig, this.liveAppsConfig.id).subscribe(\r\n        result => {\r\n            this.snackBar.open('Recent cases settings saved', 'OK', {\r\n                duration: 3000\r\n            });\r\n        },\r\n        error => {\r\n            this.snackBar.open('Error saving Recent cases settings', 'OK', {\r\n                duration: 3000\r\n            });\r\n        }\r\n    );\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-designer-link {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.tcs-designer-link:hover {\r\n  fill: #0081cb;\r\n  cursor: pointer;\r\n}\r\n\r\n.tcs-live-apps-settings-pane {\r\n  overflow: hidden;\r\n}\r\n\r\n.tcs-app-selection-list-widget {\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./live-apps-settings-recent-cases.component.css"
                }
            ],
            "stylesData": "",
            "extends": "LiveAppsSettingsComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" class=\"tcs-live-apps-settings-pane\" fxFill>\r\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps Recent Cases Configuration'\">\r\n</tc-tibco-cloud-widget-header>\r\n  <div fxFlex style=\"padding: 20px;\" fxLayout=\"column\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\r\n      <p>Select any TIBCO Cloud Live Apps Applications you wish to EXCLUDE from recent cases:</p>\r\n      <mat-icon class=\"tcs-designer-link\" [svgIcon]=\"'tcs-application-edit'\" (click)=\"handleEditLiveAppClick()\" matTooltip=\"Open Live Apps Designer\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></mat-icon>\r\n    </div>\r\n    <tcla-live-apps-application-list class=\"tcs-app-selection-list-widget\" fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [selectedAppIds]=\"excludeRecentIds\" (appIdsSelected)=\"handleExcludeRecentAppIdSelection($event)\"></tcla-live-apps-application-list>\r\n    <div fxFlex class=\"tcs-filler-panel\"></div>\r\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsSettingsRolesComponent",
            "id": "component-LiveAppsSettingsRolesComponent-53eadb1a1c4957d39ba7c0000c5d7be7",
            "file": "src/lib/components/live-apps-settings-roles/live-apps-settings-roles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-settings-roles",
            "styleUrls": [
                "./live-apps-settings-roles.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-settings-roles.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createRoleFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "currentRole",
                    "type": "RoleAttribute",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deleteRoleFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "groups",
                    "type": "Groups",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "roles",
                    "type": "Roles",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedRole",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { TibcoCloudSettingsGeneralComponent, RoleAttribute, TcGeneralConfigService, TibcoCloudNewElementComponent } from '@tibco-tcstk/tc-core-lib';\r\nimport { Groups, Roles } from '../../models/tc-groups-data';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar, MatDialog } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'tcla-live-apps-settings-roles',\r\n    templateUrl: './live-apps-settings-roles.component.html',\r\n    styleUrls: ['./live-apps-settings-roles.component.css']\r\n})\r\nexport class LiveAppsSettingsRolesComponent extends TibcoCloudSettingsGeneralComponent implements OnInit {\r\n\r\n    public roles: Roles;\r\n    public groups: Groups;\r\n\r\n    public currentRole: RoleAttribute;\r\n\r\n    constructor(protected route: ActivatedRoute, protected generalConfigService: TcGeneralConfigService, protected snackBar: MatSnackBar, private dialog: MatDialog) {\r\n        super(route, generalConfigService, snackBar);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.generalConfig = super.getRoute().snapshot.data.generalConfigHolder;\r\n        this.roles = super.getRoute().snapshot.data.allRoles;\r\n        this.groups = super.getRoute().snapshot.data.allGroups;\r\n        this.claims = super.getRoute().snapshot.data.claims;\r\n        this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();\r\n    }\r\n\r\n    deleteRoleFunction = (): void => {\r\n        this.generalConfig.roles = this.generalConfig.roles.filter(element => element.id != this.currentRole.id);\r\n    }\r\n\r\n    selectedRole = (role: RoleAttribute): void => {\r\n        this.currentRole = role;\r\n    }\r\n\r\n    createRoleFunction = (): void => {\r\n        const dialogRef = this.dialog.open(TibcoCloudNewElementComponent, {\r\n            width: '50%',\r\n            height: '30%',\r\n            maxWidth: '100vw',\r\n            maxHeight: '100vh',\r\n            panelClass: 'tcs-style-dialog',\r\n            data: { resourceType: 'Role' }\r\n\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            if (result) {\r\n                const newRole = new RoleAttribute().deserialize({id: result.id, display: result.name });\r\n                this.generalConfig.roles.push(newRole);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./live-apps-settings-roles.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "generalConfigService",
                        "type": "TcGeneralConfigService"
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "generalConfigService",
                        "type": "TcGeneralConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "TibcoCloudSettingsGeneralComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div fxLayout=\"column\" fxFill>\r\n    <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\"\r\n                                  [headerText]=\"'Role Configuration'\"></tc-tibco-cloud-widget-header>\r\n    <div fxFlex style=\"padding: 20px; overflow: hidden\" fxLayout=\"column\">\r\n      <div style=\"overflow: auto;\">\r\n        <div fxLayout=\"column\" fxFlex>\r\n          <p>You can configure roles by here:</p>\r\n          <br>\r\n          <!-- Role specific -->\r\n            <mat-accordion>\r\n              <mat-expansion-panel *ngFor=\"let role of generalConfig.roles\" (opened)=\"selectedRole(role)\">\r\n                <mat-expansion-panel-header>\r\n                  <mat-panel-title>{{role.display}}</mat-panel-title>\r\n                </mat-expansion-panel-header>\r\n                <div fxLayoutGap=\"5px\">\r\n                  <mat-form-field style=\"min-width: 400px\">\r\n                    <input matInput placeholder=\"Id\" [(ngModel)]=\"role.id\" readonly>\r\n                  </mat-form-field>\r\n                  <mat-form-field style=\"min-width: 400px\">\r\n                    <input matInput placeholder=\"Display Name\" [(ngModel)]=\"role.display\">\r\n                  </mat-form-field>\r\n                  <mat-form-field style=\"min-width: 400px\">\r\n                    <mat-select [disableOptionCentering]=\"true\" placeholder=\"Live Apps Group\" [(value)]=\"role.group\">\r\n                      <mat-option *ngFor=\"let group of groups.groups\" [value]=\"group.name\">\r\n                        <span matTooltip=\"{{group.description}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{group.name}}</span>\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                  <mat-slide-toggle [(ngModel)]=\"role.configuration\">Configuration role</mat-slide-toggle>\r\n                </div>\r\n              </mat-expansion-panel>\r\n            </mat-accordion>\r\n        </div>\r\n\r\n      </div>\r\n      <div fxFlex class=\"tcs-filler-panel\"></div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"end end\" fxLayoutGap=\"10px\" style=\"min-height: 50px\">\r\n        <button mat-raised-button color=\"secondary\" [disabled]=\"!currentRole\" (click)=\"deleteRoleFunction()\">Delete</button>\r\n        <button mat-raised-button color=\"secondary\" (click)=\"createRoleFunction()\">New</button>\r\n        <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n"
        },
        {
            "name": "LiveAppsSettingsSummaryCardsComponent",
            "id": "component-LiveAppsSettingsSummaryCardsComponent-d92e40f723ae9f5123aeab177b31eda6",
            "file": "src/lib/components/live-apps-settings-summary-cards/live-apps-settings-summary-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-settings-summary-cards",
            "styleUrls": [
                "./live-apps-settings-summary-cards.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-settings-summary-cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "caseCardConfig",
                    "type": "CaseCardConfig",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleAppSelection",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "handleConfigChanged",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "runSaveFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedApp",
                    "type": "CaseType",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "claims",
                    "type": "Claim",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "generalConfig",
                    "type": "GeneralConfig",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "handleEditLiveAppClick",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "LIVE_APPS_URL",
                    "defaultValue": "'/apps/dt-app/index.html#/application-content/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "liveAppsConfig",
                    "type": "LiveAppsConfig",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "runSaveFunction",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "sandboxId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "selectedAppIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLiveAppsConfigService",
                    "args": [],
                    "optional": false,
                    "returnType": "TcLiveAppsConfigService",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "handleAppIdSelection",
                    "args": [
                        {
                            "name": "appIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "appIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsSettingsComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {LiveAppsSettingsComponent} from '../live-apps-settings/live-apps-settings.component';\r\nimport {CaseCardConfig} from '../../models/tc-case-card-config';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {TcCaseCardConfigService} from '../../services/tc-case-card-config.service';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {TcLiveAppsConfigService} from '../../services/tc-live-apps-config.service';\r\nimport {CaseType} from '../../models/liveappsdata';\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-settings-summary-cards',\r\n  templateUrl: './live-apps-settings-summary-cards.component.html',\r\n  styleUrls: ['./live-apps-settings-summary-cards.component.css']\r\n})\r\nexport class LiveAppsSettingsSummaryCardsComponent extends LiveAppsSettingsComponent {\r\n\r\n  public caseCardConfig: CaseCardConfig;\r\n  public selectedApp: CaseType;\r\n\r\n  constructor(private caseCardConfigService: TcCaseCardConfigService, private routeExt: ActivatedRoute, private liveAppsConfigServiceExt: TcLiveAppsConfigService, protected snackBar: MatSnackBar) {\r\n    super(routeExt, liveAppsConfigServiceExt, snackBar);\r\n  }\r\n\r\n  public handleConfigChanged = (caseCardConfig: CaseCardConfig) => {\r\n    this.caseCardConfig = caseCardConfig;\r\n    console.log(caseCardConfig);\r\n  }\r\n\r\n  public handleAppSelection = (application: CaseType) => {\r\n    this.selectedApp = application;\r\n  }\r\n\r\n  public runSaveFunction = (): void => {\r\n    this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.selectedApp.applicationId, this.generalConfig.uiAppId, this.caseCardConfig)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(caseCardConfig => {\r\n          this.caseCardConfig = caseCardConfig;\r\n        })\r\n      ).subscribe(\r\n          result => {\r\n              this.snackBar.open('Summary cards settings saved', 'OK', {\r\n                  duration: 3000\r\n              });\r\n          },\r\n          error => {\r\n              this.snackBar.open('Error saving Summary Cards settings', 'OK', {\r\n                  duration: 3000\r\n              });\r\n              console.log('Unable to update case card config: ' + error.errorMsg);\r\n          }\r\n    );\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-live-apps-summary-cards-settings {\r\n  overflow: hidden;\r\n}\r\n\r\n.tcs-card-config-widget-pane {\r\n  overflow: hidden;\r\n}\r\n",
                    "styleUrl": "./live-apps-settings-summary-cards.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService"
                    },
                    {
                        "name": "routeExt",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "liveAppsConfigServiceExt",
                        "type": "TcLiveAppsConfigService"
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "caseCardConfigService",
                        "type": "TcCaseCardConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routeExt",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveAppsConfigServiceExt",
                        "type": "TcLiveAppsConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsSettingsComponent",
            "templateData": "<div fxLayout=\"column\" class=\"tcs-live-apps-summary-cards-settings\" fxFill>\r\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps Summary Card Configuration'\"></tc-tibco-cloud-widget-header>\r\n\r\n  <div style=\"padding: 20px 20px 20px 20px;\" fxLayout=\"column\" fxFlex>\r\n    <div class=\"tcs-card-config-widget-pane\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n      <tcla-live-apps-app-configuration-widget fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [appIds]=\"liveAppsConfig.applicationIds\" [uiAppId]=\"generalConfig.uiAppId\" [folderId]=\"liveAppsConfig.caseIconsFolderId\" (configChanged)=\"handleConfigChanged($event)\" (appSelected)=\"handleAppSelection($event)\"></tcla-live-apps-app-configuration-widget>\r\n    </div>\r\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\r\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\" [disabled]=\"!caseCardConfig || !selectedApp\">Save</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LiveAppsStateIconComponent",
            "id": "component-LiveAppsStateIconComponent-977677ff135e16a551494af9bda05307",
            "file": "src/lib/components/live-apps-state-icon/live-apps-state-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-state-icon",
            "styleUrls": [
                "./live-apps-state-icon.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./live-apps-state-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appId",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "color",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "iconHostURL",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "iconPath",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "id",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconSVG",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refillSVG",
                    "defaultValue": "function(fill) {\r\n    const updatedsvg = this.svgcontents.replace('fill=\"<DYNAMICFILL>\"', 'fill=\"' + fill + '\"');\r\n    const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);\r\n    this.iconSVG = newval;\r\n  }",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "refresh",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "svgcontents",
                    "defaultValue": "undefined",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LiveAppsComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnDestroy, OnInit, SecurityContext, SimpleChanges} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {Location} from '@angular/common';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {TcCoreCommonFunctions} from '@tibco-tcstk/tc-core-lib';\r\nimport {GENERIC_CASETYPE_ICON_SVG, GENERIC_STATE_ICON_SVG} from '../../services/tc-case-card-config.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-state-icon',\r\n  templateUrl: './live-apps-state-icon.component.html',\r\n  styleUrls: ['./live-apps-state-icon.component.css']\r\n})\r\nexport class LiveAppsStateIconComponent extends LiveAppsComponent implements OnInit, OnChanges {\r\n  @Input() id: string;\r\n  @Input() iconPath: string;\r\n  @Input() color: string;\r\n  @Input() iconHostURL: string;\r\n  @Input() appId: string;\r\n\r\n  public iconSVG: SafeHtml;\r\n  public svgcontents: string = undefined;\r\n\r\n  constructor(private sanitizer: DomSanitizer, private http: HttpClient, private liveapps: LiveAppsService, private location: Location) {\r\n    super();\r\n  }\r\n\r\n  public refillSVG = function(fill) {\r\n    const updatedsvg = this.svgcontents.replace('fill=\"<DYNAMICFILL>\"', 'fill=\"' + fill + '\"');\r\n    const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);\r\n    this.iconSVG = newval;\r\n  };\r\n\r\n  public refresh = (icon, fill) => {\r\n    let url: string;\r\n    if (icon && icon !== 'assets/icons/ic-generic-casetype.svg' && icon !== 'assets/icons/ic-generic-state.svg') {\r\n      if (icon.slice(0, 13) === 'assets/icons/') {\r\n        // if icon is in assets folder we need to prepare the Url\r\n        url = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, icon);\r\n      } else {\r\n        url = '/' + icon;\r\n      }\r\n      this.liveapps.getIconSVGText(url)\r\n        .pipe(\r\n          take(1),\r\n          takeUntil(this._destroyed$),\r\n          map(val => {\r\n              this.svgcontents = val;\r\n              val = val.toString().replace('fill=\"<DYNAMICFILL>\"', 'fill=\"' + fill + '\"');\r\n              const newval = this.sanitizer.bypassSecurityTrustHtml(val);\r\n              return newval;\r\n            }\r\n          )\r\n        )\r\n        .subscribe(val => {\r\n            this.iconSVG = val;\r\n          }\r\n          , error => {\r\n            console.log('Unable to retrieve icon: ' + error.errorMsg);\r\n          }\r\n        );\r\n    } else {\r\n      // use generic icon\r\n      let svgcontents: string;\r\n      if (icon === 'assets/icons/ic-generic-casetype.svg') {\r\n        svgcontents = GENERIC_CASETYPE_ICON_SVG;\r\n      } else {\r\n        svgcontents = GENERIC_STATE_ICON_SVG;\r\n      }\r\n      this.svgcontents = svgcontents;\r\n      svgcontents = svgcontents.replace('fill=\"<DYNAMICFILL>\"', 'fill=\"' + fill + '\"');\r\n      const newval = this.sanitizer.bypassSecurityTrustHtml(svgcontents);\r\n      this.iconSVG = newval;\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    // this.refresh(this.iconPath, this.color);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if ((changes.iconPath && (changes.iconPath.currentValue !== changes.iconPath.previousValue)) || (changes.color && (changes.color.currentValue !== changes.color.previousValue))) {\r\n      this.refresh(this.iconPath, this.color);\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep .la-state-icon-svg svg {\r\n  height: 16px;\r\n  width: 16px;\r\n}\r\n",
                    "styleUrl": "./live-apps-state-icon.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "liveapps",
                        "type": "LiveAppsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "LiveAppsComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"la-state-icon-svg\" [innerHtml]=\"iconSVG\" fxLayoutAlign=\"start center\"></div>\r\n"
        },
        {
            "name": "LiveAppsStateIconUploadDialogComponent",
            "id": "component-LiveAppsStateIconUploadDialogComponent-8ec52258a5de7db0cb7e94b8f5f8310c",
            "file": "src/lib/components/live-apps-application-configuration/live-apps-application-configuration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tcla-live-apps-state-icon-upload-dialog",
            "styleUrls": [
                "upload-file-dialog/app-live-apps-state-icon-upload-dialog.css"
            ],
            "styles": [],
            "templateUrl": [
                "upload-file-dialog/app-live-apps-state-icon-upload-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "fileevent",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 287,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 293,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "undefined",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 289,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<LiveAppsStateIconUploadDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 293,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 290,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fileToUpload",
                    "defaultValue": "undefined",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 288,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "uploadFile",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 295,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attachFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "FileList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "FileList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313
                },
                {
                    "name": "setFileDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList, SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {Observable, of, Subject} from 'rxjs';\r\nimport {LiveAppsService} from '../../services/live-apps.service';\r\nimport {CardConfig, CaseTypeState, IconMap} from '../../models/liveappsdata';\r\nimport {map, take, takeUntil} from 'rxjs/operators';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {LiveAppsCaseDataComponent} from '../live-apps-case-data/live-apps-case-data.component';\r\nimport {LiveAppsStateIconComponent} from '../live-apps-state-icon/live-apps-state-icon.component';\r\nimport {LiveAppsCaseSummaryComponent} from '../live-apps-case-summary/live-apps-case-summary.component';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material';\r\nimport {LiveAppsDocumentUploadDialogComponent} from '../live-apps-documents/live-apps-documents.component';\r\nimport { Location } from '@angular/common';\r\nimport {LiveAppsComponent} from '../live-apps-component/live-apps-component.component';\r\nimport {CaseCardConfig} from '../../models/tc-case-card-config';\r\nimport {TcCaseCardConfigService} from '../../services/tc-case-card-config.service';\r\nimport {TcDocumentService} from '../../services/tc-document.service';\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-application-configuration',\r\n  templateUrl: './live-apps-application-configuration.component.html',\r\n  styleUrls: ['./live-apps-application-configuration.component.css']\r\n})\r\nexport class LiveAppsApplicationConfigurationComponent extends LiveAppsComponent implements OnChanges {\r\n  // The ViewChild declarations give access to components marked on the template so that I can call public functions like refresh\r\n  @ViewChildren('iconcomp') stateIconComponents: QueryList<LiveAppsStateIconComponent>;\r\n  @ViewChildren(LiveAppsCaseSummaryComponent) caseSummaryComponent: QueryList<LiveAppsCaseSummaryComponent>;\r\n\r\n  @Input() appId: string;\r\n  @Input() appTypeLabel: string;\r\n  @Input() sandboxId: number;\r\n  @Input() uiAppId: string;\r\n  @Input() folderId: string;\r\n  @Output() configChanged: EventEmitter<CaseCardConfig> = new EventEmitter<CaseCardConfig>();\r\n\r\n  public errorMessage: string;\r\n  public caseCardConfig: CaseCardConfig;\r\n  public selectedStateConfig: IconMap;\r\n  public selectedCaseTypeConfig: IconMap;\r\n  public caseTypeIcon: string;\r\n  public caseTypeColor: string;\r\n\r\n  // prepareExternalUrl will add the base href\r\n  public DEFAULT_CASE_TYPE_ICON = 'assets/icons/ic-generic-casetype.svg';\r\n  public DEFAULT_CASE_TYPE_COLOR = '#8197c0';\r\n  public DEFAULT_CASE_STATE_ICON = 'assets/icons/ic-generic-state.svg';\r\n  public DEFAULT_CASE_STATE_COLOR = '#8197c0';\r\n  public DEFAULT_COLOR_PALETTE = [\r\n    '#3E94C0', '#49B3D3', '#76C6CF', '#A9DACD', '#DCECC9',\r\n    '#FFAB40', '#FFD180', '#FFE0B2', '#FFF3E0', '#81D4FA',\r\n    '#B3E5FC', '#8AF2F2', '#91A3AE', '#CED8DD', '#EBEFF1',\r\n    '#6A1B9A', '#AD1457', '#EC407A', '#C4469E', '#BA68C8',\r\n    '#8C9EFF', '#FF8A80', '#546F7A', '#263237'\r\n  ];\r\n\r\n  public getConfigForState = (state: CaseTypeState): IconMap => {\r\n    let reqIconMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach((stateMap) => {\r\n        if (stateMap.state === state.value) {\r\n          reqIconMap = stateMap;\r\n        }\r\n      });\r\n    }\r\n    return reqIconMap ? reqIconMap : new IconMap(false, state.value, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON);\r\n  }\r\n\r\n  public getConfigForCaseType = (caseTypeId: string): IconMap => {\r\n    let reqIconMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach((stateMap) => {\r\n        if (stateMap.isCaseType) {\r\n          reqIconMap = stateMap;\r\n        }\r\n      });\r\n    }\r\n    return reqIconMap ? reqIconMap : new IconMap(true, caseTypeId, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON);\r\n  }\r\n\r\n  public updateIconMap = (stateConfig: IconMap) => {\r\n    let foundMap: IconMap;\r\n    let updatedMap: IconMap;\r\n    if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {\r\n      this.caseCardConfig.cardConfig.stateMap.forEach(function(stateMap) {\r\n        if (stateMap.state === stateConfig.state) {\r\n          foundMap = stateConfig;\r\n          stateMap.state = stateConfig.state;\r\n          stateMap.icon = stateConfig.icon;\r\n          stateMap.fill = stateConfig.fill;\r\n        }\r\n      });\r\n      if (foundMap) {\r\n        foundMap = stateConfig;\r\n      } else {\r\n        this.caseCardConfig.cardConfig.stateMap.push(stateConfig);\r\n      }\r\n    } else {\r\n      this.caseCardConfig.cardConfig.stateMap = [];\r\n      this.caseCardConfig.cardConfig.stateMap.push(stateConfig);\r\n    }\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public handleCaseTypeColorToggleChange = (changes) => {\r\n    this.caseCardConfig.cardConfig.useCaseTypeColor = changes.checked ? changes.checked : false;\r\n    if (changes.checked) {\r\n      this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n        comp.restylePreview(this.selectedStateConfig.icon, this.caseTypeColor);\r\n      });\r\n    }\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public setFill = (fill, stateConfig: IconMap) => {\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreview(stateConfig.icon, fill);\r\n    });\r\n    this.stateIconComponents.find(function(comp) {\r\n      return comp.id === stateConfig.state;\r\n    }).refillSVG(fill);\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public setCaseTypeFill = (fill, stateConfig: IconMap) => {\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreviewCaseType(stateConfig.icon, fill);\r\n    });\r\n    this.stateIconComponents.find(function(comp) {\r\n      return (comp.id === stateConfig.state && stateConfig.isCaseType);\r\n    }).refillSVG(fill);\r\n    this.configChanged.emit(this.caseCardConfig);\r\n  }\r\n\r\n  public selectState = (state: CaseTypeState) => {\r\n    this.selectedStateConfig = this.getConfigForState(state);\r\n    if (!this.caseCardConfig.cardConfig.useCaseTypeColor) {\r\n      this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n        comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n      });\r\n    }\r\n  }\r\n\r\n  /*public saveConfig = () => {\r\n    this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)\r\n      .pipe(\r\n        take(1),\r\n        takeUntil(this._destroyed$),\r\n        map(caseCardConfig => {\r\n          this.caseCardConfig = caseCardConfig;\r\n        })\r\n      ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }\r\n    );\r\n  }*/\r\n\r\n  public openDialog(state: CaseTypeState, isCaseType: boolean): void {\r\n\r\n    if (!isCaseType) {\r\n      this.selectState(state);\r\n    } else {\r\n      state = new CaseTypeState().deserialize({ value: this.appTypeLabel });\r\n    }\r\n    const dialogRef = this.dialog.open(LiveAppsStateIconUploadDialogComponent, {\r\n      width: '500px',\r\n      data: { state: state, isCaseType: isCaseType }\r\n    });\r\n\r\n    dialogRef.componentInstance.fileevent.subscribe(($e) => {\r\n      this.uploadFile($e.file, $e.state, $e.isCaseType);\r\n    })\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n    });\r\n  }\r\n\r\n  public setNewStateIcon = (url) => {\r\n    this.selectedStateConfig.icon = url;\r\n    this.stateIconComponents.find((comp: LiveAppsStateIconComponent) => {\r\n      return (comp.id === this.selectedStateConfig.state);\r\n    }).refresh(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);\r\n    });\r\n    this.updateIconMap(this.selectedStateConfig);\r\n  }\r\n\r\n  public setNewCaseTypeIcon = (url) => {\r\n    this.caseTypeIcon = url;\r\n    this.stateIconComponents.find((comp: LiveAppsStateIconComponent) => {\r\n      return (comp.id === this.appTypeLabel);\r\n    }).refresh(this.caseTypeIcon, this.caseTypeColor);\r\n    this.caseSummaryComponent.forEach((comp: LiveAppsCaseSummaryComponent) => {\r\n      comp.restylePreviewCaseType(this.caseTypeIcon, this.caseTypeColor);\r\n    });\r\n    this.updateIconMap(new IconMap(true, this.appTypeLabel, this.caseTypeColor, this.caseTypeIcon));\r\n  }\r\n\r\n  public uploadFile(file: File, state: CaseTypeState, isStateIcon: boolean) {\r\n    if (file) {\r\n      const url = 'webresource/v1/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;\r\n      const dlUrl = 'webresource/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;\r\n      this.liveapps.clearFromIconSVGTextCache(url);\r\n      this.documentsService.uploadDocument('orgFolders', this.folderId, this.sandboxId,\r\n        file, (this.appId + '.' + file.name), '')\r\n        .pipe(\r\n          map(val => {\r\n            if (!isStateIcon) {\r\n              this.setNewStateIcon(dlUrl);\r\n            } else {\r\n              this.setNewCaseTypeIcon(dlUrl);\r\n            }\r\n          })\r\n        )\r\n        .subscribe(\r\n          result => null,\r\n          error => { console.log('error'); this.errorMessage = 'Error uploading state icon: ' + error.errorMsg; });\r\n    }\r\n  }\r\n\r\n  public refresh = () => {\r\n    // need states & cardConfig\r\n    this.selectedCaseTypeConfig = null;\r\n    this.caseCardConfigService.getCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.appTypeLabel, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON).pipe(\r\n      take(1),\r\n      takeUntil(this._destroyed$),\r\n      map(caseCardConfig => {\r\n        this.caseCardConfig = caseCardConfig;\r\n        // set default selected to first state for this case type (0 is case type)\r\n        this.selectedStateConfig = this.caseCardConfig.cardConfig.stateMap[1];\r\n        const caseTypeRec = this.caseCardConfig.cardConfig.stateMap.find(function(stateMap) {\r\n          return stateMap.isCaseType;\r\n        });\r\n\r\n        this.caseTypeIcon = caseTypeRec.icon;\r\n        this.caseTypeColor = caseTypeRec.fill;\r\n        this.selectedCaseTypeConfig = this.getConfigForCaseType(this.appTypeLabel);\r\n      })\r\n    ).subscribe(\r\n      null, error => { this.errorMessage = 'Error retrieving case card config: ' + error.error.errorMsg; });\r\n  }\r\n\r\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer,\r\n              private liveapps: LiveAppsService, public caseCardConfigService: TcCaseCardConfigService, private documentsService: TcDocumentService, public dialog: MatDialog, private location: Location) {\r\n    super();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'tcla-live-apps-state-icon-upload-dialog',\r\n  templateUrl: 'upload-file-dialog/app-live-apps-state-icon-upload-dialog.html',\r\n  styleUrls: [ 'upload-file-dialog/app-live-apps-state-icon-upload-dialog.css']\r\n})\r\nexport class LiveAppsStateIconUploadDialogComponent {\r\n  @Output() fileevent = new EventEmitter<any>();\r\n  public fileToUpload: File = undefined;\r\n  public description: string = undefined;\r\n  public fileText: string;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<LiveAppsStateIconUploadDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {}\r\n\r\n  public uploadFile = () => {\r\n    if (this.fileToUpload) {\r\n      this.fileevent.emit({ file: this.fileToUpload, state: this.data.state, isCaseType: this.data.isCaseType } );\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  setFileDescription(description: string) {\r\n    this.description = description;\r\n  }\r\n\r\n  attachFile(files: FileList) {\r\n    this.fileToUpload = files.item(0);\r\n    /*const myReader: FileReader = new FileReader();\r\n    myReader.readAsText(this.fileToUpload);\r\n    this.fileText = myReader.result.toString();*/\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tcs-hidden-input {\r\n  display: none;\r\n}\r\n",
                    "styleUrl": "upload-file-dialog/app-live-apps-state-icon-upload-dialog.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsStateIconUploadDialogComponent>"
                    },
                    {
                        "name": "data",
                        "type": "any"
                    }
                ],
                "line": 290,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LiveAppsStateIconUploadDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <h1 mat-dialog-title>Upload New Icon (svg) for '{{data.state.value}}'</h1>\r\n  <div mat-dialog-content class=\"tcs-state-icon-upload-dialog\">\r\n    <form #fileUploadForm=\"ngForm\" fxFlex fxLayout=\"column\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start space-between\">\r\n        <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\r\n        <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\r\n        <!-- below input is hidden and enabled by above button -->\r\n        <input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" accept=\"image/svg+xml\" #fileInput type=\"file\" id=\"file\">\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div mat-dialog-actions>\r\n    <button mat-button (click)=\"uploadFile()\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\r\n    <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n  </div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "TcLiveappsLibModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LiveAppsActionsComponent"
                        },
                        {
                            "name": "LiveAppsAppConfigurationWidgetComponent"
                        },
                        {
                            "name": "LiveAppsApplicationConfigurationComponent"
                        },
                        {
                            "name": "LiveAppsApplicationCreateButtonComponent"
                        },
                        {
                            "name": "LiveAppsApplicationListComponent"
                        },
                        {
                            "name": "LiveAppsApplicationsComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionsComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionsListComponent"
                        },
                        {
                            "name": "LiveAppsCaseAuditComponent"
                        },
                        {
                            "name": "LiveAppsCaseCockpitComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorWidgetComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorsComponent"
                        },
                        {
                            "name": "LiveAppsCaseDataComponent"
                        },
                        {
                            "name": "LiveAppsCaseDataDisplayComponent"
                        },
                        {
                            "name": "LiveAppsCaseListComponent"
                        },
                        {
                            "name": "LiveAppsCaseOverviewReportComponent"
                        },
                        {
                            "name": "LiveAppsCaseSchemaListComponent"
                        },
                        {
                            "name": "LiveAppsCaseSearchComponent"
                        },
                        {
                            "name": "LiveAppsCaseStateAuditComponent"
                        },
                        {
                            "name": "LiveAppsCaseStatesComponent"
                        },
                        {
                            "name": "LiveAppsCaseSummaryComponent"
                        },
                        {
                            "name": "LiveAppsCaseTypeOverviewReportComponent"
                        },
                        {
                            "name": "LiveAppsComponent"
                        },
                        {
                            "name": "LiveAppsCreatorDialogComponent"
                        },
                        {
                            "name": "LiveAppsCreatorSelectorComponent"
                        },
                        {
                            "name": "LiveAppsCreatorsComponent"
                        },
                        {
                            "name": "LiveAppsDocumentUploadDialogComponent"
                        },
                        {
                            "name": "LiveAppsDocumentViewerComponent"
                        },
                        {
                            "name": "LiveAppsDocumentViewerDialogComponent"
                        },
                        {
                            "name": "LiveAppsDocumentsComponent"
                        },
                        {
                            "name": "LiveAppsFavoriteCasesComponent"
                        },
                        {
                            "name": "LiveAppsHomeCockpitComponent"
                        },
                        {
                            "name": "LiveAppsLandingPageComponent"
                        },
                        {
                            "name": "LiveAppsLoginComponent"
                        },
                        {
                            "name": "LiveAppsMilestoneComponent"
                        },
                        {
                            "name": "LiveAppsNotesComponent"
                        },
                        {
                            "name": "LiveAppsNotesEditorComponent"
                        },
                        {
                            "name": "LiveAppsPieComponent"
                        },
                        {
                            "name": "LiveAppsRecentCasesComponent"
                        },
                        {
                            "name": "LiveAppsReportingCockpitComponent"
                        },
                        {
                            "name": "LiveAppsRoleSwitcherComponent"
                        },
                        {
                            "name": "LiveAppsSandboxComponent"
                        },
                        {
                            "name": "LiveAppsSearchWidgetComponent"
                        },
                        {
                            "name": "LiveAppsSettingsComponent"
                        },
                        {
                            "name": "LiveAppsSettingsRecentCasesComponent"
                        },
                        {
                            "name": "LiveAppsSettingsRolesComponent"
                        },
                        {
                            "name": "LiveAppsSettingsSummaryCardsComponent"
                        },
                        {
                            "name": "LiveAppsStateIconComponent"
                        },
                        {
                            "name": "LiveAppsStateIconUploadDialogComponent"
                        },
                        {
                            "name": "ParseAuditMessagePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LiveAppsActionsComponent"
                        },
                        {
                            "name": "LiveAppsAppConfigurationWidgetComponent"
                        },
                        {
                            "name": "LiveAppsApplicationConfigurationComponent"
                        },
                        {
                            "name": "LiveAppsApplicationCreateButtonComponent"
                        },
                        {
                            "name": "LiveAppsApplicationListComponent"
                        },
                        {
                            "name": "LiveAppsApplicationsComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionsComponent"
                        },
                        {
                            "name": "LiveAppsCaseActionsListComponent"
                        },
                        {
                            "name": "LiveAppsCaseAuditComponent"
                        },
                        {
                            "name": "LiveAppsCaseCockpitComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorWidgetComponent"
                        },
                        {
                            "name": "LiveAppsCaseCreatorsComponent"
                        },
                        {
                            "name": "LiveAppsCaseDataComponent"
                        },
                        {
                            "name": "LiveAppsCaseDataDisplayComponent"
                        },
                        {
                            "name": "LiveAppsCaseListComponent"
                        },
                        {
                            "name": "LiveAppsCaseOverviewReportComponent"
                        },
                        {
                            "name": "LiveAppsCaseSchemaListComponent"
                        },
                        {
                            "name": "LiveAppsCaseSearchComponent"
                        },
                        {
                            "name": "LiveAppsCaseStateAuditComponent"
                        },
                        {
                            "name": "LiveAppsCaseStatesComponent"
                        },
                        {
                            "name": "LiveAppsCaseSummaryComponent"
                        },
                        {
                            "name": "LiveAppsCaseTypeOverviewReportComponent"
                        },
                        {
                            "name": "LiveAppsComponent"
                        },
                        {
                            "name": "LiveAppsCreatorDialogComponent"
                        },
                        {
                            "name": "LiveAppsCreatorSelectorComponent"
                        },
                        {
                            "name": "LiveAppsCreatorsComponent"
                        },
                        {
                            "name": "LiveAppsDocumentUploadDialogComponent"
                        },
                        {
                            "name": "LiveAppsDocumentViewerComponent"
                        },
                        {
                            "name": "LiveAppsDocumentViewerDialogComponent"
                        },
                        {
                            "name": "LiveAppsDocumentsComponent"
                        },
                        {
                            "name": "LiveAppsFavoriteCasesComponent"
                        },
                        {
                            "name": "LiveAppsHomeCockpitComponent"
                        },
                        {
                            "name": "LiveAppsLandingPageComponent"
                        },
                        {
                            "name": "LiveAppsLoginComponent"
                        },
                        {
                            "name": "LiveAppsNotesComponent"
                        },
                        {
                            "name": "LiveAppsNotesEditorComponent"
                        },
                        {
                            "name": "LiveAppsPieComponent"
                        },
                        {
                            "name": "LiveAppsRecentCasesComponent"
                        },
                        {
                            "name": "LiveAppsReportingCockpitComponent"
                        },
                        {
                            "name": "LiveAppsRoleSwitcherComponent"
                        },
                        {
                            "name": "LiveAppsSandboxComponent"
                        },
                        {
                            "name": "LiveAppsSearchWidgetComponent"
                        },
                        {
                            "name": "LiveAppsSettingsComponent"
                        },
                        {
                            "name": "LiveAppsSettingsRolesComponent"
                        },
                        {
                            "name": "LiveAppsSettingsSummaryCardsComponent"
                        },
                        {
                            "name": "LiveAppsStateIconComponent"
                        },
                        {
                            "name": "LiveAppsStateIconUploadDialogComponent"
                        },
                        {
                            "name": "ParseAuditMessagePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "GENERIC_CASETYPE_ICON_SVG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/services/tc-case-card-config.service.ts",
                "type": "",
                "defaultValue": "'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 48 48\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"evenodd\" d=\"M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z\"/>\\n' +\r\n  '</svg>\\n'"
            },
            {
                "name": "GENERIC_STATE_ICON_SVG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/services/tc-case-card-config.service.ts",
                "type": "",
                "defaultValue": "'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"nonzero\" d=\"M.045 1.154h13.91v2.133H.045V1.154zM.8 4.75h12.364v8.19c0 .596-.487 1.083-1.082 1.083h-10.2A1.085 1.085 0 0 1 .8 12.94V4.75zm7.978 2.447V5.776H5.222v1.421h3.556z\"/>\\n' +\r\n  '</svg>\\n'"
            },
            {
                "name": "MILESTONE_SVG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/services/tc-case-states.service.ts",
                "type": "object",
                "defaultValue": "{\r\n  END_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_INPROGESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '<path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '<text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '    <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '</text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>',\r\n  FIRST_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n'\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/services/tc-case-card-config.service.ts": [
                {
                    "name": "GENERIC_CASETYPE_ICON_SVG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/services/tc-case-card-config.service.ts",
                    "type": "",
                    "defaultValue": "'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 48 48\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"evenodd\" d=\"M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z\"/>\\n' +\r\n  '</svg>\\n'"
                },
                {
                    "name": "GENERIC_STATE_ICON_SVG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/services/tc-case-card-config.service.ts",
                    "type": "",
                    "defaultValue": "'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\">\\n' +\r\n  '    <path fill=\"<DYNAMICFILL>\" fill-rule=\"nonzero\" d=\"M.045 1.154h13.91v2.133H.045V1.154zM.8 4.75h12.364v8.19c0 .596-.487 1.083-1.082 1.083h-10.2A1.085 1.085 0 0 1 .8 12.94V4.75zm7.978 2.447V5.776H5.222v1.421h3.556z\"/>\\n' +\r\n  '</svg>\\n'"
                }
            ],
            "src/lib/services/tc-case-states.service.ts": [
                {
                    "name": "MILESTONE_SVG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/services/tc-case-states.service.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  END_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_INPROGESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  END_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '<path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '<text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '    <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '</text>\\n' +\r\n  '</svg>\\n',\r\n  FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>',\r\n  FIRST_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"94\" height=\"36\" viewBox=\"0 0 94 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n',\r\n  MIDDLE_SECTION_PENDING_SVG: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"164\" height=\"36\" viewBox=\"0 0 164 36\">\\n' +\r\n  '    <path class=\"{{milestoneBgClass}}\" fill=\"none\" fill-rule=\"evenodd\" d=\"M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z\"/>\\n' +\r\n  '    <text class=\"pending-text\" fill=\"#FFF\" font-family=\"SourceSansPro-Regular, Source Sans Pro\" font-size=\"14\">\\n' +\r\n  '        <tspan x=\"16\" y=\"23\" class=\"{{milestoneLabelClass}}\">{{milestoneLabel}}</tspan>\\n' +\r\n  '    </text>\\n' +\r\n  '</svg>\\n'\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/lib/components/live-apps-actions/live-apps-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-app-configuration-widget/live-apps-app-configuration-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsAppConfigurationWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-application-configuration/live-apps-application-configuration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsApplicationConfigurationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-application-configuration/live-apps-application-configuration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsStateIconUploadDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-application-create-button/live-apps-application-create-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsApplicationCreateButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-application-list/live-apps-application-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsApplicationListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-applications/live-apps-applications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsApplicationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-action/live-apps-case-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-actions-list/live-apps-case-actions-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseActionsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-actions/live-apps-case-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-audit/live-apps-case-audit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseAuditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-cockpit/live-apps-case-cockpit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseCockpitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-creator-widget/live-apps-case-creator-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseCreatorWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-creator/live-apps-case-creator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseCreatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-creators/live-apps-case-creators.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseCreatorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-data-display/live-apps-case-data-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseDataDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-data/live-apps-case-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-list/live-apps-case-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-overview-report/live-apps-case-overview-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseOverviewReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-schema-list/live-apps-case-schema-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseSchemaListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-search/live-apps-case-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-state-audit/live-apps-case-state-audit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseStateAuditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-states/live-apps-case-states.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseStatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-summary/live-apps-case-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-case-type-overview-report/live-apps-case-type-overview-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCaseTypeOverviewReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-component/live-apps-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-creator-dialog/live-apps-creator-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCreatorDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-creator-selector/live-apps-creator-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCreatorSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-creators/live-apps-creators.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsCreatorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-document-viewer/live-apps-document-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsDocumentViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsDocumentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsDocumentUploadDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-documents/live-apps-documents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsDocumentViewerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-favorite-cases/live-apps-favorite-cases.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsFavoriteCasesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-home-cockpit/live-apps-home-cockpit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsHomeCockpitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-landing-page/live-apps-landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsLandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-login/live-apps-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-milestone/live-apps-milestone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsMilestoneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-notes-editor/live-apps-notes-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsNotesEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-notes/live-apps-notes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsNotesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-pie/live-apps-pie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsPieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-recent-cases/live-apps-recent-cases.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsRecentCasesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-reporting-cockpit/live-apps-reporting-cockpit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsReportingCockpitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-role-switcher/live-apps-role-switcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsRoleSwitcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-sandbox/live-apps-sandbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSandboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-search-widget/live-apps-search-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSearchWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-settings-recent-cases/live-apps-settings-recent-cases.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSettingsRecentCasesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-settings-roles/live-apps-settings-roles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSettingsRolesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-settings-summary-cards/live-apps-settings-summary-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSettingsSummaryCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-settings/live-apps-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/lib/components/live-apps-state-icon/live-apps-state-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiveAppsStateIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/lib/guards/case.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CaseGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/guards/role.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApiResponseError",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApiResponseText",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseAction",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseActionsList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseCreator",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseCreatorsList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseInfo",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseInfoList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseRoute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseSearchResults",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseType",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypesList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeStatesList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeStatesListList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IconMap",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JsonSchema",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginContext",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Metadata",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Note",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotesList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotesRole",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NoteThread",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationCollection",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Process",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProcessId",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Thread",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ThreadList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/liveappsdata.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-audit.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuditEvent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-audit.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuditEventAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-audit.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuditEventList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-card-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseCardConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseCreatorSelectionContext",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseInfoWithSchema",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PurgeResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-processes.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LaProcessSelection",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateAuditEvent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateAuditEventList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateTracker",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateTrackerData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-case-states.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TrackerState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-document.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DocTags",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-document.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Document",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-document.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DocumentList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-document.ts",
                "type": "class",
                "linktype": "classe",
                "name": "OrgFolder",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-groups-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Group",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-groups-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Groups",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-groups-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Roles",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-groups-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteAccessControlConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-groups-data.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteAccessDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeReportRecord",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeReportRecordInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypesReport",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeStateReport",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeStateReportRecord",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-live-apps-reporting.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CaseTypeStateReportStateInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-liveapps-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LiveAppsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/models/tc-liveapps-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LiveAppsConfigHolder",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/pipes/audit.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ParseAuditMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/all-groups.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AllGroupsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/all-roles.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AllRolesResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/case-data.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CaseDataResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/claims.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ClaimsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/groups.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "GroupsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/la-config.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LaConfigResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/liveapps-config.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LiveAppsConfigResolver",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/resolvers/roles.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RolesResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/live-apps.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LiveAppsService",
                "coveragePercent": 0,
                "coverageCount": "0/50",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-audit.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcCaseAuditService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-card-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcCaseCardConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-card-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENERIC_CASETYPE_ICON_SVG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-card-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENERIC_STATE_ICON_SVG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcCaseDataService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-processes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcCaseProcessesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-states.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcCaseStatesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-case-states.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MILESTONE_SVG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-document.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcDocumentService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-live-apps-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcLiveAppsConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-live-apps-reporting.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcLiveAppsReportingService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/tc-roles-service.ts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TcRolesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            }
        ]
    }
}